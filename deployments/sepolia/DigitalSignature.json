{
  "address": "0x7966833305d155B6411a0E0bAAD1ec8894F9319F",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "withNFT",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "nftImageCid",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CreateAgreementParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createAgreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getAgreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "signedPackets",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "totalPackets",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAgreements",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSignatures",
              "type": "uint256"
            }
          ],
          "internalType": "struct Profile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getSignatures",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignaturePacket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nftTokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct SignParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "sign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a269710a2fad7735e5edcf764f4ead76688129ae1bd202499441e94aa40b36a",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x7966833305d155B6411a0E0bAAD1ec8894F9319F",
    "transactionIndex": 0,
    "gasUsed": "5280052",
    "logsBloom": "0x
    "blockHash": "0xc5585cd25e5d68bb7ba13279f74110a3982a9d2be878c38fdb4947c07f92e258",
    "transactionHash": "0x2a269710a2fad7735e5edcf764f4ead76688129ae1bd202499441e94aa40b36a",
    "logs": [],
    "blockNumber": 2320466,
    "cumulativeGasUsed": "5280052",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "670d8487f02b8fad85f68e26459044b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"withNFT\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"nftImageCid\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CreateAgreementParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createAgreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getAgreements\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"signedPackets\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"totalPackets\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAgreements\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSignatures\",\"type\":\"uint256\"}],\"internalType\":\"struct Profile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct SignaturePacket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftTokenURI\",\"type\":\"string\"}],\"internalType\":\"struct SignParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DigitalSignature.sol\":\"DigitalSignature\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AgreementNFT.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport \\\"./utils/ERC721NoEvents.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract AgreementNFT is ERC721NoEvents {\\n  address private _owner;\\n  uint256 private nextTokenId;\\n  string private _imageCID;\\n  mapping(address => mapping(string => uint256)) private _ownerTokens;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory imageCID_\\n  ) ERC721NoEvents(_name, _symbol) {\\n    _owner = tx.origin;\\n    _imageCID = imageCID_;\\n  }\\n\\n  function getImageCID() public view returns (string memory) {\\n    return _imageCID;\\n  }\\n\\n  function signatureMint(\\n    address signer,\\n    string calldata tokenURI\\n  ) public returns (uint256) {\\n    require(_owner == tx.origin, \\\"Only owner can mint NFTs\\\");\\n\\n    _setTokenURI(nextTokenId, tokenURI);\\n    _safeMint(signer, nextTokenId);\\n    _ownerTokens[signer][tokenURI] = nextTokenId;\\n    return nextTokenId++;\\n  }\\n\\n  function verifyByTokenURI(\\n    address signer,\\n    string calldata tokenURI\\n  ) public returns (bool) {\\n    uint256 tokenId = _ownerTokens[signer][tokenURI];\\n    return _ownerOf(tokenId) == signer;\\n  }\\n}\\n\",\"keccak256\":\"0xcd388a0d95cfa10dff8d410982fff425b19c842959ba31746336e52b01d2603c\"},\"contracts/DigitalSignature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./AgreementNFT.sol\\\";\\n\\nstruct CreateAgreementParams {\\n  string identifier;\\n  string cid;\\n  string encryptedCid;\\n  string descriptionCid;\\n  bool withNFT;\\n  string nftImageCid;\\n  SignatureConstraint[] constraints;\\n}\\n\\nstruct SignParams {\\n  address agreementOwner;\\n  uint256 agreementIndex;\\n  string identifier;\\n  string encryptedCid;\\n  string nftTokenURI;\\n}\\n\\nenum AgreementStatus {\\n  PENDING,\\n  COMPLETE,\\n  APPROVED,\\n  REJECTED\\n}\\n\\nstruct Profile {\\n  uint256 totalAgreements;\\n  uint256 totalSignatures;\\n}\\n\\nstruct SignatureConstraint {\\n  string identifier;\\n  address signer;\\n  uint256 totalUsed;\\n  uint256 allowedToUse;\\n}\\n\\nstruct Agreement {\\n  address owner;\\n  AgreementStatus status;\\n  uint256 index;\\n  string identifier;\\n  string cid;\\n  string encryptedCid;\\n  string descriptionCid;\\n  uint8 signedPackets;\\n  uint8 totalPackets;\\n  address nftContractAddress;\\n  SignatureConstraint[] constraints;\\n}\\n\\nstruct SignaturePacket {\\n  address agreementOwner;\\n  uint256 agreementIndex;\\n  uint256 index;\\n  string identifier;\\n  string encryptedCid;\\n  address signer;\\n  address nftContractAddress;\\n  uint256 nftTokenId;\\n  uint timestamp;\\n  uint blockNumber;\\n}\\n\\ncontract DigitalSignature {\\n  mapping(address => Profile) profiles;\\n  mapping(address => mapping(uint256 => Agreement)) agreements;\\n  mapping(address => mapping(uint256 => SignaturePacket)) packets;\\n\\n  function getProfile() public view returns (Profile memory) {\\n    return profiles[tx.origin];\\n  }\\n\\n  function createAgreement(\\n    CreateAgreementParams memory params\\n  ) public returns (uint256) {\\n    Profile storage profile = profiles[tx.origin];\\n    Agreement storage agreement = agreements[tx.origin][\\n      profile.totalAgreements\\n    ];\\n\\n    agreement.owner = tx.origin;\\n    agreement.status = AgreementStatus.PENDING;\\n    agreement.index = profile.totalAgreements;\\n    agreement.identifier = params.identifier;\\n    agreement.cid = params.cid;\\n    agreement.encryptedCid = params.encryptedCid;\\n    agreement.descriptionCid = params.descriptionCid;\\n    agreement.signedPackets = 0;\\n    agreement.totalPackets = uint8(params.constraints.length);\\n\\n    for (uint i = 0; i < params.constraints.length; i++) {\\n      agreement.constraints.push(params.constraints[i]);\\n    }\\n\\n    if (params.withNFT) {\\n      _deployNFTContract(agreement, params.nftImageCid);\\n    }\\n\\n    return profile.totalAgreements++;\\n  }\\n\\n  function _deployNFTContract(\\n    Agreement storage agreement,\\n    string memory nftImageCid\\n  ) internal returns (address) {\\n    AgreementNFT nftContract = new AgreementNFT(\\n      agreement.identifier,\\n      agreement.identifier,\\n      nftImageCid\\n    );\\n    agreement.nftContractAddress = address(nftContract);\\n\\n    return agreement.nftContractAddress;\\n  }\\n\\n  function sign(SignParams calldata params) public returns (uint256) {\\n    Agreement storage agreement = agreements[params.agreementOwner][\\n      params.agreementIndex\\n    ];\\n    require(agreement.owner == params.agreementOwner, \\\"Invalid agreement\\\");\\n    require(\\n      agreement.status == AgreementStatus.PENDING,\\n      \\\"Agreement is not PENDING \\\"\\n    );\\n\\n    SignatureConstraint storage constraint;\\n    bool found = false;\\n    for (uint i = 0; i < agreement.constraints.length; i++) {\\n      if (\\n        keccak256(abi.encodePacked(agreement.constraints[i].identifier)) ==\\n        keccak256(abi.encodePacked(params.identifier))\\n      ) {\\n        found = true;\\n        constraint = agreement.constraints[i];\\n        require(\\n          constraint.allowedToUse == 0 ||\\n            constraint.totalUsed < constraint.allowedToUse,\\n          \\\"Signature already gathered\\\"\\n        );\\n        require(\\n          constraint.signer == tx.origin || constraint.signer == address(0),\\n          \\\"Mismatched signer\\\"\\n        );\\n        constraint.allowedToUse++;\\n        if (constraint.allowedToUse == 1) {\\n          constraint.signer = tx.origin;\\n        }\\n\\n        break;\\n      }\\n    }\\n\\n    require(found, \\\"Missing signature constraint\\\");\\n\\n    Profile storage profile = profiles[tx.origin];\\n\\n    SignaturePacket memory packet = SignaturePacket({\\n      agreementOwner: agreement.owner,\\n      agreementIndex: agreement.index,\\n      index: profile.totalSignatures,\\n      identifier: params.identifier,\\n      encryptedCid: params.encryptedCid,\\n      signer: tx.origin,\\n      nftContractAddress: agreement.nftContractAddress,\\n      nftTokenId: 0,\\n      timestamp: block.timestamp,\\n      blockNumber: block.number\\n    });\\n\\n    if (agreement.nftContractAddress != address(0)) {\\n      AgreementNFT nftContract = AgreementNFT(agreement.nftContractAddress);\\n      packet.nftTokenId = nftContract.signatureMint(\\n        tx.origin,\\n        params.nftTokenURI\\n      );\\n    }\\n\\n    packets[tx.origin][profile.totalSignatures] = packet;\\n\\n    agreement.signedPackets++;\\n    if (agreement.signedPackets == agreement.totalPackets) {\\n      agreement.status = AgreementStatus.COMPLETE;\\n    }\\n\\n    return profile.totalSignatures++;\\n  }\\n\\n  function getAgreements(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (Agreement[] memory) {\\n    Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalAgreements - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    Agreement[] memory ags = new Agreement[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      ags[index++] = agreements[owner][i];\\n    }\\n\\n    return ags;\\n  }\\n\\n  function getSignatures(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (SignaturePacket[] memory) {\\n    Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalSignatures - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    SignaturePacket[] memory sigs = new SignaturePacket[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      sigs[index++] = packets[owner][i];\\n    }\\n\\n    return sigs;\\n  }\\n}\\n\",\"keccak256\":\"0xecea9aa947bad8d07663a93bacab7259a3d75802a2c09fe53cad36564a5eec7b\",\"license\":\"UNLICENSED\"},\"contracts/utils/ERC721NoEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721NoEvents is Context, ERC165, IERC721, IERC721Metadata {\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to owner address\\n  mapping(uint256 => address) private _owners;\\n\\n  // Mapping owner address to token count\\n  mapping(address => uint256) private _balances;\\n\\n  // Optional mapping for token URIs\\n  mapping(uint256 => string) private _tokenURIs;\\n\\n  /**\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override(ERC165, IERC165) returns (bool) {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      ERC165.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(\\n    uint256 tokenId\\n  ) public view virtual override returns (string memory) {\\n    _requireMinted(tokenId);\\n\\n    string memory _tokenURI = _tokenURIs[tokenId];\\n    string memory base = _baseURI();\\n\\n    // If there is no base URI, return the token URI.\\n    if (bytes(base).length == 0) {\\n      return _tokenURI;\\n    }\\n    // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n    if (bytes(_tokenURI).length > 0) {\\n      return string(abi.encodePacked(base, _tokenURI));\\n    }\\n\\n    return\\n      bytes(base).length > 0\\n        ? string(abi.encodePacked(base, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _setTokenURI(\\n    uint256 tokenId,\\n    string memory _tokenURI\\n  ) internal virtual {\\n    require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n    _tokenURIs[tokenId] = _tokenURI;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(\\n    address owner\\n  ) public view virtual override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n    return _balances[owner];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(\\n    uint256 tokenId\\n  ) public view virtual override returns (address) {\\n    address owner = _ownerOf(tokenId);\\n    require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n    return owner;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overridden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(\\n    uint256 tokenId\\n  ) public view virtual override returns (address) {\\n    return address(0);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(\\n    address operator,\\n    bool approved\\n  ) public virtual override {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(\\n    address owner,\\n    address operator\\n  ) public view virtual override returns (bool) {\\n    return false;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public virtual override {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n   */\\n  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n    return _owners[tokenId];\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return _ownerOf(tokenId) != address(0);\\n  }\\n\\n  /**\\n   * @dev Safely mints `tokenId` and transfers it to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\n    _safeMint(to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) internal virtual {\\n    _mint(to, tokenId);\\n    require(\\n      _checkOnERC721Received(address(0), to, tokenId, data),\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Mints `tokenId` and transfers it to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - `to` cannot be the zero address.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n    // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    unchecked {\\n      // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n      // Given that tokens are minted one by one, it is impossible in practice that\\n      // this ever happens. Might change if we allow batch minting.\\n      // The ERC fails to describe this case.\\n      _balances[to] += 1;\\n    }\\n\\n    _owners[tokenId] = to;\\n\\n    _afterTokenTransfer(address(0), to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   * This is an internal function that does not check if the sender is authorized to operate on the token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ERC721NoEvents.ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n    // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n    owner = ERC721NoEvents.ownerOf(tokenId);\\n\\n    unchecked {\\n      // Cannot overflow, as that would require more tokens to be burned/transferred\\n      // out than the owner initially received through minting and transferring in.\\n      _balances[owner] -= 1;\\n    }\\n    delete _owners[tokenId];\\n\\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\\n      delete _tokenURIs[tokenId];\\n    }\\n\\n    _afterTokenTransfer(owner, address(0), tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Reverts if the `tokenId` has not been minted yet.\\n   */\\n  function _requireMinted(uint256 tokenId) internal view virtual {\\n    require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\\n      returns (bytes4 retval) {\\n        return retval == IERC721Receiver.onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          /// @solidity memory-safe-assembly\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n   * - When `from` is zero, the tokens will be minted for `to`.\\n   * - When `to` is zero, ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `batchSize` is non-zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 /* firstTokenId */,\\n    uint256 batchSize\\n  ) internal virtual {\\n    if (batchSize > 1) {\\n      if (from != address(0)) {\\n        _balances[from] -= batchSize;\\n      }\\n      if (to != address(0)) {\\n        _balances[to] += batchSize;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n   * - When `from` is zero, the tokens were minted for `to`.\\n   * - When `to` is zero, ``from``'s tokens were burned.\\n   * - `from` and `to` are never both zero.\\n   * - `batchSize` is non-zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 firstTokenId,\\n    uint256 batchSize\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xbc05254b3b3ef65579635525e566310c295b2468dc4f6c29b0fb01f7f84c4ce1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f01806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c8063554230f91462000063578063bc9c90561462000099578063be08164e14620000cf578063c07088551462000105578063d6afc9b1146200013b575b600080fd5b6200008160048036038101906200007b919062001c6c565b6200015d565b60405162000090919062002141565b60405180910390f35b620000b76004803603810190620000b1919062001c6c565b6200081c565b604051620000c691906200232a565b60405180910390f35b620000ed6004803603810190620000e7919062002375565b62000c45565b604051620000fc9190620023d7565b60405180910390f35b6200012360048036038101906200011d9190620028ad565b6200160f565b604051620001329190620023d7565b60405180910390f35b62000145620018f7565b60405162000154919062002931565b60405180910390f35b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080858360000151620001d591906200297d565b905060008560ff168211620001eb5781620001f0565b8560ff165b905060008167ffffffffffffffff811115620002115762000210620023f9565b5b6040519080825280602002602001820160405280156200024e57816020015b6200023a62001a1c565b815260200190600190039081620002305790505b50905060008890505b8289620002659190620029b8565b8110156200080c57600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600381111562000347576200034662001d05565b5b60038111156200035c576200035b62001d05565b5b8152602001600182015481526020016002820180546200037c9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620003aa9062002a22565b8015620003fb5780601f10620003cf57610100808354040283529160200191620003fb565b820191906000526020600020905b815481529060010190602001808311620003dd57829003601f168201915b50505050508152602001600382018054620004169062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620004449062002a22565b8015620004955780601f10620004695761010080835404028352916020019162000495565b820191906000526020600020905b8154815290600101906020018083116200047757829003601f168201915b50505050508152602001600482018054620004b09062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620004de9062002a22565b80156200052f5780601f1062000503576101008083540402835291602001916200052f565b820191906000526020600020905b8154815290600101906020018083116200051157829003601f168201915b505050505081526020016005820180546200054a9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620005789062002a22565b8015620005c95780601f106200059d57610100808354040283529160200191620005c9565b820191906000526020600020905b815481529060010190602001808311620005ab57829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff1681526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015620007bf5783829060005260206000209060040201604051806080016040529081600082018054620006bd9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620006eb9062002a22565b80156200073c5780601f1062000710576101008083540402835291602001916200073c565b820191906000526020600020905b8154815290600101906020018083116200071e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250508152602001906001019062000687565b5050505081525050828680620007d59062002a57565b975081518110620007eb57620007ea62002aa4565b5b60200260200101819052508080620008039062002a57565b91505062000257565b5080955050505050509392505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000808583602001516200089491906200297d565b905060008560ff168211620008aa5781620008af565b8560ff165b905060008167ffffffffffffffff811115620008d057620008cf620023f9565b5b6040519080825280602002602001820160405280156200090d57816020015b620008f962001abd565b815260200190600190039081620008ef5790505b50905060008890505b8289620009249190620029b8565b81101562000c3557600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805462000a049062002a22565b80601f016020809104026020016040519081016040528092919081815260200182805462000a329062002a22565b801562000a835780601f1062000a575761010080835404028352916020019162000a83565b820191906000526020600020905b81548152906001019060200180831162000a6557829003601f168201915b5050505050815260200160048201805462000a9e9062002a22565b80601f016020809104026020016040519081016040528092919081815260200182805462000acc9062002a22565b801562000b1d5780601f1062000af15761010080835404028352916020019162000b1d565b820191906000526020600020905b81548152906001019060200180831162000aff57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820154815260200160098201548152505082868062000bfe9062002a57565b97508151811062000c145762000c1362002aa4565b5b6020026020010181905250808062000c2c9062002a57565b91505062000916565b5080955050505050509392505050565b6000806001600084600001602081019062000c61919062002ad3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084602001358152602001908152602001600020905082600001602081019062000cc7919062002ad3565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000d5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d529062002b66565b60405180910390fd5b6000600381111562000d725762000d7162001d05565b5b8160000160149054906101000a900460ff16600381111562000d995762000d9862001d05565b5b1462000ddc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dd39062002bd8565b60405180910390fd5b6000806000905060005b83600701805490508110156200108d5785806040019062000e08919062002c09565b60405160200162000e1b92919062002ca9565b6040516020818303038152906040528051906020012084600701828154811062000e4a5762000e4962002aa4565b5b906000526020600020906004020160000160405160200162000e6d919062002d68565b604051602081830303815290604052805190602001200362001077576001915083600701818154811062000ea65762000ea562002aa4565b5b9060005260206000209060040201925060008360030154148062000ed1575082600301548360020154105b62000f13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f0a9062002dd1565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148062000fc25750600073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b62001004576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ffb9062002e43565b60405180910390fd5b8260030160008154809291906200101b9062002a57565b919050555060018360030154036200107157328360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6200108d565b8080620010849062002a57565b91505062000de6565b5080620010d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010c89062002eb5565b60405180910390fd5b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040518061014001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866001015481526020018360010154815260200188806040019062001187919062002c09565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001888060600190620011e1919062002c09565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018660060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001428152602001438152509050600073ffffffffffffffffffffffffffffffffffffffff168560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620013ba5760008560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166301a95bb3328a806080019062001349919062002c09565b6040518463ffffffff1660e01b8152600401620013699392919062002f1b565b6020604051808303816000875af115801562001389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013af919062002f68565b8260e0018181525050505b80600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301908162001481919062003157565b50608082015181600401908162001499919062003157565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701556101008201518160080155610120820151816009015590505084600601600081819054906101000a900460ff16809291906200156e906200323e565b91906101000a81548160ff021916908360ff160217905550508460060160019054906101000a900460ff1660ff168560060160009054906101000a900460ff1660ff1603620015e85760018560000160146101000a81548160ff02191690836003811115620015e257620015e162001d05565b5b02179055505b816001016000815480929190620015ff9062002a57565b9190505595505050505050919050565b6000806000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000015481526020019081526020016000209050328160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160000160146101000a81548160ff0219169083600381111562001718576200171762001d05565b5b021790555081600001548160010181905550836000015181600201908162001741919062003157565b50836020015181600301908162001759919062003157565b50836040015181600401908162001771919062003157565b50836060015181600501908162001789919062003157565b5060008160060160006101000a81548160ff021916908360ff1602179055508360c00151518160060160016101000a81548160ff021916908360ff16021790555060005b8460c0015151811015620018b557816007018560c001518281518110620017f957620017f862002aa4565b5b60200260200101519080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908162001841919062003157565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015550508080620018ac9062002a57565b915050620017cd565b50836080015115620018d357620018d1818560a0015162001963565b505b816000016000815480929190620018ea9062002a57565b9190505592505050919050565b6200190162001b52565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905090565b6000808360020184600201846040516200197d9062001b6c565b6200198b939291906200333d565b604051809103906000f080158015620019a8573d6000803e3d6000fd5b509050808460060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600381111562001a5c5762001a5b62001d05565b5b81526020016000815260200160608152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b612b3c806200339083390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001bbb8262001b8e565b9050919050565b62001bcd8162001bae565b811462001bd957600080fd5b50565b60008135905062001bed8162001bc2565b92915050565b6000819050919050565b62001c088162001bf3565b811462001c1457600080fd5b50565b60008135905062001c288162001bfd565b92915050565b600060ff82169050919050565b62001c468162001c2e565b811462001c5257600080fd5b50565b60008135905062001c668162001c3b565b92915050565b60008060006060848603121562001c885762001c8762001b84565b5b600062001c988682870162001bdc565b935050602062001cab8682870162001c17565b925050604062001cbe8682870162001c55565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001cff8162001bae565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811062001d485762001d4762001d05565b5b50565b600081905062001d5b8262001d34565b919050565b600062001d6d8262001d4b565b9050919050565b62001d7f8162001d60565b82525050565b62001d908162001bf3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001dd257808201518184015260208101905062001db5565b60008484015250505050565b6000601f19601f8301169050919050565b600062001dfc8262001d96565b62001e08818562001da1565b935062001e1a81856020860162001db2565b62001e258162001dde565b840191505092915050565b62001e3b8162001c2e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000608083016000830151848203600086015262001e8c828262001def565b915050602083015162001ea3602086018262001cf4565b50604083015162001eb8604086018262001d85565b50606083015162001ecd606086018262001d85565b508091505092915050565b600062001ee6838362001e6d565b905092915050565b6000602082019050919050565b600062001f088262001e41565b62001f14818562001e4c565b93508360208202850162001f288562001e5d565b8060005b8581101562001f6a578484038952815162001f48858262001ed8565b945062001f558362001eee565b925060208a0199505060018101905062001f2c565b50829750879550505050505092915050565b60006101608301600083015162001f97600086018262001cf4565b50602083015162001fac602086018262001d74565b50604083015162001fc1604086018262001d85565b506060830151848203606086015262001fdb828262001def565b9150506080830151848203608086015262001ff7828262001def565b91505060a083015184820360a086015262002013828262001def565b91505060c083015184820360c08601526200202f828262001def565b91505060e08301516200204660e086018262001e30565b506101008301516200205d61010086018262001e30565b506101208301516200207461012086018262001cf4565b5061014083015184820361014086015262002090828262001efb565b9150508091505092915050565b6000620020ab838362001f7c565b905092915050565b6000602082019050919050565b6000620020cd8262001cc8565b620020d9818562001cd3565b935083602082028501620020ed8562001ce4565b8060005b858110156200212f57848403895281516200210d85826200209d565b94506200211a83620020b3565b925060208a01995050600181019050620020f1565b50829750879550505050505092915050565b600060208201905081810360008301526200215d8184620020c0565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061014083016000830151620021ac600086018262001cf4565b506020830151620021c1602086018262001d85565b506040830151620021d6604086018262001d85565b5060608301518482036060860152620021f0828262001def565b915050608083015184820360808601526200220c828262001def565b91505060a08301516200222360a086018262001cf4565b5060c08301516200223860c086018262001cf4565b5060e08301516200224d60e086018262001d85565b506101008301516200226461010086018262001d85565b506101208301516200227b61012086018262001d85565b508091505092915050565b600062002294838362002191565b905092915050565b6000602082019050919050565b6000620022b68262002165565b620022c2818562002170565b935083602082028501620022d68562002181565b8060005b85811015620023185784840389528151620022f6858262002286565b945062002303836200229c565b925060208a01995050600181019050620022da565b50829750879550505050505092915050565b60006020820190508181036000830152620023468184620022a9565b905092915050565b600080fd5b600060a082840312156200236c576200236b6200234e565b5b81905092915050565b6000602082840312156200238e576200238d62001b84565b5b600082013567ffffffffffffffff811115620023af57620023ae62001b89565b5b620023bd8482850162002353565b91505092915050565b620023d18162001bf3565b82525050565b6000602082019050620023ee6000830184620023c6565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620024338262001dde565b810181811067ffffffffffffffff82111715620024555762002454620023f9565b5b80604052505050565b60006200246a62001b7a565b905062002478828262002428565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115620024aa57620024a9620023f9565b5b620024b58262001dde565b9050602081019050919050565b82818337600083830152505050565b6000620024e8620024e2846200248c565b6200245e565b90508281526020810184848401111562002507576200250662002487565b5b62002514848285620024c2565b509392505050565b600082601f83011262002534576200253362002482565b5b813562002546848260208601620024d1565b91505092915050565b60008115159050919050565b62002566816200254f565b81146200257257600080fd5b50565b60008135905062002586816200255b565b92915050565b600067ffffffffffffffff821115620025aa57620025a9620023f9565b5b602082029050602081019050919050565b600080fd5b600060808284031215620025d957620025d8620023f4565b5b620025e560806200245e565b9050600082013567ffffffffffffffff8111156200260857620026076200247d565b5b62002616848285016200251c565b60008301525060206200262c8482850162001bdc565b6020830152506040620026428482850162001c17565b6040830152506060620026588482850162001c17565b60608301525092915050565b60006200267b62002675846200258c565b6200245e565b90508083825260208201905060208402830185811115620026a157620026a0620025bb565b5b835b81811015620026ef57803567ffffffffffffffff811115620026ca57620026c962002482565b5b808601620026d98982620025c0565b85526020850194505050602081019050620026a3565b5050509392505050565b600082601f83011262002711576200271062002482565b5b81356200272384826020860162002664565b91505092915050565b600060e08284031215620027455762002744620023f4565b5b6200275160e06200245e565b9050600082013567ffffffffffffffff8111156200277457620027736200247d565b5b62002782848285016200251c565b600083015250602082013567ffffffffffffffff811115620027a957620027a86200247d565b5b620027b7848285016200251c565b602083015250604082013567ffffffffffffffff811115620027de57620027dd6200247d565b5b620027ec848285016200251c565b604083015250606082013567ffffffffffffffff8111156200281357620028126200247d565b5b62002821848285016200251c565b6060830152506080620028378482850162002575565b60808301525060a082013567ffffffffffffffff8111156200285e576200285d6200247d565b5b6200286c848285016200251c565b60a08301525060c082013567ffffffffffffffff8111156200289357620028926200247d565b5b620028a184828501620026f9565b60c08301525092915050565b600060208284031215620028c657620028c562001b84565b5b600082013567ffffffffffffffff811115620028e757620028e662001b89565b5b620028f5848285016200272c565b91505092915050565b60408201600082015162002916600085018262001d85565b5060208201516200292b602085018262001d85565b50505050565b6000604082019050620029486000830184620028fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200298a8262001bf3565b9150620029978362001bf3565b9250828203905081811115620029b257620029b16200294e565b5b92915050565b6000620029c58262001bf3565b9150620029d28362001bf3565b9250828201905080821115620029ed57620029ec6200294e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062002a3b57607f821691505b60208210810362002a515762002a50620029f3565b5b50919050565b600062002a648262001bf3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002a995762002a986200294e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121562002aec5762002aeb62001b84565b5b600062002afc8482850162001bdc565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642061677265656d656e74000000000000000000000000000000600082015250565b600062002b4e60118362002b05565b915062002b5b8262002b16565b602082019050919050565b6000602082019050818103600083015262002b818162002b3f565b9050919050565b7f41677265656d656e74206973206e6f742050454e44494e472000000000000000600082015250565b600062002bc060198362002b05565b915062002bcd8262002b88565b602082019050919050565b6000602082019050818103600083015262002bf38162002bb1565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811262002c295762002c2862002bfa565b5b80840192508235915067ffffffffffffffff82111562002c4e5762002c4d62002bff565b5b60208301925060018202360383131562002c6d5762002c6c62002c04565b5b509250929050565b600081905092915050565b600062002c8e838562002c75565b935062002c9d838584620024c2565b82840190509392505050565b600062002cb882848662002c80565b91508190509392505050565b60008190508160005260206000209050919050565b6000815462002ce88162002a22565b62002cf4818662002c75565b9450600182166000811462002d12576001811462002d285762002d5f565b60ff198316865281151582028601935062002d5f565b62002d338562002cc4565b60005b8381101562002d575781548189015260018201915060208101905062002d36565b838801955050505b50505092915050565b600062002d76828462002cd9565b915081905092915050565b7f5369676e617475726520616c7265616479206761746865726564000000000000600082015250565b600062002db9601a8362002b05565b915062002dc68262002d81565b602082019050919050565b6000602082019050818103600083015262002dec8162002daa565b9050919050565b7f4d69736d617463686564207369676e6572000000000000000000000000000000600082015250565b600062002e2b60118362002b05565b915062002e388262002df3565b602082019050919050565b6000602082019050818103600083015262002e5e8162002e1c565b9050919050565b7f4d697373696e67207369676e617475726520636f6e73747261696e7400000000600082015250565b600062002e9d601c8362002b05565b915062002eaa8262002e65565b602082019050919050565b6000602082019050818103600083015262002ed08162002e8e565b9050919050565b62002ee28162001bae565b82525050565b600062002ef6838562002b05565b935062002f05838584620024c2565b62002f108362001dde565b840190509392505050565b600060408201905062002f32600083018662002ed7565b818103602083015262002f4781848662002ee8565b9050949350505050565b60008151905062002f628162001bfd565b92915050565b60006020828403121562002f815762002f8062001b84565b5b600062002f918482850162002f51565b91505092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262002fe97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262002faa565b62002ff5868362002faa565b95508019841693508086168417925050509392505050565b6000819050919050565b600062003038620030326200302c8462001bf3565b6200300d565b62001bf3565b9050919050565b6000819050919050565b620030548362003017565b6200306c62003063826200303f565b84845462002fb7565b825550505050565b600090565b6200308362003074565b6200309081848462003049565b505050565b5b81811015620030b857620030ac60008262003079565b60018101905062003096565b5050565b601f8211156200310757620030d18162002cc4565b620030dc8462002f9a565b81016020851015620030ec578190505b62003104620030fb8562002f9a565b83018262003095565b50505b505050565b600082821c905092915050565b60006200312c600019846008026200310c565b1980831691505092915050565b600062003147838362003119565b9150826002028217905092915050565b620031628262001d96565b67ffffffffffffffff8111156200317e576200317d620023f9565b5b6200318a825462002a22565b62003197828285620030bc565b600060209050601f831160018114620031cf5760008415620031ba578287015190505b620031c6858262003139565b86555062003236565b601f198416620031df8662002cc4565b60005b828110156200320957848901518255600182019150602085019450602081019050620031e2565b8683101562003229578489015162003225601f89168262003119565b8355505b6001600288020188555050505b505050505050565b60006200324b8262001c2e565b915060ff82036200326157620032606200294e565b5b600182019050919050565b600081546200327b8162002a22565b62003287818662002b05565b94506001821660008114620032a55760018114620032bc57620032f3565b60ff198316865281151560200286019350620032f3565b620032c78562002cc4565b60005b83811015620032eb57815481890152600182019150602081019050620032ca565b808801955050505b50505092915050565b6000620033098262001d96565b62003315818562002b05565b93506200332781856020860162001db2565b620033328162001dde565b840191505092915050565b600060608201905081810360008301526200335981866200326c565b905081810360208301526200336f81856200326c565b90508181036040830152620033858184620032fc565b905094935050505056fe60806040523480156200001157600080fd5b5060405162002b3c38038062002b3c83398181016040528101906200003791906200024e565b828281600090816200004a919062000552565b5080600190816200005c919062000552565b50505032600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060079081620000b1919062000552565b5050505062000639565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012482620000d9565b810181811067ffffffffffffffff82111715620001465762000145620000ea565b5b80604052505050565b60006200015b620000bb565b905062000169828262000119565b919050565b600067ffffffffffffffff8211156200018c576200018b620000ea565b5b6200019782620000d9565b9050602081019050919050565b60005b83811015620001c4578082015181840152602081019050620001a7565b60008484015250505050565b6000620001e7620001e1846200016e565b6200014f565b905082815260208101848484011115620002065762000205620000d4565b5b62000213848285620001a4565b509392505050565b600082601f830112620002335762000232620000cf565b5b815162000245848260208601620001d0565b91505092915050565b6000806000606084860312156200026a5762000269620000c5565b5b600084015167ffffffffffffffff8111156200028b576200028a620000ca565b5b62000299868287016200021b565b935050602084015167ffffffffffffffff811115620002bd57620002bc620000ca565b5b620002cb868287016200021b565b925050604084015167ffffffffffffffff811115620002ef57620002ee620000ca565b5b620002fd868287016200021b565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200035a57607f821691505b60208210810362000370576200036f62000312565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003da7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200039b565b620003e686836200039b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004336200042d6200042784620003fe565b62000408565b620003fe565b9050919050565b6000819050919050565b6200044f8362000412565b620004676200045e826200043a565b848454620003a8565b825550505050565b600090565b6200047e6200046f565b6200048b81848462000444565b505050565b5b81811015620004b357620004a760008262000474565b60018101905062000491565b5050565b601f8211156200050257620004cc8162000376565b620004d7846200038b565b81016020851015620004e7578190505b620004ff620004f6856200038b565b83018262000490565b50505b505050565b600082821c905092915050565b6000620005276000198460080262000507565b1980831691505092915050565b600062000542838362000514565b9150826002028217905092915050565b6200055d8262000307565b67ffffffffffffffff811115620005795762000578620000ea565b5b62000585825462000341565b62000592828285620004b7565b600060209050601f831160018114620005ca5760008415620005b5578287015190505b620005c1858262000534565b86555062000631565b601f198416620005da8662000376565b60005b828110156200060457848901518255600182019150602085019450602081019050620005dd565b8683101562000624578489015162000620601f89168262000514565b8355505b6001600288020188555050505b505050505050565b6124f380620006496000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb465146102d3578063b88d4fde146102ef578063c87b56dd1461030b578063e985e9c51461033b57610100565b806342842e0e146102395780636352211e1461025557806370a082311461028557806395d89b41146102b557610100565b80630883a42e116100d35780630883a42e146101b3578063095ea7b3146101e357806323b872dd146101ff5780632ada0d541461021b57610100565b806301a95bb31461010557806301ffc9a71461013557806306fdde0314610165578063081812fc14610183575b600080fd5b61011f600480360381019061011a91906115db565b61036b565b60405161012c9190611654565b60405180910390f35b61014f600480360381019061014a91906116c7565b6104dd565b60405161015c919061170f565b60405180910390f35b61016d6105bf565b60405161017a91906117ba565b60405180910390f35b61019d60048036038101906101989190611808565b610651565b6040516101aa9190611844565b60405180910390f35b6101cd60048036038101906101c891906115db565b610658565b6040516101da919061170f565b60405180910390f35b6101fd60048036038101906101f8919061185f565b6106fc565b005b6102196004803603810190610214919061189f565b610741565b005b610223610787565b60405161023091906117ba565b60405180910390f35b610253600480360381019061024e919061189f565b610819565b005b61026f600480360381019061026a9190611808565b61085f565b60405161027c9190611844565b60405180910390f35b61029f600480360381019061029a91906118f2565b6108e5565b6040516102ac9190611654565b60405180910390f35b6102bd61099c565b6040516102ca91906117ba565b60405180910390f35b6102ed60048036038101906102e8919061194b565b610a2e565b005b61030960048036038101906103049190611abb565b610a73565b005b61032560048036038101906103209190611808565b610aba565b60405161033291906117ba565b60405180910390f35b61035560048036038101906103509190611b3e565b610c0c565b604051610362919061170f565b60405180910390f35b60003273ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f490611bca565b60405180910390fd5b61044d60065484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c14565b61045984600654610c81565b600654600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516104ab929190611c1a565b908152602001604051809103902081905550600660008154809291906104d090611c62565b9190505590509392505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b857506105b782610c9f565b5b9050919050565b6060600080546105ce90611cd9565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa90611cd9565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b6000919050565b600080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516106aa929190611c1a565b90815260200160405180910390205490508473ffffffffffffffffffffffffffffffffffffffff166106db82610d09565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b600061073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490611d56565b60405180910390fd5b5050565b6000610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990611d56565b60405180910390fd5b505050565b60606007805461079690611cd9565b80601f01602080910402602001604051908101604052809291908181526020018280546107c290611cd9565b801561080f5780601f106107e45761010080835404028352916020019161080f565b820191906000526020600020905b8154815290600101906020018083116107f257829003601f168201915b5050505050905090565b600061085a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085190611d56565b60405180910390fd5b505050565b60008061086b83610d09565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d390611dc2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90611e54565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546109ab90611cd9565b80601f01602080910402602001604051908101604052809291908181526020018280546109d790611cd9565b8015610a245780601f106109f957610100808354040283529160200191610a24565b820191906000526020600020905b815481529060010190602001808311610a0757829003601f168201915b5050505050905090565b6000610a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6690611d56565b60405180910390fd5b5050565b6000610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab90611d56565b60405180910390fd5b50505050565b6060610ac582610d46565b6000600460008481526020019081526020016000208054610ae590611cd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1190611cd9565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b505050505090506000610b6f610d91565b90506000815103610b84578192505050610c07565b600082511115610bb9578082604051602001610ba1929190611ea5565b60405160208183030381529060405292505050610c07565b6000815111610bd75760405180602001604052806000815250610c02565b80610be185610da8565b604051602001610bf2929190611ea5565b6040516020818303038152906040525b925050505b919050565b600092915050565b610c1d82610e76565b610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5390611f3b565b60405180910390fd5b80600460008481526020019081526020016000209081610c7c9190612107565b505050565b610c9b828260405180602001604052806000815250610eb7565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610d4f81610e76565b610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8590611dc2565b60405180910390fd5b50565b606060405180602001604052806000815250905090565b606060006001610db784610f12565b01905060008167ffffffffffffffff811115610dd657610dd5611990565b5b6040519080825280601f01601f191660200182016040528015610e085781602001600182028036833780820191505090505b509050600082602001820190505b600115610e6b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610e5f57610e5e6121d9565b5b04945060008503610e16575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16610e9883610d09565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b610ec18383611065565b610ece6000848484611226565b610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f049061227a565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610f70577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610f6657610f656121d9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610fad576d04ee2d6d415b85acef81000000008381610fa357610fa26121d9565b5b0492506020810190505b662386f26fc100008310610fdc57662386f26fc100008381610fd257610fd16121d9565b5b0492506010810190505b6305f5e1008310611005576305f5e1008381610ffb57610ffa6121d9565b5b0492506008810190505b612710831061102a5761271083816110205761101f6121d9565b5b0492506004810190505b6064831061104d5760648381611043576110426121d9565b5b0492506002810190505b600a831061105c576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb906122e6565b60405180910390fd5b6110dd81610e76565b1561111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111490612352565b60405180910390fd5b61112b6000838360016113ad565b61113481610e76565b15611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b90612352565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112226000838360016114d3565b5050565b60006112478473ffffffffffffffffffffffffffffffffffffffff166114d9565b156113a0578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026112706114fc565b8786866040518563ffffffff1660e01b815260040161129294939291906123c7565b6020604051808303816000875af19250505080156112ce57506040513d601f19601f820116820180604052508101906112cb9190612428565b60015b611350573d80600081146112fe576040519150601f19603f3d011682016040523d82523d6000602084013e611303565b606091505b506000815103611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f9061227a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506113a5565b600190505b949350505050565b60018111156114cd57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146114415780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114399190612455565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146114cc5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114c49190612489565b925050819055505b5b50505050565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061154382611518565b9050919050565b61155381611538565b811461155e57600080fd5b50565b6000813590506115708161154a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261159b5761159a611576565b5b8235905067ffffffffffffffff8111156115b8576115b761157b565b5b6020830191508360018202830111156115d4576115d3611580565b5b9250929050565b6000806000604084860312156115f4576115f361150e565b5b600061160286828701611561565b935050602084013567ffffffffffffffff81111561162357611622611513565b5b61162f86828701611585565b92509250509250925092565b6000819050919050565b61164e8161163b565b82525050565b60006020820190506116696000830184611645565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116a48161166f565b81146116af57600080fd5b50565b6000813590506116c18161169b565b92915050565b6000602082840312156116dd576116dc61150e565b5b60006116eb848285016116b2565b91505092915050565b60008115159050919050565b611709816116f4565b82525050565b60006020820190506117246000830184611700565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611764578082015181840152602081019050611749565b60008484015250505050565b6000601f19601f8301169050919050565b600061178c8261172a565b6117968185611735565b93506117a6818560208601611746565b6117af81611770565b840191505092915050565b600060208201905081810360008301526117d48184611781565b905092915050565b6117e58161163b565b81146117f057600080fd5b50565b600081359050611802816117dc565b92915050565b60006020828403121561181e5761181d61150e565b5b600061182c848285016117f3565b91505092915050565b61183e81611538565b82525050565b60006020820190506118596000830184611835565b92915050565b600080604083850312156118765761187561150e565b5b600061188485828601611561565b9250506020611895858286016117f3565b9150509250929050565b6000806000606084860312156118b8576118b761150e565b5b60006118c686828701611561565b93505060206118d786828701611561565b92505060406118e8868287016117f3565b9150509250925092565b6000602082840312156119085761190761150e565b5b600061191684828501611561565b91505092915050565b611928816116f4565b811461193357600080fd5b50565b6000813590506119458161191f565b92915050565b600080604083850312156119625761196161150e565b5b600061197085828601611561565b925050602061198185828601611936565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119c882611770565b810181811067ffffffffffffffff821117156119e7576119e6611990565b5b80604052505050565b60006119fa611504565b9050611a0682826119bf565b919050565b600067ffffffffffffffff821115611a2657611a25611990565b5b611a2f82611770565b9050602081019050919050565b82818337600083830152505050565b6000611a5e611a5984611a0b565b6119f0565b905082815260208101848484011115611a7a57611a7961198b565b5b611a85848285611a3c565b509392505050565b600082601f830112611aa257611aa1611576565b5b8135611ab2848260208601611a4b565b91505092915050565b60008060008060808587031215611ad557611ad461150e565b5b6000611ae387828801611561565b9450506020611af487828801611561565b9350506040611b05878288016117f3565b925050606085013567ffffffffffffffff811115611b2657611b25611513565b5b611b3287828801611a8d565b91505092959194509250565b60008060408385031215611b5557611b5461150e565b5b6000611b6385828601611561565b9250506020611b7485828601611561565b9150509250929050565b7f4f6e6c79206f776e65722063616e206d696e74204e4654730000000000000000600082015250565b6000611bb4601883611735565b9150611bbf82611b7e565b602082019050919050565b60006020820190508181036000830152611be381611ba7565b9050919050565b600081905092915050565b6000611c018385611bea565b9350611c0e838584611a3c565b82840190509392505050565b6000611c27828486611bf5565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c6d8261163b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c9f57611c9e611c33565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611cf157607f821691505b602082108103611d0457611d03611caa565b5b50919050565b7f5472616e7366657273206e6f7420616c6c6f7765640000000000000000000000600082015250565b6000611d40601583611735565b9150611d4b82611d0a565b602082019050919050565b60006020820190508181036000830152611d6f81611d33565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dac601883611735565b9150611db782611d76565b602082019050919050565b60006020820190508181036000830152611ddb81611d9f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e3e602983611735565b9150611e4982611de2565b604082019050919050565b60006020820190508181036000830152611e6d81611e31565b9050919050565b6000611e7f8261172a565b611e898185611bea565b9350611e99818560208601611746565b80840191505092915050565b6000611eb18285611e74565b9150611ebd8284611e74565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000611f25602e83611735565b9150611f3082611ec9565b604082019050919050565b60006020820190508181036000830152611f5481611f18565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611fbd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f80565b611fc78683611f80565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612004611fff611ffa8461163b565b611fdf565b61163b565b9050919050565b6000819050919050565b61201e83611fe9565b61203261202a8261200b565b848454611f8d565b825550505050565b600090565b61204761203a565b612052818484612015565b505050565b5b818110156120765761206b60008261203f565b600181019050612058565b5050565b601f8211156120bb5761208c81611f5b565b61209584611f70565b810160208510156120a4578190505b6120b86120b085611f70565b830182612057565b50505b505050565b600082821c905092915050565b60006120de600019846008026120c0565b1980831691505092915050565b60006120f783836120cd565b9150826002028217905092915050565b6121108261172a565b67ffffffffffffffff81111561212957612128611990565b5b6121338254611cd9565b61213e82828561207a565b600060209050601f831160018114612171576000841561215f578287015190505b61216985826120eb565b8655506121d1565b601f19841661217f86611f5b565b60005b828110156121a757848901518255600182019150602085019450602081019050612182565b868310156121c457848901516121c0601f8916826120cd565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612264603283611735565b915061226f82612208565b604082019050919050565b6000602082019050818103600083015261229381612257565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006122d0602083611735565b91506122db8261229a565b602082019050919050565b600060208201905081810360008301526122ff816122c3565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061233c601c83611735565b915061234782612306565b602082019050919050565b6000602082019050818103600083015261236b8161232f565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061239982612372565b6123a3818561237d565b93506123b3818560208601611746565b6123bc81611770565b840191505092915050565b60006080820190506123dc6000830187611835565b6123e96020830186611835565b6123f66040830185611645565b8181036060830152612408818461238e565b905095945050505050565b6000815190506124228161169b565b92915050565b60006020828403121561243e5761243d61150e565b5b600061244c84828501612413565b91505092915050565b60006124608261163b565b915061246b8361163b565b925082820390508181111561248357612482611c33565b5b92915050565b60006124948261163b565b915061249f8361163b565b92508282019050808211156124b7576124b6611c33565b5b9291505056fea2646970667358221220590ea1c216e6675fe07d24cae198263ea6fe278532909f9d8d4689a8f1b6ee3c64736f6c63430008110033a264697066735822122093eb9a3b274fd98c75a413083c80848152a9d92a44ee2e8f9d01be74c125da9c64736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c8063554230f91462000063578063bc9c90561462000099578063be08164e14620000cf578063c07088551462000105578063d6afc9b1146200013b575b600080fd5b6200008160048036038101906200007b919062001c6c565b6200015d565b60405162000090919062002141565b60405180910390f35b620000b76004803603810190620000b1919062001c6c565b6200081c565b604051620000c691906200232a565b60405180910390f35b620000ed6004803603810190620000e7919062002375565b62000c45565b604051620000fc9190620023d7565b60405180910390f35b6200012360048036038101906200011d9190620028ad565b6200160f565b604051620001329190620023d7565b60405180910390f35b62000145620018f7565b60405162000154919062002931565b60405180910390f35b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080858360000151620001d591906200297d565b905060008560ff168211620001eb5781620001f0565b8560ff165b905060008167ffffffffffffffff811115620002115762000210620023f9565b5b6040519080825280602002602001820160405280156200024e57816020015b6200023a62001a1c565b815260200190600190039081620002305790505b50905060008890505b8289620002659190620029b8565b8110156200080c57600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600381111562000347576200034662001d05565b5b60038111156200035c576200035b62001d05565b5b8152602001600182015481526020016002820180546200037c9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620003aa9062002a22565b8015620003fb5780601f10620003cf57610100808354040283529160200191620003fb565b820191906000526020600020905b815481529060010190602001808311620003dd57829003601f168201915b50505050508152602001600382018054620004169062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620004449062002a22565b8015620004955780601f10620004695761010080835404028352916020019162000495565b820191906000526020600020905b8154815290600101906020018083116200047757829003601f168201915b50505050508152602001600482018054620004b09062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620004de9062002a22565b80156200052f5780601f1062000503576101008083540402835291602001916200052f565b820191906000526020600020905b8154815290600101906020018083116200051157829003601f168201915b505050505081526020016005820180546200054a9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620005789062002a22565b8015620005c95780601f106200059d57610100808354040283529160200191620005c9565b820191906000526020600020905b815481529060010190602001808311620005ab57829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff1681526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015620007bf5783829060005260206000209060040201604051806080016040529081600082018054620006bd9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620006eb9062002a22565b80156200073c5780601f1062000710576101008083540402835291602001916200073c565b820191906000526020600020905b8154815290600101906020018083116200071e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250508152602001906001019062000687565b5050505081525050828680620007d59062002a57565b975081518110620007eb57620007ea62002aa4565b5b60200260200101819052508080620008039062002a57565b91505062000257565b5080955050505050509392505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000808583602001516200089491906200297d565b905060008560ff168211620008aa5781620008af565b8560ff165b905060008167ffffffffffffffff811115620008d057620008cf620023f9565b5b6040519080825280602002602001820160405280156200090d57816020015b620008f962001abd565b815260200190600190039081620008ef5790505b50905060008890505b8289620009249190620029b8565b81101562000c3557600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805462000a049062002a22565b80601f016020809104026020016040519081016040528092919081815260200182805462000a329062002a22565b801562000a835780601f1062000a575761010080835404028352916020019162000a83565b820191906000526020600020905b81548152906001019060200180831162000a6557829003601f168201915b5050505050815260200160048201805462000a9e9062002a22565b80601f016020809104026020016040519081016040528092919081815260200182805462000acc9062002a22565b801562000b1d5780601f1062000af15761010080835404028352916020019162000b1d565b820191906000526020600020905b81548152906001019060200180831162000aff57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820154815260200160098201548152505082868062000bfe9062002a57565b97508151811062000c145762000c1362002aa4565b5b6020026020010181905250808062000c2c9062002a57565b91505062000916565b5080955050505050509392505050565b6000806001600084600001602081019062000c61919062002ad3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084602001358152602001908152602001600020905082600001602081019062000cc7919062002ad3565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000d5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d529062002b66565b60405180910390fd5b6000600381111562000d725762000d7162001d05565b5b8160000160149054906101000a900460ff16600381111562000d995762000d9862001d05565b5b1462000ddc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dd39062002bd8565b60405180910390fd5b6000806000905060005b83600701805490508110156200108d5785806040019062000e08919062002c09565b60405160200162000e1b92919062002ca9565b6040516020818303038152906040528051906020012084600701828154811062000e4a5762000e4962002aa4565b5b906000526020600020906004020160000160405160200162000e6d919062002d68565b604051602081830303815290604052805190602001200362001077576001915083600701818154811062000ea65762000ea562002aa4565b5b9060005260206000209060040201925060008360030154148062000ed1575082600301548360020154105b62000f13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f0a9062002dd1565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148062000fc25750600073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b62001004576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ffb9062002e43565b60405180910390fd5b8260030160008154809291906200101b9062002a57565b919050555060018360030154036200107157328360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6200108d565b8080620010849062002a57565b91505062000de6565b5080620010d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010c89062002eb5565b60405180910390fd5b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040518061014001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866001015481526020018360010154815260200188806040019062001187919062002c09565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001888060600190620011e1919062002c09565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018660060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001428152602001438152509050600073ffffffffffffffffffffffffffffffffffffffff168560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620013ba5760008560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166301a95bb3328a806080019062001349919062002c09565b6040518463ffffffff1660e01b8152600401620013699392919062002f1b565b6020604051808303816000875af115801562001389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013af919062002f68565b8260e0018181525050505b80600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301908162001481919062003157565b50608082015181600401908162001499919062003157565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701556101008201518160080155610120820151816009015590505084600601600081819054906101000a900460ff16809291906200156e906200323e565b91906101000a81548160ff021916908360ff160217905550508460060160019054906101000a900460ff1660ff168560060160009054906101000a900460ff1660ff1603620015e85760018560000160146101000a81548160ff02191690836003811115620015e257620015e162001d05565b5b02179055505b816001016000815480929190620015ff9062002a57565b9190505595505050505050919050565b6000806000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000015481526020019081526020016000209050328160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160000160146101000a81548160ff0219169083600381111562001718576200171762001d05565b5b021790555081600001548160010181905550836000015181600201908162001741919062003157565b50836020015181600301908162001759919062003157565b50836040015181600401908162001771919062003157565b50836060015181600501908162001789919062003157565b5060008160060160006101000a81548160ff021916908360ff1602179055508360c00151518160060160016101000a81548160ff021916908360ff16021790555060005b8460c0015151811015620018b557816007018560c001518281518110620017f957620017f862002aa4565b5b60200260200101519080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908162001841919062003157565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015550508080620018ac9062002a57565b915050620017cd565b50836080015115620018d357620018d1818560a0015162001963565b505b816000016000815480929190620018ea9062002a57565b9190505592505050919050565b6200190162001b52565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905090565b6000808360020184600201846040516200197d9062001b6c565b6200198b939291906200333d565b604051809103906000f080158015620019a8573d6000803e3d6000fd5b509050808460060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600381111562001a5c5762001a5b62001d05565b5b81526020016000815260200160608152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b612b3c806200339083390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001bbb8262001b8e565b9050919050565b62001bcd8162001bae565b811462001bd957600080fd5b50565b60008135905062001bed8162001bc2565b92915050565b6000819050919050565b62001c088162001bf3565b811462001c1457600080fd5b50565b60008135905062001c288162001bfd565b92915050565b600060ff82169050919050565b62001c468162001c2e565b811462001c5257600080fd5b50565b60008135905062001c668162001c3b565b92915050565b60008060006060848603121562001c885762001c8762001b84565b5b600062001c988682870162001bdc565b935050602062001cab8682870162001c17565b925050604062001cbe8682870162001c55565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001cff8162001bae565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811062001d485762001d4762001d05565b5b50565b600081905062001d5b8262001d34565b919050565b600062001d6d8262001d4b565b9050919050565b62001d7f8162001d60565b82525050565b62001d908162001bf3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001dd257808201518184015260208101905062001db5565b60008484015250505050565b6000601f19601f8301169050919050565b600062001dfc8262001d96565b62001e08818562001da1565b935062001e1a81856020860162001db2565b62001e258162001dde565b840191505092915050565b62001e3b8162001c2e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000608083016000830151848203600086015262001e8c828262001def565b915050602083015162001ea3602086018262001cf4565b50604083015162001eb8604086018262001d85565b50606083015162001ecd606086018262001d85565b508091505092915050565b600062001ee6838362001e6d565b905092915050565b6000602082019050919050565b600062001f088262001e41565b62001f14818562001e4c565b93508360208202850162001f288562001e5d565b8060005b8581101562001f6a578484038952815162001f48858262001ed8565b945062001f558362001eee565b925060208a0199505060018101905062001f2c565b50829750879550505050505092915050565b60006101608301600083015162001f97600086018262001cf4565b50602083015162001fac602086018262001d74565b50604083015162001fc1604086018262001d85565b506060830151848203606086015262001fdb828262001def565b9150506080830151848203608086015262001ff7828262001def565b91505060a083015184820360a086015262002013828262001def565b91505060c083015184820360c08601526200202f828262001def565b91505060e08301516200204660e086018262001e30565b506101008301516200205d61010086018262001e30565b506101208301516200207461012086018262001cf4565b5061014083015184820361014086015262002090828262001efb565b9150508091505092915050565b6000620020ab838362001f7c565b905092915050565b6000602082019050919050565b6000620020cd8262001cc8565b620020d9818562001cd3565b935083602082028501620020ed8562001ce4565b8060005b858110156200212f57848403895281516200210d85826200209d565b94506200211a83620020b3565b925060208a01995050600181019050620020f1565b50829750879550505050505092915050565b600060208201905081810360008301526200215d8184620020c0565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061014083016000830151620021ac600086018262001cf4565b506020830151620021c1602086018262001d85565b506040830151620021d6604086018262001d85565b5060608301518482036060860152620021f0828262001def565b915050608083015184820360808601526200220c828262001def565b91505060a08301516200222360a086018262001cf4565b5060c08301516200223860c086018262001cf4565b5060e08301516200224d60e086018262001d85565b506101008301516200226461010086018262001d85565b506101208301516200227b61012086018262001d85565b508091505092915050565b600062002294838362002191565b905092915050565b6000602082019050919050565b6000620022b68262002165565b620022c2818562002170565b935083602082028501620022d68562002181565b8060005b85811015620023185784840389528151620022f6858262002286565b945062002303836200229c565b925060208a01995050600181019050620022da565b50829750879550505050505092915050565b60006020820190508181036000830152620023468184620022a9565b905092915050565b600080fd5b600060a082840312156200236c576200236b6200234e565b5b81905092915050565b6000602082840312156200238e576200238d62001b84565b5b600082013567ffffffffffffffff811115620023af57620023ae62001b89565b5b620023bd8482850162002353565b91505092915050565b620023d18162001bf3565b82525050565b6000602082019050620023ee6000830184620023c6565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620024338262001dde565b810181811067ffffffffffffffff82111715620024555762002454620023f9565b5b80604052505050565b60006200246a62001b7a565b905062002478828262002428565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115620024aa57620024a9620023f9565b5b620024b58262001dde565b9050602081019050919050565b82818337600083830152505050565b6000620024e8620024e2846200248c565b6200245e565b90508281526020810184848401111562002507576200250662002487565b5b62002514848285620024c2565b509392505050565b600082601f83011262002534576200253362002482565b5b813562002546848260208601620024d1565b91505092915050565b60008115159050919050565b62002566816200254f565b81146200257257600080fd5b50565b60008135905062002586816200255b565b92915050565b600067ffffffffffffffff821115620025aa57620025a9620023f9565b5b602082029050602081019050919050565b600080fd5b600060808284031215620025d957620025d8620023f4565b5b620025e560806200245e565b9050600082013567ffffffffffffffff8111156200260857620026076200247d565b5b62002616848285016200251c565b60008301525060206200262c8482850162001bdc565b6020830152506040620026428482850162001c17565b6040830152506060620026588482850162001c17565b60608301525092915050565b60006200267b62002675846200258c565b6200245e565b90508083825260208201905060208402830185811115620026a157620026a0620025bb565b5b835b81811015620026ef57803567ffffffffffffffff811115620026ca57620026c962002482565b5b808601620026d98982620025c0565b85526020850194505050602081019050620026a3565b5050509392505050565b600082601f83011262002711576200271062002482565b5b81356200272384826020860162002664565b91505092915050565b600060e08284031215620027455762002744620023f4565b5b6200275160e06200245e565b9050600082013567ffffffffffffffff8111156200277457620027736200247d565b5b62002782848285016200251c565b600083015250602082013567ffffffffffffffff811115620027a957620027a86200247d565b5b620027b7848285016200251c565b602083015250604082013567ffffffffffffffff811115620027de57620027dd6200247d565b5b620027ec848285016200251c565b604083015250606082013567ffffffffffffffff8111156200281357620028126200247d565b5b62002821848285016200251c565b6060830152506080620028378482850162002575565b60808301525060a082013567ffffffffffffffff8111156200285e576200285d6200247d565b5b6200286c848285016200251c565b60a08301525060c082013567ffffffffffffffff8111156200289357620028926200247d565b5b620028a184828501620026f9565b60c08301525092915050565b600060208284031215620028c657620028c562001b84565b5b600082013567ffffffffffffffff811115620028e757620028e662001b89565b5b620028f5848285016200272c565b91505092915050565b60408201600082015162002916600085018262001d85565b5060208201516200292b602085018262001d85565b50505050565b6000604082019050620029486000830184620028fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200298a8262001bf3565b9150620029978362001bf3565b9250828203905081811115620029b257620029b16200294e565b5b92915050565b6000620029c58262001bf3565b9150620029d28362001bf3565b9250828201905080821115620029ed57620029ec6200294e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062002a3b57607f821691505b60208210810362002a515762002a50620029f3565b5b50919050565b600062002a648262001bf3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002a995762002a986200294e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121562002aec5762002aeb62001b84565b5b600062002afc8482850162001bdc565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642061677265656d656e74000000000000000000000000000000600082015250565b600062002b4e60118362002b05565b915062002b5b8262002b16565b602082019050919050565b6000602082019050818103600083015262002b818162002b3f565b9050919050565b7f41677265656d656e74206973206e6f742050454e44494e472000000000000000600082015250565b600062002bc060198362002b05565b915062002bcd8262002b88565b602082019050919050565b6000602082019050818103600083015262002bf38162002bb1565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811262002c295762002c2862002bfa565b5b80840192508235915067ffffffffffffffff82111562002c4e5762002c4d62002bff565b5b60208301925060018202360383131562002c6d5762002c6c62002c04565b5b509250929050565b600081905092915050565b600062002c8e838562002c75565b935062002c9d838584620024c2565b82840190509392505050565b600062002cb882848662002c80565b91508190509392505050565b60008190508160005260206000209050919050565b6000815462002ce88162002a22565b62002cf4818662002c75565b9450600182166000811462002d12576001811462002d285762002d5f565b60ff198316865281151582028601935062002d5f565b62002d338562002cc4565b60005b8381101562002d575781548189015260018201915060208101905062002d36565b838801955050505b50505092915050565b600062002d76828462002cd9565b915081905092915050565b7f5369676e617475726520616c7265616479206761746865726564000000000000600082015250565b600062002db9601a8362002b05565b915062002dc68262002d81565b602082019050919050565b6000602082019050818103600083015262002dec8162002daa565b9050919050565b7f4d69736d617463686564207369676e6572000000000000000000000000000000600082015250565b600062002e2b60118362002b05565b915062002e388262002df3565b602082019050919050565b6000602082019050818103600083015262002e5e8162002e1c565b9050919050565b7f4d697373696e67207369676e617475726520636f6e73747261696e7400000000600082015250565b600062002e9d601c8362002b05565b915062002eaa8262002e65565b602082019050919050565b6000602082019050818103600083015262002ed08162002e8e565b9050919050565b62002ee28162001bae565b82525050565b600062002ef6838562002b05565b935062002f05838584620024c2565b62002f108362001dde565b840190509392505050565b600060408201905062002f32600083018662002ed7565b818103602083015262002f4781848662002ee8565b9050949350505050565b60008151905062002f628162001bfd565b92915050565b60006020828403121562002f815762002f8062001b84565b5b600062002f918482850162002f51565b91505092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262002fe97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262002faa565b62002ff5868362002faa565b95508019841693508086168417925050509392505050565b6000819050919050565b600062003038620030326200302c8462001bf3565b6200300d565b62001bf3565b9050919050565b6000819050919050565b620030548362003017565b6200306c62003063826200303f565b84845462002fb7565b825550505050565b600090565b6200308362003074565b6200309081848462003049565b505050565b5b81811015620030b857620030ac60008262003079565b60018101905062003096565b5050565b601f8211156200310757620030d18162002cc4565b620030dc8462002f9a565b81016020851015620030ec578190505b62003104620030fb8562002f9a565b83018262003095565b50505b505050565b600082821c905092915050565b60006200312c600019846008026200310c565b1980831691505092915050565b600062003147838362003119565b9150826002028217905092915050565b620031628262001d96565b67ffffffffffffffff8111156200317e576200317d620023f9565b5b6200318a825462002a22565b62003197828285620030bc565b600060209050601f831160018114620031cf5760008415620031ba578287015190505b620031c6858262003139565b86555062003236565b601f198416620031df8662002cc4565b60005b828110156200320957848901518255600182019150602085019450602081019050620031e2565b8683101562003229578489015162003225601f89168262003119565b8355505b6001600288020188555050505b505050505050565b60006200324b8262001c2e565b915060ff82036200326157620032606200294e565b5b600182019050919050565b600081546200327b8162002a22565b62003287818662002b05565b94506001821660008114620032a55760018114620032bc57620032f3565b60ff198316865281151560200286019350620032f3565b620032c78562002cc4565b60005b83811015620032eb57815481890152600182019150602081019050620032ca565b808801955050505b50505092915050565b6000620033098262001d96565b62003315818562002b05565b93506200332781856020860162001db2565b620033328162001dde565b840191505092915050565b600060608201905081810360008301526200335981866200326c565b905081810360208301526200336f81856200326c565b90508181036040830152620033858184620032fc565b905094935050505056fe60806040523480156200001157600080fd5b5060405162002b3c38038062002b3c83398181016040528101906200003791906200024e565b828281600090816200004a919062000552565b5080600190816200005c919062000552565b50505032600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060079081620000b1919062000552565b5050505062000639565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012482620000d9565b810181811067ffffffffffffffff82111715620001465762000145620000ea565b5b80604052505050565b60006200015b620000bb565b905062000169828262000119565b919050565b600067ffffffffffffffff8211156200018c576200018b620000ea565b5b6200019782620000d9565b9050602081019050919050565b60005b83811015620001c4578082015181840152602081019050620001a7565b60008484015250505050565b6000620001e7620001e1846200016e565b6200014f565b905082815260208101848484011115620002065762000205620000d4565b5b62000213848285620001a4565b509392505050565b600082601f830112620002335762000232620000cf565b5b815162000245848260208601620001d0565b91505092915050565b6000806000606084860312156200026a5762000269620000c5565b5b600084015167ffffffffffffffff8111156200028b576200028a620000ca565b5b62000299868287016200021b565b935050602084015167ffffffffffffffff811115620002bd57620002bc620000ca565b5b620002cb868287016200021b565b925050604084015167ffffffffffffffff811115620002ef57620002ee620000ca565b5b620002fd868287016200021b565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200035a57607f821691505b60208210810362000370576200036f62000312565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003da7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200039b565b620003e686836200039b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004336200042d6200042784620003fe565b62000408565b620003fe565b9050919050565b6000819050919050565b6200044f8362000412565b620004676200045e826200043a565b848454620003a8565b825550505050565b600090565b6200047e6200046f565b6200048b81848462000444565b505050565b5b81811015620004b357620004a760008262000474565b60018101905062000491565b5050565b601f8211156200050257620004cc8162000376565b620004d7846200038b565b81016020851015620004e7578190505b620004ff620004f6856200038b565b83018262000490565b50505b505050565b600082821c905092915050565b6000620005276000198460080262000507565b1980831691505092915050565b600062000542838362000514565b9150826002028217905092915050565b6200055d8262000307565b67ffffffffffffffff811115620005795762000578620000ea565b5b62000585825462000341565b62000592828285620004b7565b600060209050601f831160018114620005ca5760008415620005b5578287015190505b620005c1858262000534565b86555062000631565b601f198416620005da8662000376565b60005b828110156200060457848901518255600182019150602085019450602081019050620005dd565b8683101562000624578489015162000620601f89168262000514565b8355505b6001600288020188555050505b505050505050565b6124f380620006496000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb465146102d3578063b88d4fde146102ef578063c87b56dd1461030b578063e985e9c51461033b57610100565b806342842e0e146102395780636352211e1461025557806370a082311461028557806395d89b41146102b557610100565b80630883a42e116100d35780630883a42e146101b3578063095ea7b3146101e357806323b872dd146101ff5780632ada0d541461021b57610100565b806301a95bb31461010557806301ffc9a71461013557806306fdde0314610165578063081812fc14610183575b600080fd5b61011f600480360381019061011a91906115db565b61036b565b60405161012c9190611654565b60405180910390f35b61014f600480360381019061014a91906116c7565b6104dd565b60405161015c919061170f565b60405180910390f35b61016d6105bf565b60405161017a91906117ba565b60405180910390f35b61019d60048036038101906101989190611808565b610651565b6040516101aa9190611844565b60405180910390f35b6101cd60048036038101906101c891906115db565b610658565b6040516101da919061170f565b60405180910390f35b6101fd60048036038101906101f8919061185f565b6106fc565b005b6102196004803603810190610214919061189f565b610741565b005b610223610787565b60405161023091906117ba565b60405180910390f35b610253600480360381019061024e919061189f565b610819565b005b61026f600480360381019061026a9190611808565b61085f565b60405161027c9190611844565b60405180910390f35b61029f600480360381019061029a91906118f2565b6108e5565b6040516102ac9190611654565b60405180910390f35b6102bd61099c565b6040516102ca91906117ba565b60405180910390f35b6102ed60048036038101906102e8919061194b565b610a2e565b005b61030960048036038101906103049190611abb565b610a73565b005b61032560048036038101906103209190611808565b610aba565b60405161033291906117ba565b60405180910390f35b61035560048036038101906103509190611b3e565b610c0c565b604051610362919061170f565b60405180910390f35b60003273ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f490611bca565b60405180910390fd5b61044d60065484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c14565b61045984600654610c81565b600654600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516104ab929190611c1a565b908152602001604051809103902081905550600660008154809291906104d090611c62565b9190505590509392505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b857506105b782610c9f565b5b9050919050565b6060600080546105ce90611cd9565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa90611cd9565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b6000919050565b600080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516106aa929190611c1a565b90815260200160405180910390205490508473ffffffffffffffffffffffffffffffffffffffff166106db82610d09565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b600061073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490611d56565b60405180910390fd5b5050565b6000610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990611d56565b60405180910390fd5b505050565b60606007805461079690611cd9565b80601f01602080910402602001604051908101604052809291908181526020018280546107c290611cd9565b801561080f5780601f106107e45761010080835404028352916020019161080f565b820191906000526020600020905b8154815290600101906020018083116107f257829003601f168201915b5050505050905090565b600061085a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085190611d56565b60405180910390fd5b505050565b60008061086b83610d09565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d390611dc2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90611e54565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546109ab90611cd9565b80601f01602080910402602001604051908101604052809291908181526020018280546109d790611cd9565b8015610a245780601f106109f957610100808354040283529160200191610a24565b820191906000526020600020905b815481529060010190602001808311610a0757829003601f168201915b5050505050905090565b6000610a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6690611d56565b60405180910390fd5b5050565b6000610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab90611d56565b60405180910390fd5b50505050565b6060610ac582610d46565b6000600460008481526020019081526020016000208054610ae590611cd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1190611cd9565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b505050505090506000610b6f610d91565b90506000815103610b84578192505050610c07565b600082511115610bb9578082604051602001610ba1929190611ea5565b60405160208183030381529060405292505050610c07565b6000815111610bd75760405180602001604052806000815250610c02565b80610be185610da8565b604051602001610bf2929190611ea5565b6040516020818303038152906040525b925050505b919050565b600092915050565b610c1d82610e76565b610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5390611f3b565b60405180910390fd5b80600460008481526020019081526020016000209081610c7c9190612107565b505050565b610c9b828260405180602001604052806000815250610eb7565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610d4f81610e76565b610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8590611dc2565b60405180910390fd5b50565b606060405180602001604052806000815250905090565b606060006001610db784610f12565b01905060008167ffffffffffffffff811115610dd657610dd5611990565b5b6040519080825280601f01601f191660200182016040528015610e085781602001600182028036833780820191505090505b509050600082602001820190505b600115610e6b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610e5f57610e5e6121d9565b5b04945060008503610e16575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16610e9883610d09565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b610ec18383611065565b610ece6000848484611226565b610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f049061227a565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610f70577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610f6657610f656121d9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610fad576d04ee2d6d415b85acef81000000008381610fa357610fa26121d9565b5b0492506020810190505b662386f26fc100008310610fdc57662386f26fc100008381610fd257610fd16121d9565b5b0492506010810190505b6305f5e1008310611005576305f5e1008381610ffb57610ffa6121d9565b5b0492506008810190505b612710831061102a5761271083816110205761101f6121d9565b5b0492506004810190505b6064831061104d5760648381611043576110426121d9565b5b0492506002810190505b600a831061105c576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb906122e6565b60405180910390fd5b6110dd81610e76565b1561111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111490612352565b60405180910390fd5b61112b6000838360016113ad565b61113481610e76565b15611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b90612352565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112226000838360016114d3565b5050565b60006112478473ffffffffffffffffffffffffffffffffffffffff166114d9565b156113a0578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026112706114fc565b8786866040518563ffffffff1660e01b815260040161129294939291906123c7565b6020604051808303816000875af19250505080156112ce57506040513d601f19601f820116820180604052508101906112cb9190612428565b60015b611350573d80600081146112fe576040519150601f19603f3d011682016040523d82523d6000602084013e611303565b606091505b506000815103611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f9061227a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506113a5565b600190505b949350505050565b60018111156114cd57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146114415780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114399190612455565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146114cc5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114c49190612489565b925050819055505b5b50505050565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061154382611518565b9050919050565b61155381611538565b811461155e57600080fd5b50565b6000813590506115708161154a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261159b5761159a611576565b5b8235905067ffffffffffffffff8111156115b8576115b761157b565b5b6020830191508360018202830111156115d4576115d3611580565b5b9250929050565b6000806000604084860312156115f4576115f361150e565b5b600061160286828701611561565b935050602084013567ffffffffffffffff81111561162357611622611513565b5b61162f86828701611585565b92509250509250925092565b6000819050919050565b61164e8161163b565b82525050565b60006020820190506116696000830184611645565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6116a48161166f565b81146116af57600080fd5b50565b6000813590506116c18161169b565b92915050565b6000602082840312156116dd576116dc61150e565b5b60006116eb848285016116b2565b91505092915050565b60008115159050919050565b611709816116f4565b82525050565b60006020820190506117246000830184611700565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611764578082015181840152602081019050611749565b60008484015250505050565b6000601f19601f8301169050919050565b600061178c8261172a565b6117968185611735565b93506117a6818560208601611746565b6117af81611770565b840191505092915050565b600060208201905081810360008301526117d48184611781565b905092915050565b6117e58161163b565b81146117f057600080fd5b50565b600081359050611802816117dc565b92915050565b60006020828403121561181e5761181d61150e565b5b600061182c848285016117f3565b91505092915050565b61183e81611538565b82525050565b60006020820190506118596000830184611835565b92915050565b600080604083850312156118765761187561150e565b5b600061188485828601611561565b9250506020611895858286016117f3565b9150509250929050565b6000806000606084860312156118b8576118b761150e565b5b60006118c686828701611561565b93505060206118d786828701611561565b92505060406118e8868287016117f3565b9150509250925092565b6000602082840312156119085761190761150e565b5b600061191684828501611561565b91505092915050565b611928816116f4565b811461193357600080fd5b50565b6000813590506119458161191f565b92915050565b600080604083850312156119625761196161150e565b5b600061197085828601611561565b925050602061198185828601611936565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119c882611770565b810181811067ffffffffffffffff821117156119e7576119e6611990565b5b80604052505050565b60006119fa611504565b9050611a0682826119bf565b919050565b600067ffffffffffffffff821115611a2657611a25611990565b5b611a2f82611770565b9050602081019050919050565b82818337600083830152505050565b6000611a5e611a5984611a0b565b6119f0565b905082815260208101848484011115611a7a57611a7961198b565b5b611a85848285611a3c565b509392505050565b600082601f830112611aa257611aa1611576565b5b8135611ab2848260208601611a4b565b91505092915050565b60008060008060808587031215611ad557611ad461150e565b5b6000611ae387828801611561565b9450506020611af487828801611561565b9350506040611b05878288016117f3565b925050606085013567ffffffffffffffff811115611b2657611b25611513565b5b611b3287828801611a8d565b91505092959194509250565b60008060408385031215611b5557611b5461150e565b5b6000611b6385828601611561565b9250506020611b7485828601611561565b9150509250929050565b7f4f6e6c79206f776e65722063616e206d696e74204e4654730000000000000000600082015250565b6000611bb4601883611735565b9150611bbf82611b7e565b602082019050919050565b60006020820190508181036000830152611be381611ba7565b9050919050565b600081905092915050565b6000611c018385611bea565b9350611c0e838584611a3c565b82840190509392505050565b6000611c27828486611bf5565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c6d8261163b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c9f57611c9e611c33565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611cf157607f821691505b602082108103611d0457611d03611caa565b5b50919050565b7f5472616e7366657273206e6f7420616c6c6f7765640000000000000000000000600082015250565b6000611d40601583611735565b9150611d4b82611d0a565b602082019050919050565b60006020820190508181036000830152611d6f81611d33565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dac601883611735565b9150611db782611d76565b602082019050919050565b60006020820190508181036000830152611ddb81611d9f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e3e602983611735565b9150611e4982611de2565b604082019050919050565b60006020820190508181036000830152611e6d81611e31565b9050919050565b6000611e7f8261172a565b611e898185611bea565b9350611e99818560208601611746565b80840191505092915050565b6000611eb18285611e74565b9150611ebd8284611e74565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000611f25602e83611735565b9150611f3082611ec9565b604082019050919050565b60006020820190508181036000830152611f5481611f18565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611fbd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f80565b611fc78683611f80565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612004611fff611ffa8461163b565b611fdf565b61163b565b9050919050565b6000819050919050565b61201e83611fe9565b61203261202a8261200b565b848454611f8d565b825550505050565b600090565b61204761203a565b612052818484612015565b505050565b5b818110156120765761206b60008261203f565b600181019050612058565b5050565b601f8211156120bb5761208c81611f5b565b61209584611f70565b810160208510156120a4578190505b6120b86120b085611f70565b830182612057565b50505b505050565b600082821c905092915050565b60006120de600019846008026120c0565b1980831691505092915050565b60006120f783836120cd565b9150826002028217905092915050565b6121108261172a565b67ffffffffffffffff81111561212957612128611990565b5b6121338254611cd9565b61213e82828561207a565b600060209050601f831160018114612171576000841561215f578287015190505b61216985826120eb565b8655506121d1565b601f19841661217f86611f5b565b60005b828110156121a757848901518255600182019150602085019450602081019050612182565b868310156121c457848901516121c0601f8916826120cd565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612264603283611735565b915061226f82612208565b604082019050919050565b6000602082019050818103600083015261229381612257565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006122d0602083611735565b91506122db8261229a565b602082019050919050565b600060208201905081810360008301526122ff816122c3565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061233c601c83611735565b915061234782612306565b602082019050919050565b6000602082019050818103600083015261236b8161232f565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061239982612372565b6123a3818561237d565b93506123b3818560208601611746565b6123bc81611770565b840191505092915050565b60006080820190506123dc6000830187611835565b6123e96020830186611835565b6123f66040830185611645565b8181036060830152612408818461238e565b905095945050505050565b6000815190506124228161169b565b92915050565b60006020828403121561243e5761243d61150e565b5b600061244c84828501612413565b91505092915050565b60006124608261163b565b915061246b8361163b565b925082820390508181111561248357612482611c33565b5b92915050565b60006124948261163b565b915061249f8361163b565b92508282019050808211156124b7576124b6611c33565b5b9291505056fea2646970667358221220590ea1c216e6675fe07d24cae198263ea6fe278532909f9d8d4689a8f1b6ee3c64736f6c63430008110033a264697066735822122093eb9a3b274fd98c75a413083c80848152a9d92a44ee2e8f9d01be74c125da9c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1803,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "profiles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Profile)1742_storage)"
      },
      {
        "astId": 1810,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "agreements",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)1777_storage))"
      },
      {
        "astId": 1817,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "packets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)1798_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SignatureConstraint)1751_storage)dyn_storage": {
        "base": "t_struct(SignatureConstraint)1751_storage",
        "encoding": "dynamic_array",
        "label": "struct SignatureConstraint[]",
        "numberOfBytes": "32"
      },
      "t_enum(AgreementStatus)1737": {
        "encoding": "inplace",
        "label": "enum AgreementStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)1777_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Agreement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Agreement)1777_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)1798_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SignaturePacket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SignaturePacket)1798_storage)"
      },
      "t_mapping(t_address,t_struct(Profile)1742_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Profile)",
        "numberOfBytes": "32",
        "value": "t_struct(Profile)1742_storage"
      },
      "t_mapping(t_uint256,t_struct(Agreement)1777_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)1777_storage"
      },
      "t_mapping(t_uint256,t_struct(SignaturePacket)1798_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SignaturePacket)",
        "numberOfBytes": "32",
        "value": "t_struct(SignaturePacket)1798_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)1777_storage": {
        "encoding": "inplace",
        "label": "struct Agreement",
        "members": [
          {
            "astId": 1753,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1756,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(AgreementStatus)1737"
          },
          {
            "astId": 1758,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1760,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1762,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "cid",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1764,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1766,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "descriptionCid",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1768,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signedPackets",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1770,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalPackets",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1772,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftContractAddress",
            "offset": 2,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1776,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "constraints",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(SignatureConstraint)1751_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Profile)1742_storage": {
        "encoding": "inplace",
        "label": "struct Profile",
        "members": [
          {
            "astId": 1739,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalAgreements",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1741,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalSignatures",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SignatureConstraint)1751_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConstraint",
        "members": [
          {
            "astId": 1744,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1746,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1748,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalUsed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1750,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "allowedToUse",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SignaturePacket)1798_storage": {
        "encoding": "inplace",
        "label": "struct SignaturePacket",
        "members": [
          {
            "astId": 1779,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1781,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1783,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1785,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1787,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1789,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1791,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftContractAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1793,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1795,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "timestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1797,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "blockNumber",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}