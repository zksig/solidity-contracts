{
  "address": "0x1E7EF1A8F6b6710c6541dBACf36C4b9173712B6A",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "withNFT",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "nftImageCid",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CreateAgreementParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createAgreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getAgreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "signedPackets",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "totalPackets",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAgreements",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSignatures",
              "type": "uint256"
            }
          ],
          "internalType": "struct Profile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getSignatures",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignaturePacket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nftTokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct SignParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "sign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8789168939ca68238a5a5a4488ef77793103bf4b18513e7b58d8421facba09ef",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x1E7EF1A8F6b6710c6541dBACf36C4b9173712B6A",
    "transactionIndex": 0,
    "gasUsed": "230346912",
    "logsBloom": "0x
    "blockHash": "0x3eb9185030ecb7cc7c12ea5e7f22f0d6899e3e95a1aea73d1d3879f14ce34b2a",
    "transactionHash": "0x8789168939ca68238a5a5a4488ef77793103bf4b18513e7b58d8421facba09ef",
    "logs": [],
    "blockNumber": 3486,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f9f52ba60da10c7dd3a6ed41e994d792",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"withNFT\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"nftImageCid\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CreateAgreementParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createAgreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getAgreements\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"signedPackets\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"totalPackets\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAgreements\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSignatures\",\"type\":\"uint256\"}],\"internalType\":\"struct Profile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct SignaturePacket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftTokenURI\",\"type\":\"string\"}],\"internalType\":\"struct SignParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DigitalSignature.sol\":\"DigitalSignature\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AgreementNFT.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport \\\"./utils/ERC721NoEvents.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract AgreementNFT is ERC721NoEvents {\\n  address private _owner;\\n  uint256 private nextTokenId;\\n  string private _imageCID;\\n  mapping(address => mapping(string => uint256)) private _ownerTokens;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory imageCID_\\n  ) ERC721NoEvents(_name, _symbol) {\\n    nextTokenId = 1;\\n    _owner = msg.sender;\\n    _imageCID = imageCID_;\\n  }\\n\\n  function getImageCID() public view returns (string memory) {\\n    return _imageCID;\\n  }\\n\\n  function signatureMint(\\n    address signer,\\n    string calldata tokenURI\\n  ) public returns (uint256) {\\n    require(_owner == msg.sender, \\\"Only owner can mint NFTs\\\");\\n\\n    _mint(signer, nextTokenId);\\n    _setTokenURI(nextTokenId, tokenURI);\\n    _ownerTokens[signer][tokenURI] = nextTokenId;\\n    return nextTokenId++;\\n  }\\n\\n  function verifyByTokenURI(\\n    address signer,\\n    string calldata tokenURI\\n  ) public view returns (bool) {\\n    uint256 tokenId = _ownerTokens[signer][tokenURI];\\n    return _ownerOf(tokenId) == signer;\\n  }\\n}\\n\",\"keccak256\":\"0xf61fc1aef0784dd201b5fb0b755321bee4809b99dd9e81f4643103a2a873f254\"},\"contracts/DigitalSignature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./AgreementNFT.sol\\\";\\n\\nstruct CreateAgreementParams {\\n  string identifier;\\n  string cid;\\n  string encryptedCid;\\n  string descriptionCid;\\n  bool withNFT;\\n  string nftImageCid;\\n  SignatureConstraint[] constraints;\\n}\\n\\nstruct SignParams {\\n  address agreementOwner;\\n  uint256 agreementIndex;\\n  string identifier;\\n  string encryptedCid;\\n  string nftTokenURI;\\n}\\n\\nenum AgreementStatus {\\n  PENDING,\\n  COMPLETE,\\n  APPROVED,\\n  REJECTED\\n}\\n\\nstruct Profile {\\n  uint256 totalAgreements;\\n  uint256 totalSignatures;\\n}\\n\\nstruct SignatureConstraint {\\n  string identifier;\\n  address signer;\\n  uint256 totalUsed;\\n  uint256 allowedToUse;\\n}\\n\\nstruct Agreement {\\n  address owner;\\n  AgreementStatus status;\\n  uint256 index;\\n  string identifier;\\n  string cid;\\n  string encryptedCid;\\n  string descriptionCid;\\n  uint8 signedPackets;\\n  uint8 totalPackets;\\n  address nftContractAddress;\\n  SignatureConstraint[] constraints;\\n}\\n\\nstruct SignaturePacket {\\n  address agreementOwner;\\n  uint256 agreementIndex;\\n  uint256 index;\\n  string identifier;\\n  string encryptedCid;\\n  address signer;\\n  address nftContractAddress;\\n  uint256 nftTokenId;\\n  uint timestamp;\\n  uint blockNumber;\\n}\\n\\ncontract DigitalSignature {\\n  mapping(address => Profile) profiles;\\n  mapping(address => mapping(uint256 => Agreement)) agreements;\\n  mapping(address => mapping(uint256 => SignaturePacket)) packets;\\n\\n  function getProfile() public view returns (Profile memory) {\\n    return profiles[tx.origin];\\n  }\\n\\n  function createAgreement(\\n    CreateAgreementParams memory params\\n  ) public returns (uint256) {\\n    Profile storage profile = profiles[tx.origin];\\n    Agreement storage agreement = agreements[tx.origin][\\n      profile.totalAgreements\\n    ];\\n\\n    agreement.owner = tx.origin;\\n    agreement.status = AgreementStatus.PENDING;\\n    agreement.index = profile.totalAgreements;\\n    agreement.identifier = params.identifier;\\n    agreement.cid = params.cid;\\n    agreement.encryptedCid = params.encryptedCid;\\n    agreement.descriptionCid = params.descriptionCid;\\n    agreement.signedPackets = 0;\\n    agreement.totalPackets = uint8(params.constraints.length);\\n\\n    for (uint i = 0; i < params.constraints.length; i++) {\\n      agreement.constraints.push(params.constraints[i]);\\n    }\\n\\n    if (params.withNFT) {\\n      _deployNFTContract(agreement, params.nftImageCid);\\n    }\\n\\n    return profile.totalAgreements++;\\n  }\\n\\n  function _deployNFTContract(\\n    Agreement storage agreement,\\n    string memory nftImageCid\\n  ) internal returns (address) {\\n    AgreementNFT nftContract = new AgreementNFT(\\n      agreement.identifier,\\n      agreement.identifier,\\n      nftImageCid\\n    );\\n    agreement.nftContractAddress = address(nftContract);\\n\\n    return agreement.nftContractAddress;\\n  }\\n\\n  function sign(SignParams calldata params) public returns (uint256) {\\n    Agreement storage agreement = agreements[params.agreementOwner][\\n      params.agreementIndex\\n    ];\\n    require(agreement.owner == params.agreementOwner, \\\"Invalid agreement\\\");\\n    require(\\n      agreement.status == AgreementStatus.PENDING,\\n      \\\"Agreement is not PENDING \\\"\\n    );\\n\\n    SignatureConstraint storage constraint;\\n    bool found = false;\\n    for (uint i = 0; i < agreement.constraints.length; i++) {\\n      if (\\n        keccak256(abi.encodePacked(agreement.constraints[i].identifier)) ==\\n        keccak256(abi.encodePacked(params.identifier))\\n      ) {\\n        found = true;\\n        constraint = agreement.constraints[i];\\n        require(\\n          constraint.allowedToUse == 0 ||\\n            constraint.totalUsed < constraint.allowedToUse,\\n          \\\"Signature already gathered\\\"\\n        );\\n        require(\\n          constraint.signer == tx.origin || constraint.signer == address(0),\\n          \\\"Mismatched signer\\\"\\n        );\\n        constraint.totalUsed++;\\n        if (constraint.allowedToUse == 1) {\\n          constraint.signer = tx.origin;\\n        }\\n\\n        break;\\n      }\\n    }\\n\\n    require(found, \\\"Missing signature constraint\\\");\\n\\n    Profile storage profile = profiles[tx.origin];\\n\\n    SignaturePacket memory packet = SignaturePacket({\\n      agreementOwner: agreement.owner,\\n      agreementIndex: agreement.index,\\n      index: profile.totalSignatures,\\n      identifier: params.identifier,\\n      encryptedCid: params.encryptedCid,\\n      signer: tx.origin,\\n      nftContractAddress: agreement.nftContractAddress,\\n      nftTokenId: 0,\\n      timestamp: block.timestamp,\\n      blockNumber: block.number\\n    });\\n\\n    if (agreement.nftContractAddress != address(0)) {\\n      AgreementNFT nftContract = AgreementNFT(agreement.nftContractAddress);\\n      packet.nftTokenId = nftContract.signatureMint(\\n        tx.origin,\\n        params.nftTokenURI\\n      );\\n    }\\n\\n    packets[tx.origin][profile.totalSignatures] = packet;\\n\\n    agreement.signedPackets++;\\n    if (agreement.signedPackets == agreement.totalPackets) {\\n      agreement.status = AgreementStatus.COMPLETE;\\n    }\\n\\n    return profile.totalSignatures++;\\n  }\\n\\n  function getAgreements(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (Agreement[] memory) {\\n    Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalAgreements - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    Agreement[] memory ags = new Agreement[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      ags[index++] = agreements[owner][i];\\n    }\\n\\n    return ags;\\n  }\\n\\n  function getSignatures(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (SignaturePacket[] memory) {\\n    Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalSignatures - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    SignaturePacket[] memory sigs = new SignaturePacket[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      sigs[index++] = packets[owner][i];\\n    }\\n\\n    return sigs;\\n  }\\n}\\n\",\"keccak256\":\"0xb82618f83b0f8d3b1c77db6fe2125f8f0cc3157ab2cbea32c1409f45382131f2\",\"license\":\"UNLICENSED\"},\"contracts/utils/ERC721NoEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721NoEvents is Context {\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to owner address\\n  mapping(uint256 => address) private _owners;\\n\\n  // Mapping owner address to token count\\n  mapping(address => uint256) private _balances;\\n\\n  // Optional mapping for token URIs\\n  mapping(uint256 => string) private _tokenURIs;\\n\\n  /**\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(\\n    uint256 tokenId\\n  ) public view virtual returns (string memory) {\\n    _requireMinted(tokenId);\\n\\n    string memory _tokenURI = _tokenURIs[tokenId];\\n    string memory base = _baseURI();\\n\\n    // If there is no base URI, return the token URI.\\n    if (bytes(base).length == 0) {\\n      return _tokenURI;\\n    }\\n    // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n    if (bytes(_tokenURI).length > 0) {\\n      return string(abi.encodePacked(base, _tokenURI));\\n    }\\n\\n    return\\n      bytes(base).length > 0\\n        ? string(abi.encodePacked(base, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _setTokenURI(\\n    uint256 tokenId,\\n    string memory _tokenURI\\n  ) internal virtual {\\n    require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n    _tokenURIs[tokenId] = _tokenURI;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(\\n    address owner\\n  ) public view virtual returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n    return _balances[owner];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(\\n    uint256 tokenId\\n  ) public view virtual returns (address) {\\n    address owner = _ownerOf(tokenId);\\n    require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n    return owner;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overridden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(\\n    uint256 tokenId\\n  ) public view virtual returns (address) {\\n    return address(0);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(\\n    address operator,\\n    bool approved\\n  ) public virtual {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(\\n    address owner,\\n    address operator\\n  ) public view virtual returns (bool) {\\n    return false;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public virtual {\\n    require(false, \\\"Transfers not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n   */\\n  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n    return _owners[tokenId];\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return _ownerOf(tokenId) != address(0);\\n  }\\n\\n  /**\\n   * @dev Mints `tokenId` and transfers it to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - `to` cannot be the zero address.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n    // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    unchecked {\\n      // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n      // Given that tokens are minted one by one, it is impossible in practice that\\n      // this ever happens. Might change if we allow batch minting.\\n      // The ERC fails to describe this case.\\n      _balances[to] += 1;\\n    }\\n\\n    _owners[tokenId] = to;\\n\\n    _afterTokenTransfer(address(0), to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   * This is an internal function that does not check if the sender is authorized to operate on the token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ERC721NoEvents.ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n    // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n    owner = ERC721NoEvents.ownerOf(tokenId);\\n\\n    unchecked {\\n      // Cannot overflow, as that would require more tokens to be burned/transferred\\n      // out than the owner initially received through minting and transferring in.\\n      _balances[owner] -= 1;\\n    }\\n    delete _owners[tokenId];\\n\\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\\n      delete _tokenURIs[tokenId];\\n    }\\n\\n    _afterTokenTransfer(owner, address(0), tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Reverts if the `tokenId` has not been minted yet.\\n   */\\n  function _requireMinted(uint256 tokenId) internal view virtual {\\n    require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n   * - When `from` is zero, the tokens will be minted for `to`.\\n   * - When `to` is zero, ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `batchSize` is non-zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 /* firstTokenId */,\\n    uint256 batchSize\\n  ) internal virtual {\\n    if (batchSize > 1) {\\n      if (from != address(0)) {\\n        _balances[from] -= batchSize;\\n      }\\n      if (to != address(0)) {\\n        _balances[to] += batchSize;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n   * - When `from` is zero, the tokens were minted for `to`.\\n   * - When `to` is zero, ``from``'s tokens were burned.\\n   * - `from` and `to` are never both zero.\\n   * - `batchSize` is non-zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 firstTokenId,\\n    uint256 batchSize\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x513a7d3cb27fbaa7ebce810e49c9f29b1308c1bbe7b1c5ca1de4d66118b62e45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c8063554230f91462000063578063bc9c90561462000099578063be08164e14620000cf578063c07088551462000105578063d6afc9b1146200013b575b600080fd5b6200008160048036038101906200007b919062001c6c565b6200015d565b60405162000090919062002141565b60405180910390f35b620000b76004803603810190620000b1919062001c6c565b6200081c565b604051620000c691906200232a565b60405180910390f35b620000ed6004803603810190620000e7919062002375565b62000c45565b604051620000fc9190620023d7565b60405180910390f35b6200012360048036038101906200011d9190620028ad565b6200160f565b604051620001329190620023d7565b60405180910390f35b62000145620018f7565b60405162000154919062002931565b60405180910390f35b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080858360000151620001d591906200297d565b905060008560ff168211620001eb5781620001f0565b8560ff165b905060008167ffffffffffffffff811115620002115762000210620023f9565b5b6040519080825280602002602001820160405280156200024e57816020015b6200023a62001a1c565b815260200190600190039081620002305790505b50905060008890505b8289620002659190620029b8565b8110156200080c57600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600381111562000347576200034662001d05565b5b60038111156200035c576200035b62001d05565b5b8152602001600182015481526020016002820180546200037c9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620003aa9062002a22565b8015620003fb5780601f10620003cf57610100808354040283529160200191620003fb565b820191906000526020600020905b815481529060010190602001808311620003dd57829003601f168201915b50505050508152602001600382018054620004169062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620004449062002a22565b8015620004955780601f10620004695761010080835404028352916020019162000495565b820191906000526020600020905b8154815290600101906020018083116200047757829003601f168201915b50505050508152602001600482018054620004b09062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620004de9062002a22565b80156200052f5780601f1062000503576101008083540402835291602001916200052f565b820191906000526020600020905b8154815290600101906020018083116200051157829003601f168201915b505050505081526020016005820180546200054a9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620005789062002a22565b8015620005c95780601f106200059d57610100808354040283529160200191620005c9565b820191906000526020600020905b815481529060010190602001808311620005ab57829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff1681526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015620007bf5783829060005260206000209060040201604051806080016040529081600082018054620006bd9062002a22565b80601f0160208091040260200160405190810160405280929190818152602001828054620006eb9062002a22565b80156200073c5780601f1062000710576101008083540402835291602001916200073c565b820191906000526020600020905b8154815290600101906020018083116200071e57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250508152602001906001019062000687565b5050505081525050828680620007d59062002a57565b975081518110620007eb57620007ea62002aa4565b5b60200260200101819052508080620008039062002a57565b91505062000257565b5080955050505050509392505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000808583602001516200089491906200297d565b905060008560ff168211620008aa5781620008af565b8560ff165b905060008167ffffffffffffffff811115620008d057620008cf620023f9565b5b6040519080825280602002602001820160405280156200090d57816020015b620008f962001abd565b815260200190600190039081620008ef5790505b50905060008890505b8289620009249190620029b8565b81101562000c3557600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805462000a049062002a22565b80601f016020809104026020016040519081016040528092919081815260200182805462000a329062002a22565b801562000a835780601f1062000a575761010080835404028352916020019162000a83565b820191906000526020600020905b81548152906001019060200180831162000a6557829003601f168201915b5050505050815260200160048201805462000a9e9062002a22565b80601f016020809104026020016040519081016040528092919081815260200182805462000acc9062002a22565b801562000b1d5780601f1062000af15761010080835404028352916020019162000b1d565b820191906000526020600020905b81548152906001019060200180831162000aff57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820154815260200160098201548152505082868062000bfe9062002a57565b97508151811062000c145762000c1362002aa4565b5b6020026020010181905250808062000c2c9062002a57565b91505062000916565b5080955050505050509392505050565b6000806001600084600001602081019062000c61919062002ad3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084602001358152602001908152602001600020905082600001602081019062000cc7919062002ad3565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000d5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d529062002b66565b60405180910390fd5b6000600381111562000d725762000d7162001d05565b5b8160000160149054906101000a900460ff16600381111562000d995762000d9862001d05565b5b1462000ddc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dd39062002bd8565b60405180910390fd5b6000806000905060005b83600701805490508110156200108d5785806040019062000e08919062002c09565b60405160200162000e1b92919062002ca9565b6040516020818303038152906040528051906020012084600701828154811062000e4a5762000e4962002aa4565b5b906000526020600020906004020160000160405160200162000e6d919062002d68565b604051602081830303815290604052805190602001200362001077576001915083600701818154811062000ea65762000ea562002aa4565b5b9060005260206000209060040201925060008360030154148062000ed1575082600301548360020154105b62000f13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f0a9062002dd1565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148062000fc25750600073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b62001004576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ffb9062002e43565b60405180910390fd5b8260020160008154809291906200101b9062002a57565b919050555060018360030154036200107157328360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6200108d565b8080620010849062002a57565b91505062000de6565b5080620010d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010c89062002eb5565b60405180910390fd5b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040518061014001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866001015481526020018360010154815260200188806040019062001187919062002c09565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001888060600190620011e1919062002c09565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018660060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001428152602001438152509050600073ffffffffffffffffffffffffffffffffffffffff168560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620013ba5760008560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166301a95bb3328a806080019062001349919062002c09565b6040518463ffffffff1660e01b8152600401620013699392919062002f1b565b6020604051808303816000875af115801562001389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013af919062002f68565b8260e0018181525050505b80600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301908162001481919062003157565b50608082015181600401908162001499919062003157565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701556101008201518160080155610120820151816009015590505084600601600081819054906101000a900460ff16809291906200156e906200323e565b91906101000a81548160ff021916908360ff160217905550508460060160019054906101000a900460ff1660ff168560060160009054906101000a900460ff1660ff1603620015e85760018560000160146101000a81548160ff02191690836003811115620015e257620015e162001d05565b5b02179055505b816001016000815480929190620015ff9062002a57565b9190505595505050505050919050565b6000806000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000015481526020019081526020016000209050328160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160000160146101000a81548160ff0219169083600381111562001718576200171762001d05565b5b021790555081600001548160010181905550836000015181600201908162001741919062003157565b50836020015181600301908162001759919062003157565b50836040015181600401908162001771919062003157565b50836060015181600501908162001789919062003157565b5060008160060160006101000a81548160ff021916908360ff1602179055508360c00151518160060160016101000a81548160ff021916908360ff16021790555060005b8460c0015151811015620018b557816007018560c001518281518110620017f957620017f862002aa4565b5b60200260200101519080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908162001841919062003157565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015550508080620018ac9062002a57565b915050620017cd565b50836080015115620018d357620018d1818560a0015162001963565b505b816000016000815480929190620018ea9062002a57565b9190505592505050919050565b6200190162001b52565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905090565b6000808360020184600201846040516200197d9062001b6c565b6200198b939291906200333d565b604051809103906000f080158015620019a8573d6000803e3d6000fd5b509050808460060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505092915050565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600381111562001a5c5762001a5b62001d05565b5b81526020016000815260200160608152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b612598806200339083390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001bbb8262001b8e565b9050919050565b62001bcd8162001bae565b811462001bd957600080fd5b50565b60008135905062001bed8162001bc2565b92915050565b6000819050919050565b62001c088162001bf3565b811462001c1457600080fd5b50565b60008135905062001c288162001bfd565b92915050565b600060ff82169050919050565b62001c468162001c2e565b811462001c5257600080fd5b50565b60008135905062001c668162001c3b565b92915050565b60008060006060848603121562001c885762001c8762001b84565b5b600062001c988682870162001bdc565b935050602062001cab8682870162001c17565b925050604062001cbe8682870162001c55565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001cff8162001bae565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811062001d485762001d4762001d05565b5b50565b600081905062001d5b8262001d34565b919050565b600062001d6d8262001d4b565b9050919050565b62001d7f8162001d60565b82525050565b62001d908162001bf3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001dd257808201518184015260208101905062001db5565b60008484015250505050565b6000601f19601f8301169050919050565b600062001dfc8262001d96565b62001e08818562001da1565b935062001e1a81856020860162001db2565b62001e258162001dde565b840191505092915050565b62001e3b8162001c2e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000608083016000830151848203600086015262001e8c828262001def565b915050602083015162001ea3602086018262001cf4565b50604083015162001eb8604086018262001d85565b50606083015162001ecd606086018262001d85565b508091505092915050565b600062001ee6838362001e6d565b905092915050565b6000602082019050919050565b600062001f088262001e41565b62001f14818562001e4c565b93508360208202850162001f288562001e5d565b8060005b8581101562001f6a578484038952815162001f48858262001ed8565b945062001f558362001eee565b925060208a0199505060018101905062001f2c565b50829750879550505050505092915050565b60006101608301600083015162001f97600086018262001cf4565b50602083015162001fac602086018262001d74565b50604083015162001fc1604086018262001d85565b506060830151848203606086015262001fdb828262001def565b9150506080830151848203608086015262001ff7828262001def565b91505060a083015184820360a086015262002013828262001def565b91505060c083015184820360c08601526200202f828262001def565b91505060e08301516200204660e086018262001e30565b506101008301516200205d61010086018262001e30565b506101208301516200207461012086018262001cf4565b5061014083015184820361014086015262002090828262001efb565b9150508091505092915050565b6000620020ab838362001f7c565b905092915050565b6000602082019050919050565b6000620020cd8262001cc8565b620020d9818562001cd3565b935083602082028501620020ed8562001ce4565b8060005b858110156200212f57848403895281516200210d85826200209d565b94506200211a83620020b3565b925060208a01995050600181019050620020f1565b50829750879550505050505092915050565b600060208201905081810360008301526200215d8184620020c0565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061014083016000830151620021ac600086018262001cf4565b506020830151620021c1602086018262001d85565b506040830151620021d6604086018262001d85565b5060608301518482036060860152620021f0828262001def565b915050608083015184820360808601526200220c828262001def565b91505060a08301516200222360a086018262001cf4565b5060c08301516200223860c086018262001cf4565b5060e08301516200224d60e086018262001d85565b506101008301516200226461010086018262001d85565b506101208301516200227b61012086018262001d85565b508091505092915050565b600062002294838362002191565b905092915050565b6000602082019050919050565b6000620022b68262002165565b620022c2818562002170565b935083602082028501620022d68562002181565b8060005b85811015620023185784840389528151620022f6858262002286565b945062002303836200229c565b925060208a01995050600181019050620022da565b50829750879550505050505092915050565b60006020820190508181036000830152620023468184620022a9565b905092915050565b600080fd5b600060a082840312156200236c576200236b6200234e565b5b81905092915050565b6000602082840312156200238e576200238d62001b84565b5b600082013567ffffffffffffffff811115620023af57620023ae62001b89565b5b620023bd8482850162002353565b91505092915050565b620023d18162001bf3565b82525050565b6000602082019050620023ee6000830184620023c6565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620024338262001dde565b810181811067ffffffffffffffff82111715620024555762002454620023f9565b5b80604052505050565b60006200246a62001b7a565b905062002478828262002428565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115620024aa57620024a9620023f9565b5b620024b58262001dde565b9050602081019050919050565b82818337600083830152505050565b6000620024e8620024e2846200248c565b6200245e565b90508281526020810184848401111562002507576200250662002487565b5b62002514848285620024c2565b509392505050565b600082601f83011262002534576200253362002482565b5b813562002546848260208601620024d1565b91505092915050565b60008115159050919050565b62002566816200254f565b81146200257257600080fd5b50565b60008135905062002586816200255b565b92915050565b600067ffffffffffffffff821115620025aa57620025a9620023f9565b5b602082029050602081019050919050565b600080fd5b600060808284031215620025d957620025d8620023f4565b5b620025e560806200245e565b9050600082013567ffffffffffffffff8111156200260857620026076200247d565b5b62002616848285016200251c565b60008301525060206200262c8482850162001bdc565b6020830152506040620026428482850162001c17565b6040830152506060620026588482850162001c17565b60608301525092915050565b60006200267b62002675846200258c565b6200245e565b90508083825260208201905060208402830185811115620026a157620026a0620025bb565b5b835b81811015620026ef57803567ffffffffffffffff811115620026ca57620026c962002482565b5b808601620026d98982620025c0565b85526020850194505050602081019050620026a3565b5050509392505050565b600082601f83011262002711576200271062002482565b5b81356200272384826020860162002664565b91505092915050565b600060e08284031215620027455762002744620023f4565b5b6200275160e06200245e565b9050600082013567ffffffffffffffff8111156200277457620027736200247d565b5b62002782848285016200251c565b600083015250602082013567ffffffffffffffff811115620027a957620027a86200247d565b5b620027b7848285016200251c565b602083015250604082013567ffffffffffffffff811115620027de57620027dd6200247d565b5b620027ec848285016200251c565b604083015250606082013567ffffffffffffffff8111156200281357620028126200247d565b5b62002821848285016200251c565b6060830152506080620028378482850162002575565b60808301525060a082013567ffffffffffffffff8111156200285e576200285d6200247d565b5b6200286c848285016200251c565b60a08301525060c082013567ffffffffffffffff8111156200289357620028926200247d565b5b620028a184828501620026f9565b60c08301525092915050565b600060208284031215620028c657620028c562001b84565b5b600082013567ffffffffffffffff811115620028e757620028e662001b89565b5b620028f5848285016200272c565b91505092915050565b60408201600082015162002916600085018262001d85565b5060208201516200292b602085018262001d85565b50505050565b6000604082019050620029486000830184620028fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200298a8262001bf3565b9150620029978362001bf3565b9250828203905081811115620029b257620029b16200294e565b5b92915050565b6000620029c58262001bf3565b9150620029d28362001bf3565b9250828201905080821115620029ed57620029ec6200294e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062002a3b57607f821691505b60208210810362002a515762002a50620029f3565b5b50919050565b600062002a648262001bf3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002a995762002a986200294e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121562002aec5762002aeb62001b84565b5b600062002afc8482850162001bdc565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642061677265656d656e74000000000000000000000000000000600082015250565b600062002b4e60118362002b05565b915062002b5b8262002b16565b602082019050919050565b6000602082019050818103600083015262002b818162002b3f565b9050919050565b7f41677265656d656e74206973206e6f742050454e44494e472000000000000000600082015250565b600062002bc060198362002b05565b915062002bcd8262002b88565b602082019050919050565b6000602082019050818103600083015262002bf38162002bb1565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811262002c295762002c2862002bfa565b5b80840192508235915067ffffffffffffffff82111562002c4e5762002c4d62002bff565b5b60208301925060018202360383131562002c6d5762002c6c62002c04565b5b509250929050565b600081905092915050565b600062002c8e838562002c75565b935062002c9d838584620024c2565b82840190509392505050565b600062002cb882848662002c80565b91508190509392505050565b60008190508160005260206000209050919050565b6000815462002ce88162002a22565b62002cf4818662002c75565b9450600182166000811462002d12576001811462002d285762002d5f565b60ff198316865281151582028601935062002d5f565b62002d338562002cc4565b60005b8381101562002d575781548189015260018201915060208101905062002d36565b838801955050505b50505092915050565b600062002d76828462002cd9565b915081905092915050565b7f5369676e617475726520616c7265616479206761746865726564000000000000600082015250565b600062002db9601a8362002b05565b915062002dc68262002d81565b602082019050919050565b6000602082019050818103600083015262002dec8162002daa565b9050919050565b7f4d69736d617463686564207369676e6572000000000000000000000000000000600082015250565b600062002e2b60118362002b05565b915062002e388262002df3565b602082019050919050565b6000602082019050818103600083015262002e5e8162002e1c565b9050919050565b7f4d697373696e67207369676e617475726520636f6e73747261696e7400000000600082015250565b600062002e9d601c8362002b05565b915062002eaa8262002e65565b602082019050919050565b6000602082019050818103600083015262002ed08162002e8e565b9050919050565b62002ee28162001bae565b82525050565b600062002ef6838562002b05565b935062002f05838584620024c2565b62002f108362001dde565b840190509392505050565b600060408201905062002f32600083018662002ed7565b818103602083015262002f4781848662002ee8565b9050949350505050565b60008151905062002f628162001bfd565b92915050565b60006020828403121562002f815762002f8062001b84565b5b600062002f918482850162002f51565b91505092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262002fe97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262002faa565b62002ff5868362002faa565b95508019841693508086168417925050509392505050565b6000819050919050565b600062003038620030326200302c8462001bf3565b6200300d565b62001bf3565b9050919050565b6000819050919050565b620030548362003017565b6200306c62003063826200303f565b84845462002fb7565b825550505050565b600090565b6200308362003074565b6200309081848462003049565b505050565b5b81811015620030b857620030ac60008262003079565b60018101905062003096565b5050565b601f8211156200310757620030d18162002cc4565b620030dc8462002f9a565b81016020851015620030ec578190505b62003104620030fb8562002f9a565b83018262003095565b50505b505050565b600082821c905092915050565b60006200312c600019846008026200310c565b1980831691505092915050565b600062003147838362003119565b9150826002028217905092915050565b620031628262001d96565b67ffffffffffffffff8111156200317e576200317d620023f9565b5b6200318a825462002a22565b62003197828285620030bc565b600060209050601f831160018114620031cf5760008415620031ba578287015190505b620031c6858262003139565b86555062003236565b601f198416620031df8662002cc4565b60005b828110156200320957848901518255600182019150602085019450602081019050620031e2565b8683101562003229578489015162003225601f89168262003119565b8355505b6001600288020188555050505b505050505050565b60006200324b8262001c2e565b915060ff82036200326157620032606200294e565b5b600182019050919050565b600081546200327b8162002a22565b62003287818662002b05565b94506001821660008114620032a55760018114620032bc57620032f3565b60ff198316865281151560200286019350620032f3565b620032c78562002cc4565b60005b83811015620032eb57815481890152600182019150602081019050620032ca565b808801955050505b50505092915050565b6000620033098262001d96565b62003315818562002b05565b93506200332781856020860162001db2565b620033328162001dde565b840191505092915050565b600060608201905081810360008301526200335981866200326c565b905081810360208301526200336f81856200326c565b90508181036040830152620033858184620032fc565b905094935050505056fe60806040523480156200001157600080fd5b506040516200259838038062002598833981810160405281019062000037919062000256565b828281600090816200004a91906200055a565b5080600190816200005c91906200055a565b505050600160068190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060079081620000b991906200055a565b5050505062000641565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012c82620000e1565b810181811067ffffffffffffffff821117156200014e576200014d620000f2565b5b80604052505050565b600062000163620000c3565b905062000171828262000121565b919050565b600067ffffffffffffffff821115620001945762000193620000f2565b5b6200019f82620000e1565b9050602081019050919050565b60005b83811015620001cc578082015181840152602081019050620001af565b60008484015250505050565b6000620001ef620001e98462000176565b62000157565b9050828152602081018484840111156200020e576200020d620000dc565b5b6200021b848285620001ac565b509392505050565b600082601f8301126200023b576200023a620000d7565b5b81516200024d848260208601620001d8565b91505092915050565b600080600060608486031215620002725762000271620000cd565b5b600084015167ffffffffffffffff811115620002935762000292620000d2565b5b620002a18682870162000223565b935050602084015167ffffffffffffffff811115620002c557620002c4620000d2565b5b620002d38682870162000223565b925050604084015167ffffffffffffffff811115620002f757620002f6620000d2565b5b620003058682870162000223565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200036257607f821691505b6020821081036200037857620003776200031a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003e27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003a3565b620003ee8683620003a3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200043b620004356200042f8462000406565b62000410565b62000406565b9050919050565b6000819050919050565b62000457836200041a565b6200046f620004668262000442565b848454620003b0565b825550505050565b600090565b6200048662000477565b620004938184846200044c565b505050565b5b81811015620004bb57620004af6000826200047c565b60018101905062000499565b5050565b601f8211156200050a57620004d4816200037e565b620004df8462000393565b81016020851015620004ef578190505b62000507620004fe8562000393565b83018262000498565b50505b505050565b600082821c905092915050565b60006200052f600019846008026200050f565b1980831691505092915050565b60006200054a83836200051c565b9150826002028217905092915050565b62000565826200030f565b67ffffffffffffffff811115620005815762000580620000f2565b5b6200058d825462000349565b6200059a828285620004bf565b600060209050601f831160018114620005d25760008415620005bd578287015190505b620005c985826200053c565b86555062000639565b601f198416620005e2866200037e565b60005b828110156200060c57848901518255600182019150602085019450602081019050620005e5565b868310156200062c578489015162000628601f8916826200051c565b8355505b6001600288020188555050505b505050505050565b611f4780620006516000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb46514610298578063b88d4fde146102b4578063c87b56dd146102d0578063e985e9c514610300576100f5565b806342842e0e146101fe5780636352211e1461021a57806370a082311461024a57806395d89b411461027a576100f5565b80630883a42e116100d35780630883a42e14610178578063095ea7b3146101a857806323b872dd146101c45780632ada0d54146101e0576100f5565b806301a95bb3146100fa57806306fdde031461012a578063081812fc14610148575b600080fd5b610114600480360381019061010f9190611229565b610330565b60405161012191906112a2565b60405180910390f35b6101326104a2565b60405161013f919061134d565b60405180910390f35b610162600480360381019061015d919061139b565b610534565b60405161016f91906113d7565b60405180910390f35b610192600480360381019061018d9190611229565b61053b565b60405161019f919061140d565b60405180910390f35b6101c260048036038101906101bd9190611428565b6105df565b005b6101de60048036038101906101d99190611468565b610624565b005b6101e861066a565b6040516101f5919061134d565b60405180910390f35b61021860048036038101906102139190611468565b6106fc565b005b610234600480360381019061022f919061139b565b610742565b60405161024191906113d7565b60405180910390f35b610264600480360381019061025f91906114bb565b6107c8565b60405161027191906112a2565b60405180910390f35b61028261087f565b60405161028f919061134d565b60405180910390f35b6102b260048036038101906102ad9190611514565b610911565b005b6102ce60048036038101906102c99190611684565b610956565b005b6102ea60048036038101906102e5919061139b565b61099d565b6040516102f7919061134d565b60405180910390f35b61031a60048036038101906103159190611707565b610aef565b604051610327919061140d565b60405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b990611793565b60405180910390fd5b6103ce84600654610af7565b61041e60065484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610cb8565b600654600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516104709291906117e3565b908152602001604051809103902081905550600660008154809291906104959061182b565b9190505590509392505050565b6060600080546104b1906118a2565b80601f01602080910402602001604051908101604052809291908181526020018280546104dd906118a2565b801561052a5780601f106104ff5761010080835404028352916020019161052a565b820191906000526020600020905b81548152906001019060200180831161050d57829003601f168201915b5050505050905090565b6000919050565b600080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848460405161058d9291906117e3565b90815260200160405180910390205490508473ffffffffffffffffffffffffffffffffffffffff166105be82610d25565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b6000610620576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106179061191f565b60405180910390fd5b5050565b6000610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c9061191f565b60405180910390fd5b505050565b606060078054610679906118a2565b80601f01602080910402602001604051908101604052809291908181526020018280546106a5906118a2565b80156106f25780601f106106c7576101008083540402835291602001916106f2565b820191906000526020600020905b8154815290600101906020018083116106d557829003601f168201915b5050505050905090565b600061073d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107349061191f565b60405180910390fd5b505050565b60008061074e83610d25565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b69061198b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f90611a1d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461088e906118a2565b80601f01602080910402602001604051908101604052809291908181526020018280546108ba906118a2565b80156109075780601f106108dc57610100808354040283529160200191610907565b820191906000526020600020905b8154815290600101906020018083116108ea57829003601f168201915b5050505050905090565b6000610952576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109499061191f565b60405180910390fd5b5050565b6000610997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098e9061191f565b60405180910390fd5b50505050565b60606109a882610d62565b60006004600084815260200190815260200160002080546109c8906118a2565b80601f01602080910402602001604051908101604052809291908181526020018280546109f4906118a2565b8015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b505050505090506000610a52610dad565b90506000815103610a67578192505050610aea565b600082511115610a9c578082604051602001610a84929190611a6e565b60405160208183030381529060405292505050610aea565b6000815111610aba5760405180602001604052806000815250610ae5565b80610ac485610dc4565b604051602001610ad5929190611a6e565b6040516020818303038152906040525b925050505b919050565b600092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5d90611ade565b60405180910390fd5b610b6f81610e92565b15610baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba690611b4a565b60405180910390fd5b610bbd600083836001610ed3565b610bc681610e92565b15610c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfd90611b4a565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610cb4600083836001610ff9565b5050565b610cc182610e92565b610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf790611bdc565b60405180910390fd5b80600460008481526020019081526020016000209081610d209190611da8565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610d6b81610e92565b610daa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da19061198b565b60405180910390fd5b50565b606060405180602001604052806000815250905090565b606060006001610dd384610fff565b01905060008167ffffffffffffffff811115610df257610df1611559565b5b6040519080825280601f01601f191660200182016040528015610e245781602001600182028036833780820191505090505b509050600082602001820190505b600115610e87578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610e7b57610e7a611e7a565b5b04945060008503610e32575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16610eb483610d25565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115610ff357600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610f675780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f5f9190611ea9565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610ff25780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fea9190611edd565b925050819055505b5b50505050565b50505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061105d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161105357611052611e7a565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061109a576d04ee2d6d415b85acef810000000083816110905761108f611e7a565b5b0492506020810190505b662386f26fc1000083106110c957662386f26fc1000083816110bf576110be611e7a565b5b0492506010810190505b6305f5e10083106110f2576305f5e10083816110e8576110e7611e7a565b5b0492506008810190505b612710831061111757612710838161110d5761110c611e7a565b5b0492506004810190505b6064831061113a57606483816111305761112f611e7a565b5b0492506002810190505b600a8310611149576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061119182611166565b9050919050565b6111a181611186565b81146111ac57600080fd5b50565b6000813590506111be81611198565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111e9576111e86111c4565b5b8235905067ffffffffffffffff811115611206576112056111c9565b5b602083019150836001820283011115611222576112216111ce565b5b9250929050565b6000806000604084860312156112425761124161115c565b5b6000611250868287016111af565b935050602084013567ffffffffffffffff81111561127157611270611161565b5b61127d868287016111d3565b92509250509250925092565b6000819050919050565b61129c81611289565b82525050565b60006020820190506112b76000830184611293565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112f75780820151818401526020810190506112dc565b60008484015250505050565b6000601f19601f8301169050919050565b600061131f826112bd565b61132981856112c8565b93506113398185602086016112d9565b61134281611303565b840191505092915050565b600060208201905081810360008301526113678184611314565b905092915050565b61137881611289565b811461138357600080fd5b50565b6000813590506113958161136f565b92915050565b6000602082840312156113b1576113b061115c565b5b60006113bf84828501611386565b91505092915050565b6113d181611186565b82525050565b60006020820190506113ec60008301846113c8565b92915050565b60008115159050919050565b611407816113f2565b82525050565b600060208201905061142260008301846113fe565b92915050565b6000806040838503121561143f5761143e61115c565b5b600061144d858286016111af565b925050602061145e85828601611386565b9150509250929050565b6000806000606084860312156114815761148061115c565b5b600061148f868287016111af565b93505060206114a0868287016111af565b92505060406114b186828701611386565b9150509250925092565b6000602082840312156114d1576114d061115c565b5b60006114df848285016111af565b91505092915050565b6114f1816113f2565b81146114fc57600080fd5b50565b60008135905061150e816114e8565b92915050565b6000806040838503121561152b5761152a61115c565b5b6000611539858286016111af565b925050602061154a858286016114ff565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61159182611303565b810181811067ffffffffffffffff821117156115b0576115af611559565b5b80604052505050565b60006115c3611152565b90506115cf8282611588565b919050565b600067ffffffffffffffff8211156115ef576115ee611559565b5b6115f882611303565b9050602081019050919050565b82818337600083830152505050565b6000611627611622846115d4565b6115b9565b90508281526020810184848401111561164357611642611554565b5b61164e848285611605565b509392505050565b600082601f83011261166b5761166a6111c4565b5b813561167b848260208601611614565b91505092915050565b6000806000806080858703121561169e5761169d61115c565b5b60006116ac878288016111af565b94505060206116bd878288016111af565b93505060406116ce87828801611386565b925050606085013567ffffffffffffffff8111156116ef576116ee611161565b5b6116fb87828801611656565b91505092959194509250565b6000806040838503121561171e5761171d61115c565b5b600061172c858286016111af565b925050602061173d858286016111af565b9150509250929050565b7f4f6e6c79206f776e65722063616e206d696e74204e4654730000000000000000600082015250565b600061177d6018836112c8565b915061178882611747565b602082019050919050565b600060208201905081810360008301526117ac81611770565b9050919050565b600081905092915050565b60006117ca83856117b3565b93506117d7838584611605565b82840190509392505050565b60006117f08284866117be565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061183682611289565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611868576118676117fc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118ba57607f821691505b6020821081036118cd576118cc611873565b5b50919050565b7f5472616e7366657273206e6f7420616c6c6f7765640000000000000000000000600082015250565b60006119096015836112c8565b9150611914826118d3565b602082019050919050565b60006020820190508181036000830152611938816118fc565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006119756018836112c8565b91506119808261193f565b602082019050919050565b600060208201905081810360008301526119a481611968565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611a076029836112c8565b9150611a12826119ab565b604082019050919050565b60006020820190508181036000830152611a36816119fa565b9050919050565b6000611a48826112bd565b611a5281856117b3565b9350611a628185602086016112d9565b80840191505092915050565b6000611a7a8285611a3d565b9150611a868284611a3d565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000611ac86020836112c8565b9150611ad382611a92565b602082019050919050565b60006020820190508181036000830152611af781611abb565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000611b34601c836112c8565b9150611b3f82611afe565b602082019050919050565b60006020820190508181036000830152611b6381611b27565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000611bc6602e836112c8565b9150611bd182611b6a565b604082019050919050565b60006020820190508181036000830152611bf581611bb9565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611c5e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611c21565b611c688683611c21565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611ca5611ca0611c9b84611289565b611c80565b611289565b9050919050565b6000819050919050565b611cbf83611c8a565b611cd3611ccb82611cac565b848454611c2e565b825550505050565b600090565b611ce8611cdb565b611cf3818484611cb6565b505050565b5b81811015611d1757611d0c600082611ce0565b600181019050611cf9565b5050565b601f821115611d5c57611d2d81611bfc565b611d3684611c11565b81016020851015611d45578190505b611d59611d5185611c11565b830182611cf8565b50505b505050565b600082821c905092915050565b6000611d7f60001984600802611d61565b1980831691505092915050565b6000611d988383611d6e565b9150826002028217905092915050565b611db1826112bd565b67ffffffffffffffff811115611dca57611dc9611559565b5b611dd482546118a2565b611ddf828285611d1b565b600060209050601f831160018114611e125760008415611e00578287015190505b611e0a8582611d8c565b865550611e72565b601f198416611e2086611bfc565b60005b82811015611e4857848901518255600182019150602085019450602081019050611e23565b86831015611e655784890151611e61601f891682611d6e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611eb482611289565b9150611ebf83611289565b9250828203905081811115611ed757611ed66117fc565b5b92915050565b6000611ee882611289565b9150611ef383611289565b9250828201905080821115611f0b57611f0a6117fc565b5b9291505056fea2646970667358221220e0991835c38bcdeaa1572304cd389988744506bd14568bab9c534e08433b5dea64736f6c63430008110033a2646970667358221220cc012f3c05c179fa2e694f9bb0cbd057141a8da0042ae057abfe5a8fc4d9baab64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1610,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "profiles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Profile)1549_storage)"
      },
      {
        "astId": 1617,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "agreements",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)1584_storage))"
      },
      {
        "astId": 1624,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "packets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)1605_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SignatureConstraint)1558_storage)dyn_storage": {
        "base": "t_struct(SignatureConstraint)1558_storage",
        "encoding": "dynamic_array",
        "label": "struct SignatureConstraint[]",
        "numberOfBytes": "32"
      },
      "t_enum(AgreementStatus)1544": {
        "encoding": "inplace",
        "label": "enum AgreementStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)1584_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Agreement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Agreement)1584_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)1605_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SignaturePacket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SignaturePacket)1605_storage)"
      },
      "t_mapping(t_address,t_struct(Profile)1549_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Profile)",
        "numberOfBytes": "32",
        "value": "t_struct(Profile)1549_storage"
      },
      "t_mapping(t_uint256,t_struct(Agreement)1584_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)1584_storage"
      },
      "t_mapping(t_uint256,t_struct(SignaturePacket)1605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SignaturePacket)",
        "numberOfBytes": "32",
        "value": "t_struct(SignaturePacket)1605_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)1584_storage": {
        "encoding": "inplace",
        "label": "struct Agreement",
        "members": [
          {
            "astId": 1560,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1563,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(AgreementStatus)1544"
          },
          {
            "astId": 1565,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1567,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1569,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "cid",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1571,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1573,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "descriptionCid",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1575,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signedPackets",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1577,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalPackets",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1579,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftContractAddress",
            "offset": 2,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1583,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "constraints",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(SignatureConstraint)1558_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Profile)1549_storage": {
        "encoding": "inplace",
        "label": "struct Profile",
        "members": [
          {
            "astId": 1546,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalAgreements",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1548,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalSignatures",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SignatureConstraint)1558_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConstraint",
        "members": [
          {
            "astId": 1551,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1553,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1555,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalUsed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1557,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "allowedToUse",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SignaturePacket)1605_storage": {
        "encoding": "inplace",
        "label": "struct SignaturePacket",
        "members": [
          {
            "astId": 1586,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1588,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1590,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1592,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1594,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1596,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1598,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftContractAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1600,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1602,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "timestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1604,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "blockNumber",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}