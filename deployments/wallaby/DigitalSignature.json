{
  "address": "0x0C8a04faB35dc3239AC4e88F26903CF46Bd0bA47",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftFactoryAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "withNFT",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "nftImageCid",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CreateAgreementParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createAgreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getAgreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "signedPackets",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "totalPackets",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAgreements",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSignatures",
              "type": "uint256"
            }
          ],
          "internalType": "struct Profile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getSignatures",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignaturePacket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nftTokenURI",
              "type": "string"
            }
          ],
          "internalType": "struct SignParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "sign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d57ead7e49fadda501f162d3fcdee1366642dd2d97c35c4ae943c6715a68d0c",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x0C8a04faB35dc3239AC4e88F26903CF46Bd0bA47",
    "transactionIndex": 0,
    "gasUsed": "138886636",
    "logsBloom": "0x
    "blockHash": "0x5c81d58f183eaec5ce4ef8e7be302c8ba1eb97251775d3f7d1ae461376117e93",
    "transactionHash": "0x6d57ead7e49fadda501f162d3fcdee1366642dd2d97c35c4ae943c6715a68d0c",
    "logs": [],
    "blockNumber": 15186,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE2a21D2766FA64525CF0f9faA6933fF6fC176550"
  ],
  "numDeployments": 2,
  "solcInputHash": "05fdba798fa7b2f22c49fab7518e8a7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftFactoryAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"withNFT\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"nftImageCid\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CreateAgreementParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createAgreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getAgreements\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"signedPackets\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"totalPackets\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAgreements\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSignatures\",\"type\":\"uint256\"}],\"internalType\":\"struct Profile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct SignaturePacket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftTokenURI\",\"type\":\"string\"}],\"internalType\":\"struct SignParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DigitalSignature.sol\":\"DigitalSignature\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DigitalSignature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./nft/IAgreementNFT.sol\\\";\\nimport \\\"./nft/AgreementNFTFactory.sol\\\";\\n\\nstruct CreateAgreementParams {\\n  string identifier;\\n  string cid;\\n  string encryptedCid;\\n  string descriptionCid;\\n  bool withNFT;\\n  string nftImageCid;\\n  SignatureConstraint[] constraints;\\n}\\n\\nstruct SignParams {\\n  address agreementOwner;\\n  uint256 agreementIndex;\\n  string identifier;\\n  string encryptedCid;\\n  string nftTokenURI;\\n}\\n\\nenum AgreementStatus {\\n  PENDING,\\n  COMPLETE,\\n  APPROVED,\\n  REJECTED\\n}\\n\\nstruct Profile {\\n  uint256 totalAgreements;\\n  uint256 totalSignatures;\\n}\\n\\nstruct SignatureConstraint {\\n  string identifier;\\n  address signer;\\n  uint256 totalUsed;\\n  uint256 allowedToUse;\\n}\\n\\nstruct Agreement {\\n  address owner;\\n  AgreementStatus status;\\n  uint256 index;\\n  string identifier;\\n  string cid;\\n  string encryptedCid;\\n  string descriptionCid;\\n  uint8 signedPackets;\\n  uint8 totalPackets;\\n  address nftContractAddress;\\n  SignatureConstraint[] constraints;\\n}\\n\\nstruct SignaturePacket {\\n  address agreementOwner;\\n  uint256 agreementIndex;\\n  uint256 index;\\n  string identifier;\\n  string encryptedCid;\\n  address signer;\\n  address nftContractAddress;\\n  uint256 nftTokenId;\\n  uint timestamp;\\n  uint blockNumber;\\n}\\n\\ncontract DigitalSignature {\\n  address private _nftFactoryAddress;\\n  mapping(address => Profile) profiles;\\n  mapping(address => mapping(uint256 => Agreement)) agreements;\\n  mapping(address => mapping(uint256 => SignaturePacket)) packets;\\n\\n  constructor(address nftFactoryAddress_) {\\n    _nftFactoryAddress = nftFactoryAddress_;\\n  }\\n\\n  function getProfile() public view returns (Profile memory) {\\n    return profiles[tx.origin];\\n  }\\n\\n  function createAgreement(\\n    CreateAgreementParams memory params\\n  ) public returns (uint256) {\\n    Profile storage profile = profiles[tx.origin];\\n    Agreement storage agreement = agreements[tx.origin][\\n      profile.totalAgreements\\n    ];\\n\\n    agreement.owner = tx.origin;\\n    agreement.status = AgreementStatus.PENDING;\\n    agreement.index = profile.totalAgreements;\\n    agreement.identifier = params.identifier;\\n    agreement.cid = params.cid;\\n    agreement.encryptedCid = params.encryptedCid;\\n    agreement.descriptionCid = params.descriptionCid;\\n    agreement.signedPackets = 0;\\n    agreement.totalPackets = uint8(params.constraints.length);\\n\\n    for (uint i = 0; i < params.constraints.length; i++) {\\n      agreement.constraints.push(params.constraints[i]);\\n    }\\n\\n    if (params.withNFT) {\\n      _deployNFTContract(agreement, params.nftImageCid);\\n    }\\n\\n    return profile.totalAgreements++;\\n  }\\n\\n  function _deployNFTContract(\\n    Agreement storage agreement,\\n    string memory nftImageCid\\n  ) internal returns (address) {\\n    IAgreementNFTFactory factory = IAgreementNFTFactory(_nftFactoryAddress);\\n    address nftContract = factory.deploy(\\n      agreement.identifier,\\n      agreement.identifier,\\n      nftImageCid\\n    );\\n\\n    agreement.nftContractAddress = address(nftContract);\\n    return agreement.nftContractAddress;\\n  }\\n\\n  function sign(SignParams calldata params) public returns (uint256) {\\n    Agreement storage agreement = agreements[params.agreementOwner][\\n      params.agreementIndex\\n    ];\\n    require(agreement.owner == params.agreementOwner, \\\"Invalid agreement\\\");\\n    require(\\n      agreement.status == AgreementStatus.PENDING,\\n      \\\"Agreement is not PENDING\\\"\\n    );\\n\\n    SignatureConstraint storage constraint;\\n    bool found = false;\\n    for (uint i = 0; i < agreement.constraints.length; i++) {\\n      if (\\n        keccak256(abi.encodePacked(agreement.constraints[i].identifier)) ==\\n        keccak256(abi.encodePacked(params.identifier))\\n      ) {\\n        found = true;\\n        constraint = agreement.constraints[i];\\n        require(\\n          constraint.allowedToUse == 0 ||\\n            constraint.totalUsed < constraint.allowedToUse,\\n          \\\"Signature already gathered\\\"\\n        );\\n        require(\\n          constraint.signer == tx.origin || constraint.signer == address(0),\\n          \\\"Mismatched signer\\\"\\n        );\\n        constraint.totalUsed++;\\n        if (constraint.allowedToUse == 1) {\\n          constraint.signer = tx.origin;\\n        }\\n\\n        break;\\n      }\\n    }\\n\\n    require(found, \\\"Missing signature constraint\\\");\\n\\n    Profile storage profile = profiles[tx.origin];\\n\\n    SignaturePacket memory packet = SignaturePacket({\\n      agreementOwner: agreement.owner,\\n      agreementIndex: agreement.index,\\n      index: profile.totalSignatures,\\n      identifier: params.identifier,\\n      encryptedCid: params.encryptedCid,\\n      signer: tx.origin,\\n      nftContractAddress: agreement.nftContractAddress,\\n      nftTokenId: 0,\\n      timestamp: block.timestamp,\\n      blockNumber: block.number\\n    });\\n\\n    if (agreement.nftContractAddress != address(0)) {\\n      IAgreementNFT nftContract = IAgreementNFT(agreement.nftContractAddress);\\n      packet.nftTokenId = nftContract.signatureMint(\\n        tx.origin,\\n        params.nftTokenURI\\n      );\\n    }\\n\\n    packets[tx.origin][profile.totalSignatures] = packet;\\n\\n    agreement.signedPackets++;\\n    if (agreement.signedPackets == agreement.totalPackets) {\\n      agreement.status = AgreementStatus.COMPLETE;\\n    }\\n\\n    return profile.totalSignatures++;\\n  }\\n\\n  function getAgreements(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (Agreement[] memory) {\\n    Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalAgreements - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    Agreement[] memory ags = new Agreement[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      ags[index++] = agreements[owner][i];\\n    }\\n\\n    return ags;\\n  }\\n\\n  function getSignatures(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (SignaturePacket[] memory) {\\n    Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalSignatures - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    SignaturePacket[] memory sigs = new SignaturePacket[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      sigs[index++] = packets[owner][i];\\n    }\\n\\n    return sigs;\\n  }\\n}\\n\",\"keccak256\":\"0x8e9928b9689d43df4568dc2c56712e61842292f4677a4fc87c27697dfd69f630\",\"license\":\"UNLICENSED\"},\"contracts/nft/AgreementNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"./IAgreementNFT.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract AgreementNFT is IAgreementNFT, ERC721URIStorage {\\n  address private _owner;\\n  uint256 private nextTokenId;\\n  string private _imageCID;\\n  mapping(address => mapping(string => uint256)) private _ownerTokens;\\n\\n  constructor(\\n    address owner_,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory imageCID_\\n  ) ERC721(_name, _symbol) {\\n    nextTokenId = 1;\\n    _owner = owner_;\\n    _imageCID = imageCID_;\\n  }\\n\\n  function getImageCID() public view returns (string memory) {\\n    return _imageCID;\\n  }\\n\\n  function signatureMint(\\n    address signer,\\n    string calldata tokenURI\\n  ) public returns (uint256) {\\n    require(_owner == msg.sender, \\\"Only owner can mint NFTs\\\");\\n\\n    _mint(signer, nextTokenId);\\n    _setTokenURI(nextTokenId, tokenURI);\\n    _ownerTokens[signer][tokenURI] = nextTokenId;\\n    return nextTokenId++;\\n  }\\n\\n  function verifyByTokenURI(\\n    address signer,\\n    string calldata tokenURI\\n  ) public view returns (bool) {\\n    uint256 tokenId = _ownerTokens[signer][tokenURI];\\n    return _ownerOf(tokenId) == signer;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 firstTokenId,\\n    uint256 batchSize\\n  ) internal virtual override {\\n    require(from == address(0), \\\"token transfer not allowed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x22949187e3dc999bc5da17bac1bca2e86a1dd26812d0891410fbc6750e50a811\",\"license\":\"MIT\"},\"contracts/nft/AgreementNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IAgreementNFTFactory.sol\\\";\\nimport \\\"./AgreementNFT.sol\\\";\\n\\ncontract AgreementNFTFactory {\\n  function deploy(\\n    string memory name,\\n    string memory symbol,\\n    string memory imageCID\\n  ) public returns (address) {\\n    AgreementNFT nftContract = new AgreementNFT(\\n      msg.sender,\\n      name,\\n      symbol,\\n      imageCID\\n    );\\n    return address(nftContract);\\n  }\\n}\\n\",\"keccak256\":\"0x2cf8ca790bc1989e4d1b0ef660200a622d4da4ed750b7f83cb49f252100d6d3c\",\"license\":\"MIT\"},\"contracts/nft/IAgreementNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAgreementNFT {\\n  function signatureMint(\\n    address signer,\\n    string calldata tokenURI\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc126eeb7f8088480d3b17ed90f8e75ba50fc0c385d07b58b6b7bb8ab9df45388\",\"license\":\"MIT\"},\"contracts/nft/IAgreementNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAgreementNFTFactory {\\n  function deploy(\\n    string memory name,\\n    string memory symbol,\\n    string memory imageCID\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x4add9e6e82f7b08152acf8389296e83a51739dcc497d91861dbe0c459bc87a4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032bc380380620032bc8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b613192806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063554230f91461005c578063bc9c90561461008c578063be08164e146100bc578063c0708855146100ec578063d6afc9b11461011c575b600080fd5b61007660048036038101906100719190611bc6565b61013a565b604051610083919061203f565b60405180910390f35b6100a660048036038101906100a19190611bc6565b6107b4565b6040516100b39190612204565b60405180910390f35b6100d660048036038101906100d1919061224a565b610bb8565b6040516100e391906122a2565b60405180910390f35b6101066004803603810190610101919061270a565b61153b565b60405161011391906122a2565b60405180910390f35b61012461180b565b6040516101319190612782565b60405180910390f35b60606000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000808583600001516101b191906127cc565b905060008560ff1682116101c557816101ca565b8560ff165b905060008167ffffffffffffffff8111156101e8576101e76122c2565b5b60405190808252806020026020018201604052801561022157816020015b61020e611998565b8152602001906001900390816102065790505b50905060008890505b82896102369190612800565b8110156107a457600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600381111561031457610313611c54565b5b600381111561032657610325611c54565b5b81526020016001820154815260200160028201805461034490612863565b80601f016020809104026020016040519081016040528092919081815260200182805461037090612863565b80156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b505050505081526020016003820180546103d690612863565b80601f016020809104026020016040519081016040528092919081815260200182805461040290612863565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b5050505050815260200160048201805461046890612863565b80601f016020809104026020016040519081016040528092919081815260200182805461049490612863565b80156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b505050505081526020016005820180546104fa90612863565b80601f016020809104026020016040519081016040528092919081815260200182805461052690612863565b80156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff1681526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561075f578382906000526020600020906004020160405180608001604052908160008201805461066490612863565b80601f016020809104026020016040519081016040528092919081815260200182805461069090612863565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505081526020019060010190610631565b505050508152505082868061077390612894565b975081518110610786576107856128dc565b5b6020026020010181905250808061079c90612894565b91505061022a565b5080955050505050509392505050565b60606000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008085836020015161082b91906127cc565b905060008560ff16821161083f5781610844565b8560ff165b905060008167ffffffffffffffff811115610862576108616122c2565b5b60405190808252806020026020018201604052801561089b57816020015b610888611a36565b8152602001906001900390816108805790505b50905060008890505b82896108b09190612800565b811015610ba857600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805461098d90612863565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990612863565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b50505050508152602001600482018054610a1f90612863565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4b90612863565b8015610a985780601f10610a6d57610100808354040283529160200191610a98565b820191906000526020600020905b815481529060010190602001808311610a7b57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815260200160088201548152602001600982015481525050828680610b7790612894565b975081518110610b8a57610b896128dc565b5b60200260200101819052508080610ba090612894565b9150506108a4565b5080955050505050509392505050565b60008060026000846000016020810190610bd2919061290b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020013581526020019081526020016000209050826000016020810190610c36919061290b565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90612995565b60405180910390fd5b60006003811115610cdb57610cda611c54565b5b8160000160149054906101000a900460ff166003811115610cff57610cfe611c54565b5b14610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690612a01565b60405180910390fd5b6000806000905060005b8360070180549050811015610fd357858060400190610d689190612a30565b604051602001610d79929190612ac3565b60405160208183030381529060405280519060200120846007018281548110610da557610da46128dc565b5b9060005260206000209060040201600001604051602001610dc69190612b74565b6040516020818303038152906040528051906020012003610fc05760019150836007018181548110610dfb57610dfa6128dc565b5b90600052602060002090600402019250600083600301541480610e25575082600301548360020154105b610e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5b90612bd7565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610f125750600073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610f51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4890612c43565b60405180910390fd5b826002016000815480929190610f6690612894565b91905055506001836003015403610fbb57328360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610fd3565b8080610fcb90612894565b915050610d49565b5080611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b90612caf565b60405180910390fd5b6000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040518061014001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186600101548152602001836001015481526020018880604001906110c99190612a30565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018880606001906111219190612a30565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018660060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001428152602001438152509050600073ffffffffffffffffffffffffffffffffffffffff168560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112f25760008560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166301a95bb3328a80608001906112869190612a30565b6040518463ffffffff1660e01b81526004016112a493929190612d0b565b6020604051808303816000875af11580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190612d52565b8260e0018181525050505b80600360003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816113b79190612f16565b5060808201518160040190816113cd9190612f16565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701556101008201518160080155610120820151816009015590505084600601600081819054906101000a900460ff16809291906114a090612fe8565b91906101000a81548160ff021916908360ff160217905550508460060160019054906101000a900460ff1660ff168560060160009054906101000a900460ff1660ff16036115165760018560000160146101000a81548160ff021916908360038111156115105761150f611c54565b5b02179055505b81600101600081548092919061152b90612894565b9190505595505050505050919050565b600080600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000015481526020019081526020016000209050328160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160000160146101000a81548160ff0219169083600381111561164257611641611c54565b5b02179055508160000154816001018190555083600001518160020190816116699190612f16565b50836020015181600301908161167f9190612f16565b5083604001518160040190816116959190612f16565b5083606001518160050190816116ab9190612f16565b5060008160060160006101000a81548160ff021916908360ff1602179055508360c00151518160060160016101000a81548160ff021916908360ff16021790555060005b8460c00151518110156117ce57816007018560c001518281518110611717576117166128dc565b5b60200260200101519080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161175d9190612f16565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155505080806117c690612894565b9150506116ef565b508360800151156117e9576117e7818560a00151611876565b505b8160000160008154809291906117fe90612894565b9190505592505050919050565b611813611acb565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16631e67c24a8660020187600201876040518463ffffffff1660e01b81526004016118e1939291906130ce565b6020604051808303816000875af1158015611900573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611924919061312f565b9050808560060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250505092915050565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060038111156119d5576119d4611c54565b5b81526020016000815260200160608152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2482611af9565b9050919050565b611b3481611b19565b8114611b3f57600080fd5b50565b600081359050611b5181611b2b565b92915050565b6000819050919050565b611b6a81611b57565b8114611b7557600080fd5b50565b600081359050611b8781611b61565b92915050565b600060ff82169050919050565b611ba381611b8d565b8114611bae57600080fd5b50565b600081359050611bc081611b9a565b92915050565b600080600060608486031215611bdf57611bde611aef565b5b6000611bed86828701611b42565b9350506020611bfe86828701611b78565b9250506040611c0f86828701611bb1565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c4e81611b19565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611c9457611c93611c54565b5b50565b6000819050611ca582611c83565b919050565b6000611cb582611c97565b9050919050565b611cc581611caa565b82525050565b611cd481611b57565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d14578082015181840152602081019050611cf9565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d3c82611cda565b611d468185611ce5565b9350611d56818560208601611cf6565b611d5f81611d20565b840191505092915050565b611d7381611b8d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006080830160008301518482036000860152611dc28282611d31565b9150506020830151611dd76020860182611c45565b506040830151611dea6040860182611ccb565b506060830151611dfd6060860182611ccb565b508091505092915050565b6000611e148383611da5565b905092915050565b6000602082019050919050565b6000611e3482611d79565b611e3e8185611d84565b935083602082028501611e5085611d95565b8060005b85811015611e8c5784840389528151611e6d8582611e08565b9450611e7883611e1c565b925060208a01995050600181019050611e54565b50829750879550505050505092915050565b600061016083016000830151611eb76000860182611c45565b506020830151611eca6020860182611cbc565b506040830151611edd6040860182611ccb565b5060608301518482036060860152611ef58282611d31565b91505060808301518482036080860152611f0f8282611d31565b91505060a083015184820360a0860152611f298282611d31565b91505060c083015184820360c0860152611f438282611d31565b91505060e0830151611f5860e0860182611d6a565b50610100830151611f6d610100860182611d6a565b50610120830151611f82610120860182611c45565b50610140830151848203610140860152611f9c8282611e29565b9150508091505092915050565b6000611fb58383611e9e565b905092915050565b6000602082019050919050565b6000611fd582611c19565b611fdf8185611c24565b935083602082028501611ff185611c35565b8060005b8581101561202d578484038952815161200e8582611fa9565b945061201983611fbd565b925060208a01995050600181019050611ff5565b50829750879550505050505092915050565b600060208201905081810360008301526120598184611fca565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610140830160008301516120a66000860182611c45565b5060208301516120b96020860182611ccb565b5060408301516120cc6040860182611ccb565b50606083015184820360608601526120e48282611d31565b915050608083015184820360808601526120fe8282611d31565b91505060a083015161211360a0860182611c45565b5060c083015161212660c0860182611c45565b5060e083015161213960e0860182611ccb565b5061010083015161214e610100860182611ccb565b50610120830151612163610120860182611ccb565b508091505092915050565b600061217a838361208d565b905092915050565b6000602082019050919050565b600061219a82612061565b6121a4818561206c565b9350836020820285016121b68561207d565b8060005b858110156121f257848403895281516121d3858261216e565b94506121de83612182565b925060208a019950506001810190506121ba565b50829750879550505050505092915050565b6000602082019050818103600083015261221e818461218f565b905092915050565b600080fd5b600060a0828403121561224157612240612226565b5b81905092915050565b6000602082840312156122605761225f611aef565b5b600082013567ffffffffffffffff81111561227e5761227d611af4565b5b61228a8482850161222b565b91505092915050565b61229c81611b57565b82525050565b60006020820190506122b76000830184612293565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122fa82611d20565b810181811067ffffffffffffffff82111715612319576123186122c2565b5b80604052505050565b600061232c611ae5565b905061233882826122f1565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115612367576123666122c2565b5b61237082611d20565b9050602081019050919050565b82818337600083830152505050565b600061239f61239a8461234c565b612322565b9050828152602081018484840111156123bb576123ba612347565b5b6123c684828561237d565b509392505050565b600082601f8301126123e3576123e2612342565b5b81356123f384826020860161238c565b91505092915050565b60008115159050919050565b612411816123fc565b811461241c57600080fd5b50565b60008135905061242e81612408565b92915050565b600067ffffffffffffffff82111561244f5761244e6122c2565b5b602082029050602081019050919050565b600080fd5b60006080828403121561247b5761247a6122bd565b5b6124856080612322565b9050600082013567ffffffffffffffff8111156124a5576124a461233d565b5b6124b1848285016123ce565b60008301525060206124c584828501611b42565b60208301525060406124d984828501611b78565b60408301525060606124ed84828501611b78565b60608301525092915050565b600061250c61250784612434565b612322565b9050808382526020820190506020840283018581111561252f5761252e612460565b5b835b8181101561257657803567ffffffffffffffff81111561255457612553612342565b5b8086016125618982612465565b85526020850194505050602081019050612531565b5050509392505050565b600082601f83011261259557612594612342565b5b81356125a58482602086016124f9565b91505092915050565b600060e082840312156125c4576125c36122bd565b5b6125ce60e0612322565b9050600082013567ffffffffffffffff8111156125ee576125ed61233d565b5b6125fa848285016123ce565b600083015250602082013567ffffffffffffffff81111561261e5761261d61233d565b5b61262a848285016123ce565b602083015250604082013567ffffffffffffffff81111561264e5761264d61233d565b5b61265a848285016123ce565b604083015250606082013567ffffffffffffffff81111561267e5761267d61233d565b5b61268a848285016123ce565b606083015250608061269e8482850161241f565b60808301525060a082013567ffffffffffffffff8111156126c2576126c161233d565b5b6126ce848285016123ce565b60a08301525060c082013567ffffffffffffffff8111156126f2576126f161233d565b5b6126fe84828501612580565b60c08301525092915050565b6000602082840312156127205761271f611aef565b5b600082013567ffffffffffffffff81111561273e5761273d611af4565b5b61274a848285016125ae565b91505092915050565b6040820160008201516127696000850182611ccb565b50602082015161277c6020850182611ccb565b50505050565b60006040820190506127976000830184612753565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d782611b57565b91506127e283611b57565b92508282039050818111156127fa576127f961279d565b5b92915050565b600061280b82611b57565b915061281683611b57565b925082820190508082111561282e5761282d61279d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061287b57607f821691505b60208210810361288e5761288d612834565b5b50919050565b600061289f82611b57565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128d1576128d061279d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561292157612920611aef565b5b600061292f84828501611b42565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642061677265656d656e74000000000000000000000000000000600082015250565b600061297f601183612938565b915061298a82612949565b602082019050919050565b600060208201905081810360008301526129ae81612972565b9050919050565b7f41677265656d656e74206973206e6f742050454e44494e470000000000000000600082015250565b60006129eb601883612938565b91506129f6826129b5565b602082019050919050565b60006020820190508181036000830152612a1a816129de565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612a4d57612a4c612a21565b5b80840192508235915067ffffffffffffffff821115612a6f57612a6e612a26565b5b602083019250600182023603831315612a8b57612a8a612a2b565b5b509250929050565b600081905092915050565b6000612aaa8385612a93565b9350612ab783858461237d565b82840190509392505050565b6000612ad0828486612a9e565b91508190509392505050565b60008190508160005260206000209050919050565b60008154612afe81612863565b612b088186612a93565b94506001821660008114612b235760018114612b3857612b6b565b60ff1983168652811515820286019350612b6b565b612b4185612adc565b60005b83811015612b6357815481890152600182019150602081019050612b44565b838801955050505b50505092915050565b6000612b808284612af1565b915081905092915050565b7f5369676e617475726520616c7265616479206761746865726564000000000000600082015250565b6000612bc1601a83612938565b9150612bcc82612b8b565b602082019050919050565b60006020820190508181036000830152612bf081612bb4565b9050919050565b7f4d69736d617463686564207369676e6572000000000000000000000000000000600082015250565b6000612c2d601183612938565b9150612c3882612bf7565b602082019050919050565b60006020820190508181036000830152612c5c81612c20565b9050919050565b7f4d697373696e67207369676e617475726520636f6e73747261696e7400000000600082015250565b6000612c99601c83612938565b9150612ca482612c63565b602082019050919050565b60006020820190508181036000830152612cc881612c8c565b9050919050565b612cd881611b19565b82525050565b6000612cea8385612938565b9350612cf783858461237d565b612d0083611d20565b840190509392505050565b6000604082019050612d206000830186612ccf565b8181036020830152612d33818486612cde565b9050949350505050565b600081519050612d4c81611b61565b92915050565b600060208284031215612d6857612d67611aef565b5b6000612d7684828501612d3d565b91505092915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612dcc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d8f565b612dd68683612d8f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612e13612e0e612e0984611b57565b612dee565b611b57565b9050919050565b6000819050919050565b612e2d83612df8565b612e41612e3982612e1a565b848454612d9c565b825550505050565b600090565b612e56612e49565b612e61818484612e24565b505050565b5b81811015612e8557612e7a600082612e4e565b600181019050612e67565b5050565b601f821115612eca57612e9b81612adc565b612ea484612d7f565b81016020851015612eb3578190505b612ec7612ebf85612d7f565b830182612e66565b50505b505050565b600082821c905092915050565b6000612eed60001984600802612ecf565b1980831691505092915050565b6000612f068383612edc565b9150826002028217905092915050565b612f1f82611cda565b67ffffffffffffffff811115612f3857612f376122c2565b5b612f428254612863565b612f4d828285612e89565b600060209050601f831160018114612f805760008415612f6e578287015190505b612f788582612efa565b865550612fe0565b601f198416612f8e86612adc565b60005b82811015612fb657848901518255600182019150602085019450602081019050612f91565b86831015612fd35784890151612fcf601f891682612edc565b8355505b6001600288020188555050505b505050505050565b6000612ff382611b8d565b915060ff82036130065761300561279d565b5b600182019050919050565b6000815461301e81612863565b6130288186612938565b9450600182166000811461304357600181146130595761308c565b60ff19831686528115156020028601935061308c565b61306285612adc565b60005b8381101561308457815481890152600182019150602081019050613065565b808801955050505b50505092915050565b60006130a082611cda565b6130aa8185612938565b93506130ba818560208601611cf6565b6130c381611d20565b840191505092915050565b600060608201905081810360008301526130e88186613011565b905081810360208301526130fc8185613011565b905081810360408301526131108184613095565b9050949350505050565b60008151905061312981611b2b565b92915050565b60006020828403121561314557613144611aef565b5b60006131538482850161311a565b9150509291505056fea26469706673582212205fb7d531bd3a021dc292425d800b307b756bc81a5715a716065f8d16a8cbb94464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063554230f91461005c578063bc9c90561461008c578063be08164e146100bc578063c0708855146100ec578063d6afc9b11461011c575b600080fd5b61007660048036038101906100719190611bc6565b61013a565b604051610083919061203f565b60405180910390f35b6100a660048036038101906100a19190611bc6565b6107b4565b6040516100b39190612204565b60405180910390f35b6100d660048036038101906100d1919061224a565b610bb8565b6040516100e391906122a2565b60405180910390f35b6101066004803603810190610101919061270a565b61153b565b60405161011391906122a2565b60405180910390f35b61012461180b565b6040516101319190612782565b60405180910390f35b60606000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000808583600001516101b191906127cc565b905060008560ff1682116101c557816101ca565b8560ff165b905060008167ffffffffffffffff8111156101e8576101e76122c2565b5b60405190808252806020026020018201604052801561022157816020015b61020e611998565b8152602001906001900390816102065790505b50905060008890505b82896102369190612800565b8110156107a457600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600381111561031457610313611c54565b5b600381111561032657610325611c54565b5b81526020016001820154815260200160028201805461034490612863565b80601f016020809104026020016040519081016040528092919081815260200182805461037090612863565b80156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b505050505081526020016003820180546103d690612863565b80601f016020809104026020016040519081016040528092919081815260200182805461040290612863565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b5050505050815260200160048201805461046890612863565b80601f016020809104026020016040519081016040528092919081815260200182805461049490612863565b80156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b505050505081526020016005820180546104fa90612863565b80601f016020809104026020016040519081016040528092919081815260200182805461052690612863565b80156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff1681526020016006820160019054906101000a900460ff1660ff1660ff1681526020016006820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561075f578382906000526020600020906004020160405180608001604052908160008201805461066490612863565b80601f016020809104026020016040519081016040528092919081815260200182805461069090612863565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505081526020019060010190610631565b505050508152505082868061077390612894565b975081518110610786576107856128dc565b5b6020026020010181905250808061079c90612894565b91505061022a565b5080955050505050509392505050565b60606000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008085836020015161082b91906127cc565b905060008560ff16821161083f5781610844565b8560ff165b905060008167ffffffffffffffff811115610862576108616122c2565b5b60405190808252806020026020018201604052801561089b57816020015b610888611a36565b8152602001906001900390816108805790505b50905060008890505b82896108b09190612800565b811015610ba857600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805461098d90612863565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990612863565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b50505050508152602001600482018054610a1f90612863565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4b90612863565b8015610a985780601f10610a6d57610100808354040283529160200191610a98565b820191906000526020600020905b815481529060010190602001808311610a7b57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820154815260200160088201548152602001600982015481525050828680610b7790612894565b975081518110610b8a57610b896128dc565b5b60200260200101819052508080610ba090612894565b9150506108a4565b5080955050505050509392505050565b60008060026000846000016020810190610bd2919061290b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020013581526020019081526020016000209050826000016020810190610c36919061290b565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90612995565b60405180910390fd5b60006003811115610cdb57610cda611c54565b5b8160000160149054906101000a900460ff166003811115610cff57610cfe611c54565b5b14610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690612a01565b60405180910390fd5b6000806000905060005b8360070180549050811015610fd357858060400190610d689190612a30565b604051602001610d79929190612ac3565b60405160208183030381529060405280519060200120846007018281548110610da557610da46128dc565b5b9060005260206000209060040201600001604051602001610dc69190612b74565b6040516020818303038152906040528051906020012003610fc05760019150836007018181548110610dfb57610dfa6128dc565b5b90600052602060002090600402019250600083600301541480610e25575082600301548360020154105b610e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5b90612bd7565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610f125750600073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610f51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4890612c43565b60405180910390fd5b826002016000815480929190610f6690612894565b91905055506001836003015403610fbb57328360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610fd3565b8080610fcb90612894565b915050610d49565b5080611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b90612caf565b60405180910390fd5b6000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040518061014001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186600101548152602001836001015481526020018880604001906110c99190612a30565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018880606001906111219190612a30565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018660060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001428152602001438152509050600073ffffffffffffffffffffffffffffffffffffffff168560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112f25760008560060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166301a95bb3328a80608001906112869190612a30565b6040518463ffffffff1660e01b81526004016112a493929190612d0b565b6020604051808303816000875af11580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190612d52565b8260e0018181525050505b80600360003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816113b79190612f16565b5060808201518160040190816113cd9190612f16565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701556101008201518160080155610120820151816009015590505084600601600081819054906101000a900460ff16809291906114a090612fe8565b91906101000a81548160ff021916908360ff160217905550508460060160019054906101000a900460ff1660ff168560060160009054906101000a900460ff1660ff16036115165760018560000160146101000a81548160ff021916908360038111156115105761150f611c54565b5b02179055505b81600101600081548092919061152b90612894565b9190505595505050505050919050565b600080600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000015481526020019081526020016000209050328160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160000160146101000a81548160ff0219169083600381111561164257611641611c54565b5b02179055508160000154816001018190555083600001518160020190816116699190612f16565b50836020015181600301908161167f9190612f16565b5083604001518160040190816116959190612f16565b5083606001518160050190816116ab9190612f16565b5060008160060160006101000a81548160ff021916908360ff1602179055508360c00151518160060160016101000a81548160ff021916908360ff16021790555060005b8460c00151518110156117ce57816007018560c001518281518110611717576117166128dc565b5b60200260200101519080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161175d9190612f16565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155505080806117c690612894565b9150506116ef565b508360800151156117e9576117e7818560a00151611876565b505b8160000160008154809291906117fe90612894565b9190505592505050919050565b611813611acb565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16631e67c24a8660020187600201876040518463ffffffff1660e01b81526004016118e1939291906130ce565b6020604051808303816000875af1158015611900573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611924919061312f565b9050808560060160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460060160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250505092915050565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060038111156119d5576119d4611c54565b5b81526020016000815260200160608152602001606081526020016060815260200160608152602001600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b2482611af9565b9050919050565b611b3481611b19565b8114611b3f57600080fd5b50565b600081359050611b5181611b2b565b92915050565b6000819050919050565b611b6a81611b57565b8114611b7557600080fd5b50565b600081359050611b8781611b61565b92915050565b600060ff82169050919050565b611ba381611b8d565b8114611bae57600080fd5b50565b600081359050611bc081611b9a565b92915050565b600080600060608486031215611bdf57611bde611aef565b5b6000611bed86828701611b42565b9350506020611bfe86828701611b78565b9250506040611c0f86828701611bb1565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c4e81611b19565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611c9457611c93611c54565b5b50565b6000819050611ca582611c83565b919050565b6000611cb582611c97565b9050919050565b611cc581611caa565b82525050565b611cd481611b57565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d14578082015181840152602081019050611cf9565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d3c82611cda565b611d468185611ce5565b9350611d56818560208601611cf6565b611d5f81611d20565b840191505092915050565b611d7381611b8d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006080830160008301518482036000860152611dc28282611d31565b9150506020830151611dd76020860182611c45565b506040830151611dea6040860182611ccb565b506060830151611dfd6060860182611ccb565b508091505092915050565b6000611e148383611da5565b905092915050565b6000602082019050919050565b6000611e3482611d79565b611e3e8185611d84565b935083602082028501611e5085611d95565b8060005b85811015611e8c5784840389528151611e6d8582611e08565b9450611e7883611e1c565b925060208a01995050600181019050611e54565b50829750879550505050505092915050565b600061016083016000830151611eb76000860182611c45565b506020830151611eca6020860182611cbc565b506040830151611edd6040860182611ccb565b5060608301518482036060860152611ef58282611d31565b91505060808301518482036080860152611f0f8282611d31565b91505060a083015184820360a0860152611f298282611d31565b91505060c083015184820360c0860152611f438282611d31565b91505060e0830151611f5860e0860182611d6a565b50610100830151611f6d610100860182611d6a565b50610120830151611f82610120860182611c45565b50610140830151848203610140860152611f9c8282611e29565b9150508091505092915050565b6000611fb58383611e9e565b905092915050565b6000602082019050919050565b6000611fd582611c19565b611fdf8185611c24565b935083602082028501611ff185611c35565b8060005b8581101561202d578484038952815161200e8582611fa9565b945061201983611fbd565b925060208a01995050600181019050611ff5565b50829750879550505050505092915050565b600060208201905081810360008301526120598184611fca565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000610140830160008301516120a66000860182611c45565b5060208301516120b96020860182611ccb565b5060408301516120cc6040860182611ccb565b50606083015184820360608601526120e48282611d31565b915050608083015184820360808601526120fe8282611d31565b91505060a083015161211360a0860182611c45565b5060c083015161212660c0860182611c45565b5060e083015161213960e0860182611ccb565b5061010083015161214e610100860182611ccb565b50610120830151612163610120860182611ccb565b508091505092915050565b600061217a838361208d565b905092915050565b6000602082019050919050565b600061219a82612061565b6121a4818561206c565b9350836020820285016121b68561207d565b8060005b858110156121f257848403895281516121d3858261216e565b94506121de83612182565b925060208a019950506001810190506121ba565b50829750879550505050505092915050565b6000602082019050818103600083015261221e818461218f565b905092915050565b600080fd5b600060a0828403121561224157612240612226565b5b81905092915050565b6000602082840312156122605761225f611aef565b5b600082013567ffffffffffffffff81111561227e5761227d611af4565b5b61228a8482850161222b565b91505092915050565b61229c81611b57565b82525050565b60006020820190506122b76000830184612293565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122fa82611d20565b810181811067ffffffffffffffff82111715612319576123186122c2565b5b80604052505050565b600061232c611ae5565b905061233882826122f1565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115612367576123666122c2565b5b61237082611d20565b9050602081019050919050565b82818337600083830152505050565b600061239f61239a8461234c565b612322565b9050828152602081018484840111156123bb576123ba612347565b5b6123c684828561237d565b509392505050565b600082601f8301126123e3576123e2612342565b5b81356123f384826020860161238c565b91505092915050565b60008115159050919050565b612411816123fc565b811461241c57600080fd5b50565b60008135905061242e81612408565b92915050565b600067ffffffffffffffff82111561244f5761244e6122c2565b5b602082029050602081019050919050565b600080fd5b60006080828403121561247b5761247a6122bd565b5b6124856080612322565b9050600082013567ffffffffffffffff8111156124a5576124a461233d565b5b6124b1848285016123ce565b60008301525060206124c584828501611b42565b60208301525060406124d984828501611b78565b60408301525060606124ed84828501611b78565b60608301525092915050565b600061250c61250784612434565b612322565b9050808382526020820190506020840283018581111561252f5761252e612460565b5b835b8181101561257657803567ffffffffffffffff81111561255457612553612342565b5b8086016125618982612465565b85526020850194505050602081019050612531565b5050509392505050565b600082601f83011261259557612594612342565b5b81356125a58482602086016124f9565b91505092915050565b600060e082840312156125c4576125c36122bd565b5b6125ce60e0612322565b9050600082013567ffffffffffffffff8111156125ee576125ed61233d565b5b6125fa848285016123ce565b600083015250602082013567ffffffffffffffff81111561261e5761261d61233d565b5b61262a848285016123ce565b602083015250604082013567ffffffffffffffff81111561264e5761264d61233d565b5b61265a848285016123ce565b604083015250606082013567ffffffffffffffff81111561267e5761267d61233d565b5b61268a848285016123ce565b606083015250608061269e8482850161241f565b60808301525060a082013567ffffffffffffffff8111156126c2576126c161233d565b5b6126ce848285016123ce565b60a08301525060c082013567ffffffffffffffff8111156126f2576126f161233d565b5b6126fe84828501612580565b60c08301525092915050565b6000602082840312156127205761271f611aef565b5b600082013567ffffffffffffffff81111561273e5761273d611af4565b5b61274a848285016125ae565b91505092915050565b6040820160008201516127696000850182611ccb565b50602082015161277c6020850182611ccb565b50505050565b60006040820190506127976000830184612753565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d782611b57565b91506127e283611b57565b92508282039050818111156127fa576127f961279d565b5b92915050565b600061280b82611b57565b915061281683611b57565b925082820190508082111561282e5761282d61279d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061287b57607f821691505b60208210810361288e5761288d612834565b5b50919050565b600061289f82611b57565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128d1576128d061279d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561292157612920611aef565b5b600061292f84828501611b42565b91505092915050565b600082825260208201905092915050565b7f496e76616c69642061677265656d656e74000000000000000000000000000000600082015250565b600061297f601183612938565b915061298a82612949565b602082019050919050565b600060208201905081810360008301526129ae81612972565b9050919050565b7f41677265656d656e74206973206e6f742050454e44494e470000000000000000600082015250565b60006129eb601883612938565b91506129f6826129b5565b602082019050919050565b60006020820190508181036000830152612a1a816129de565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612a4d57612a4c612a21565b5b80840192508235915067ffffffffffffffff821115612a6f57612a6e612a26565b5b602083019250600182023603831315612a8b57612a8a612a2b565b5b509250929050565b600081905092915050565b6000612aaa8385612a93565b9350612ab783858461237d565b82840190509392505050565b6000612ad0828486612a9e565b91508190509392505050565b60008190508160005260206000209050919050565b60008154612afe81612863565b612b088186612a93565b94506001821660008114612b235760018114612b3857612b6b565b60ff1983168652811515820286019350612b6b565b612b4185612adc565b60005b83811015612b6357815481890152600182019150602081019050612b44565b838801955050505b50505092915050565b6000612b808284612af1565b915081905092915050565b7f5369676e617475726520616c7265616479206761746865726564000000000000600082015250565b6000612bc1601a83612938565b9150612bcc82612b8b565b602082019050919050565b60006020820190508181036000830152612bf081612bb4565b9050919050565b7f4d69736d617463686564207369676e6572000000000000000000000000000000600082015250565b6000612c2d601183612938565b9150612c3882612bf7565b602082019050919050565b60006020820190508181036000830152612c5c81612c20565b9050919050565b7f4d697373696e67207369676e617475726520636f6e73747261696e7400000000600082015250565b6000612c99601c83612938565b9150612ca482612c63565b602082019050919050565b60006020820190508181036000830152612cc881612c8c565b9050919050565b612cd881611b19565b82525050565b6000612cea8385612938565b9350612cf783858461237d565b612d0083611d20565b840190509392505050565b6000604082019050612d206000830186612ccf565b8181036020830152612d33818486612cde565b9050949350505050565b600081519050612d4c81611b61565b92915050565b600060208284031215612d6857612d67611aef565b5b6000612d7684828501612d3d565b91505092915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612dcc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d8f565b612dd68683612d8f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612e13612e0e612e0984611b57565b612dee565b611b57565b9050919050565b6000819050919050565b612e2d83612df8565b612e41612e3982612e1a565b848454612d9c565b825550505050565b600090565b612e56612e49565b612e61818484612e24565b505050565b5b81811015612e8557612e7a600082612e4e565b600181019050612e67565b5050565b601f821115612eca57612e9b81612adc565b612ea484612d7f565b81016020851015612eb3578190505b612ec7612ebf85612d7f565b830182612e66565b50505b505050565b600082821c905092915050565b6000612eed60001984600802612ecf565b1980831691505092915050565b6000612f068383612edc565b9150826002028217905092915050565b612f1f82611cda565b67ffffffffffffffff811115612f3857612f376122c2565b5b612f428254612863565b612f4d828285612e89565b600060209050601f831160018114612f805760008415612f6e578287015190505b612f788582612efa565b865550612fe0565b601f198416612f8e86612adc565b60005b82811015612fb657848901518255600182019150602085019450602081019050612f91565b86831015612fd35784890151612fcf601f891682612edc565b8355505b6001600288020188555050505b505050505050565b6000612ff382611b8d565b915060ff82036130065761300561279d565b5b600182019050919050565b6000815461301e81612863565b6130288186612938565b9450600182166000811461304357600181146130595761308c565b60ff19831686528115156020028601935061308c565b61306285612adc565b60005b8381101561308457815481890152600182019150602081019050613065565b808801955050505b50505092915050565b60006130a082611cda565b6130aa8185612938565b93506130ba818560208601611cf6565b6130c381611d20565b840191505092915050565b600060608201905081810360008301526130e88186613011565b905081810360208301526130fc8185613011565b905081810360408301526131108184613095565b9050949350505050565b60008151905061312981611b2b565b92915050565b60006020828403121561314557613144611aef565b5b60006131538482850161311a565b9150509291505056fea26469706673582212205fb7d531bd3a021dc292425d800b307b756bc81a5715a716065f8d16a8cbb94464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2758,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "_nftFactoryAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2763,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "profiles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Profile)2700_storage)"
      },
      {
        "astId": 2770,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "agreements",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)2735_storage))"
      },
      {
        "astId": 2777,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "packets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)2756_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SignatureConstraint)2709_storage)dyn_storage": {
        "base": "t_struct(SignatureConstraint)2709_storage",
        "encoding": "dynamic_array",
        "label": "struct SignatureConstraint[]",
        "numberOfBytes": "32"
      },
      "t_enum(AgreementStatus)2695": {
        "encoding": "inplace",
        "label": "enum AgreementStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)2735_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Agreement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Agreement)2735_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)2756_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SignaturePacket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SignaturePacket)2756_storage)"
      },
      "t_mapping(t_address,t_struct(Profile)2700_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Profile)",
        "numberOfBytes": "32",
        "value": "t_struct(Profile)2700_storage"
      },
      "t_mapping(t_uint256,t_struct(Agreement)2735_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)2735_storage"
      },
      "t_mapping(t_uint256,t_struct(SignaturePacket)2756_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SignaturePacket)",
        "numberOfBytes": "32",
        "value": "t_struct(SignaturePacket)2756_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)2735_storage": {
        "encoding": "inplace",
        "label": "struct Agreement",
        "members": [
          {
            "astId": 2711,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2714,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(AgreementStatus)2695"
          },
          {
            "astId": 2716,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2718,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2720,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "cid",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2722,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2724,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "descriptionCid",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2726,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signedPackets",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2728,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalPackets",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2730,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftContractAddress",
            "offset": 2,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2734,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "constraints",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(SignatureConstraint)2709_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Profile)2700_storage": {
        "encoding": "inplace",
        "label": "struct Profile",
        "members": [
          {
            "astId": 2697,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalAgreements",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2699,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalSignatures",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SignatureConstraint)2709_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConstraint",
        "members": [
          {
            "astId": 2702,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2704,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2706,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalUsed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2708,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "allowedToUse",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SignaturePacket)2756_storage": {
        "encoding": "inplace",
        "label": "struct SignaturePacket",
        "members": [
          {
            "astId": 2737,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2739,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2741,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2743,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2745,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2747,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 2749,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftContractAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2751,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2753,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "timestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2755,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "blockNumber",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}