{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/AgreementNFT.sol": {
      "content": "pragma solidity ^0.8.9;\n\nimport \"./utils/ERC721NoEvents.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract AgreementNFT is ERC721NoEvents {\n  address private _owner;\n  uint256 private nextTokenId;\n  string private _imageCID;\n  mapping(address => mapping(string => uint256)) private _ownerTokens;\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    string memory imageCID_\n  ) ERC721NoEvents(_name, _symbol) {\n    nextTokenId = 1;\n    _owner = msg.sender;\n    _imageCID = imageCID_;\n  }\n\n  function getImageCID() public view returns (string memory) {\n    return _imageCID;\n  }\n\n  function signatureMint(\n    address signer,\n    string calldata tokenURI\n  ) public returns (uint256) {\n    require(_owner == msg.sender, \"Only owner can mint NFTs\");\n\n    _safeMint(signer, nextTokenId);\n    // _setTokenURI(nextTokenId, tokenURI);\n    // _ownerTokens[signer][tokenURI] = nextTokenId;\n    return nextTokenId++;\n  }\n\n  function verifyByTokenURI(\n    address signer,\n    string calldata tokenURI\n  ) public view returns (bool) {\n    uint256 tokenId = _ownerTokens[signer][tokenURI];\n    return _ownerOf(tokenId) == signer;\n  }\n}\n"
    },
    "contracts/DigitalSignature.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"./AgreementNFT.sol\";\n\nstruct CreateAgreementParams {\n  string identifier;\n  string cid;\n  string encryptedCid;\n  string descriptionCid;\n  bool withNFT;\n  string nftImageCid;\n  SignatureConstraint[] constraints;\n}\n\nstruct SignParams {\n  address agreementOwner;\n  uint256 agreementIndex;\n  string identifier;\n  string encryptedCid;\n  string nftTokenURI;\n}\n\nenum AgreementStatus {\n  PENDING,\n  COMPLETE,\n  APPROVED,\n  REJECTED\n}\n\nstruct Profile {\n  uint256 totalAgreements;\n  uint256 totalSignatures;\n}\n\nstruct SignatureConstraint {\n  string identifier;\n  address signer;\n  uint256 totalUsed;\n  uint256 allowedToUse;\n}\n\nstruct Agreement {\n  address owner;\n  AgreementStatus status;\n  uint256 index;\n  string identifier;\n  string cid;\n  string encryptedCid;\n  string descriptionCid;\n  uint8 signedPackets;\n  uint8 totalPackets;\n  address nftContractAddress;\n  SignatureConstraint[] constraints;\n}\n\nstruct SignaturePacket {\n  address agreementOwner;\n  uint256 agreementIndex;\n  uint256 index;\n  string identifier;\n  string encryptedCid;\n  address signer;\n  address nftContractAddress;\n  uint256 nftTokenId;\n  uint timestamp;\n  uint blockNumber;\n}\n\ncontract DigitalSignature {\n  mapping(address => Profile) profiles;\n  mapping(address => mapping(uint256 => Agreement)) agreements;\n  mapping(address => mapping(uint256 => SignaturePacket)) packets;\n\n  function getProfile() public view returns (Profile memory) {\n    return profiles[tx.origin];\n  }\n\n  function createAgreement(\n    CreateAgreementParams memory params\n  ) public returns (uint256) {\n    Profile storage profile = profiles[tx.origin];\n    Agreement storage agreement = agreements[tx.origin][\n      profile.totalAgreements\n    ];\n\n    agreement.owner = tx.origin;\n    agreement.status = AgreementStatus.PENDING;\n    agreement.index = profile.totalAgreements;\n    agreement.identifier = params.identifier;\n    agreement.cid = params.cid;\n    agreement.encryptedCid = params.encryptedCid;\n    agreement.descriptionCid = params.descriptionCid;\n    agreement.signedPackets = 0;\n    agreement.totalPackets = uint8(params.constraints.length);\n\n    for (uint i = 0; i < params.constraints.length; i++) {\n      agreement.constraints.push(params.constraints[i]);\n    }\n\n    if (params.withNFT) {\n      _deployNFTContract(agreement, params.nftImageCid);\n    }\n\n    return profile.totalAgreements++;\n  }\n\n  function _deployNFTContract(\n    Agreement storage agreement,\n    string memory nftImageCid\n  ) internal returns (address) {\n    AgreementNFT nftContract = new AgreementNFT(\n      agreement.identifier,\n      agreement.identifier,\n      nftImageCid\n    );\n    agreement.nftContractAddress = address(nftContract);\n\n    return agreement.nftContractAddress;\n  }\n\n  function sign(SignParams calldata params) public returns (uint256) {\n    Agreement storage agreement = agreements[params.agreementOwner][\n      params.agreementIndex\n    ];\n    require(agreement.owner == params.agreementOwner, \"Invalid agreement\");\n    require(\n      agreement.status == AgreementStatus.PENDING,\n      \"Agreement is not PENDING \"\n    );\n\n    SignatureConstraint storage constraint;\n    bool found = false;\n    for (uint i = 0; i < agreement.constraints.length; i++) {\n      if (\n        keccak256(abi.encodePacked(agreement.constraints[i].identifier)) ==\n        keccak256(abi.encodePacked(params.identifier))\n      ) {\n        found = true;\n        constraint = agreement.constraints[i];\n        require(\n          constraint.allowedToUse == 0 ||\n            constraint.totalUsed < constraint.allowedToUse,\n          \"Signature already gathered\"\n        );\n        require(\n          constraint.signer == tx.origin || constraint.signer == address(0),\n          \"Mismatched signer\"\n        );\n        constraint.totalUsed++;\n        if (constraint.allowedToUse == 1) {\n          constraint.signer = tx.origin;\n        }\n\n        break;\n      }\n    }\n\n    require(found, \"Missing signature constraint\");\n\n    Profile storage profile = profiles[tx.origin];\n\n    SignaturePacket memory packet = SignaturePacket({\n      agreementOwner: agreement.owner,\n      agreementIndex: agreement.index,\n      index: profile.totalSignatures,\n      identifier: params.identifier,\n      encryptedCid: params.encryptedCid,\n      signer: tx.origin,\n      nftContractAddress: agreement.nftContractAddress,\n      nftTokenId: 0,\n      timestamp: block.timestamp,\n      blockNumber: block.number\n    });\n\n    if (agreement.nftContractAddress != address(0)) {\n      AgreementNFT nftContract = AgreementNFT(agreement.nftContractAddress);\n      packet.nftTokenId = nftContract.signatureMint(\n        tx.origin,\n        params.nftTokenURI\n      );\n    }\n\n    packets[tx.origin][profile.totalSignatures] = packet;\n\n    agreement.signedPackets++;\n    if (agreement.signedPackets == agreement.totalPackets) {\n      agreement.status = AgreementStatus.COMPLETE;\n    }\n\n    return profile.totalSignatures++;\n  }\n\n  function getAgreements(\n    address owner,\n    uint256 offset,\n    uint8 limit\n  ) public view returns (Agreement[] memory) {\n    Profile memory profile = profiles[owner];\n\n    uint index = 0;\n    uint remaining = profile.totalAgreements - offset;\n    uint totalToFetch = remaining > limit ? limit : remaining;\n    Agreement[] memory ags = new Agreement[](totalToFetch);\n\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\n      ags[index++] = agreements[owner][i];\n    }\n\n    return ags;\n  }\n\n  function getSignatures(\n    address owner,\n    uint256 offset,\n    uint8 limit\n  ) public view returns (SignaturePacket[] memory) {\n    Profile memory profile = profiles[owner];\n\n    uint index = 0;\n    uint remaining = profile.totalSignatures - offset;\n    uint totalToFetch = remaining > limit ? limit : remaining;\n    SignaturePacket[] memory sigs = new SignaturePacket[](totalToFetch);\n\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\n      sigs[index++] = packets[owner][i];\n    }\n\n    return sigs;\n  }\n}\n"
    },
    "contracts/fil-deal-clients/AgreementNFTDealClient.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport { bytesToAddress } from \"../utils/helpers.sol\";\nimport { specific_authenticate_message_params_parse, specific_deal_proposal_cbor_parse } from \"../utils/CBORParse.sol\";\nimport \"../AgreementNFT.sol\";\nimport \"./CommonNFTDealClient.sol\";\n\ncontract AgreementNFTDealClient is CommonNFTDealClient {\n  string public clientTokenURI;\n  string public providerTokenURI;\n\n  constructor(\n    address _nftAddress,\n    string memory _clientTokenURI,\n    string memory _providerTokenURI\n  ) CommonNFTDealClient(_nftAddress) {\n    clientTokenURI = _clientTokenURI;\n    providerTokenURI = _providerTokenURI;\n  }\n\n  function authorizeData(\n    bytes calldata cidraw,\n    bytes calldata client,\n    bytes calldata provider,\n    uint size\n  ) public virtual override {\n    super.authorizeData(cidraw, client, provider, size);\n\n    AgreementNFT nftContract = AgreementNFT(nftAddress);\n    require(\n      nftContract.verifyByTokenURI(bytesToAddress(client), clientTokenURI),\n      \"Client does not own the right NFT\"\n    );\n    require(\n      nftContract.verifyByTokenURI(bytesToAddress(provider), providerTokenURI),\n      \"Provider does not own the right NFT\"\n    );\n  }\n}\n"
    },
    "contracts/fil-deal-clients/CommonNFTDealClient.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport { bytesToAddress } from \"../utils/helpers.sol\";\nimport { specific_authenticate_message_params_parse, specific_deal_proposal_cbor_parse } from \"../utils/CBORParse.sol\";\nimport \"../utils/ERC721NoEvents.sol\";\n\ncontract CommonNFTDealClient {\n  uint64 public constant AUTHORIZE_MESSAGE_METHOD_NUM = 2643134072;\n\n  address public nftAddress;\n\n  constructor(address _nftAddress) {\n    nftAddress = _nftAddress;\n  }\n\n  function authorizeData(\n    bytes calldata cidraw,\n    bytes calldata client,\n    bytes calldata provider,\n    uint size\n  ) public virtual {\n    ERC721NoEvents nftContract = ERC721NoEvents(nftAddress);\n\n    require(\n      nftContract.balanceOf(bytesToAddress(client)) > 0,\n      \"Client is missing required NFT\"\n    );\n    require(\n      nftContract.balanceOf(bytesToAddress(provider)) > 0,\n      \"Provider is missing required NFT\"\n    );\n  }\n\n  function handle_filecoin_method(\n    uint64,\n    uint64 method,\n    bytes calldata params\n  ) public {\n    if (method != AUTHORIZE_MESSAGE_METHOD_NUM) {\n      revert(\"the filecoin method that was called is not handled\");\n    }\n\n    bytes\n      calldata deal_proposal_cbor_bytes = specific_authenticate_message_params_parse(\n        params\n      );\n    (\n      bytes calldata cidraw,\n      bytes calldata client,\n      bytes calldata provider,\n      uint size\n    ) = specific_deal_proposal_cbor_parse(deal_proposal_cbor_bytes);\n    authorizeData(cidraw, client, provider, size);\n  }\n}\n"
    },
    "contracts/utils/CBORParse.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n// Note that these are quick and dirty and this approach is a poor long term substitute for parsing arbitrary cbor\n\n// \tMajUnsignedInt = 0\n// \tMajNegativeInt = 1\n// \tMajByteString  = 2\n// \tMajTextString  = 3\n// \tMajArray       = 4\n// \tMajMap         = 5\n// \tMajTag         = 6\n// \tMajOther       = 7\n// )\n\nuint8 constant MajUnsignedInt = 0;\nuint8 constant MajNegativeInt = 1;\nuint8 constant MajByteString = 2;\nuint8 constant MajTextString = 3;\nuint8 constant MajArray = 4;\nuint8 constant MajMap = 5;\nuint8 constant MajTag = 6;\nuint8 constant MajOther = 7;\n\nfunction specific_authenticate_message_params_parse(\n  bytes calldata cbor_params\n) pure returns (bytes calldata slice) {\n  uint byteIdx = 0;\n  // Expect a struct with two fields\n  assert(cbor_params[0] == hex\"82\");\n  byteIdx += 1;\n\n  // Read header of signature to skip past it\n  uint8 maj;\n  uint len;\n  (maj, len, byteIdx) = parse_cbor_header(cbor_params, byteIdx);\n  assert(maj == MajByteString);\n  byteIdx += len;\n\n  // Read header of message bytes, expect bytestring, strip header return\n  (maj, len, byteIdx) = parse_cbor_header(cbor_params, byteIdx);\n  assert(maj == MajByteString);\n  return cbor_params[byteIdx:cbor_params.length];\n}\n\nfunction specific_deal_proposal_cbor_parse(\n  bytes calldata cbor_deal_proposal\n)\n  pure\n  returns (\n    bytes calldata rawcid,\n    bytes calldata client,\n    bytes calldata provider,\n    uint size\n  )\n{\n  // Shortcut: expect a struct with 11 fields and for the first field to start with a cid tag\n  // 11 field struct\n  uint byteIdx = 0;\n  assert(cbor_deal_proposal[byteIdx] == hex\"8b\");\n  byteIdx += 1;\n  // cid tag\n  assert(cbor_deal_proposal[byteIdx] == hex\"D8\");\n  byteIdx += 1;\n  assert(cbor_deal_proposal[byteIdx] == hex\"2A\");\n  byteIdx += 1;\n\n  uint8 maj;\n  uint len;\n\n  // Read header of cid, expect bytestring, strip header, record index to slice rawcid\n  (maj, len, byteIdx) = parse_cbor_header(cbor_deal_proposal, byteIdx);\n  assert(maj == MajByteString);\n  rawcid = cbor_deal_proposal[byteIdx:byteIdx + len];\n  byteIdx += len;\n\n  // Read header of data size, expect positive integer, strip header, parse and record as size\n  (maj, size, byteIdx) = parse_cbor_header(cbor_deal_proposal, byteIdx);\n  assert(maj == MajUnsignedInt);\n\n  // Shortcut expect bool either false or true (verifiedDeal)\n  assert(\n    cbor_deal_proposal[byteIdx] == hex\"F4\" ||\n      cbor_deal_proposal[byteIdx] == hex\"F5\"\n  );\n  byteIdx += 1;\n\n  // Read header of client, expect bytes, strip header, record as client\n  (maj, len, byteIdx) = parse_cbor_header(cbor_deal_proposal, byteIdx);\n  assert(maj == MajByteString);\n  client = cbor_deal_proposal[byteIdx:byteIdx + len];\n  byteIdx += len;\n\n  // Read header of provider, expect bytes, strip header, record as provider\n  (maj, len, byteIdx) = parse_cbor_header(cbor_deal_proposal, byteIdx);\n  assert(maj == MajByteString);\n  provider = cbor_deal_proposal[byteIdx:byteIdx + len];\n}\n\nfunction slice_uint8(bytes memory bs, uint start) pure returns (uint8) {\n  require(bs.length >= start + 1, \"slicing out of range\");\n  uint8 x;\n  assembly {\n    x := mload(add(bs, add(0x01, start)))\n  }\n  return x;\n}\n\nfunction slice_uint16(bytes memory bs, uint start) pure returns (uint16) {\n  require(bs.length >= start + 2, \"slicing out of range\");\n  uint16 x;\n  assembly {\n    x := mload(add(bs, add(0x02, start)))\n  }\n  return x;\n}\n\nfunction slice_uint32(bytes memory bs, uint start) pure returns (uint32) {\n  require(bs.length >= start + 4, \"slicing out of range\");\n  uint32 x;\n  assembly {\n    x := mload(add(bs, add(0x04, start)))\n  }\n  return x;\n}\n\nfunction slice_uint64(bytes memory bs, uint start) pure returns (uint64) {\n  require(bs.length >= start + 8, \"slicing out of range\");\n  uint64 x;\n  assembly {\n    x := mload(add(bs, add(0x08, start)))\n  }\n  return x;\n}\n\n// Parse cbor header for major type and extra info.\n// Also return the byte index after moving past header bytes, and the number of bytes consumed\nfunction parse_cbor_header(\n  bytes memory cbor,\n  uint byteIndex\n) pure returns (uint8, uint64, uint) {\n  uint8 first = slice_uint8(cbor, byteIndex);\n  byteIndex += 1;\n  uint8 maj = (first & 0xe0) >> 5;\n  uint8 low = first & 0x1f;\n  // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\n  assert(low < 28);\n  // extra is lower bits\n  if (low < 24) {\n    return (maj, low, byteIndex);\n  }\n  // extra in next byte\n  if (low == 24) {\n    uint8 next = slice_uint8(cbor, byteIndex);\n    byteIndex += 1;\n    assert(next >= 24); // otherwise this is invalid cbor\n    return (maj, next, byteIndex);\n  }\n  // extra in next 2 bytes\n  if (low == 25) {\n    uint16 extra16 = slice_uint16(cbor, byteIndex);\n    byteIndex += 2;\n    return (maj, extra16, byteIndex);\n  }\n  // extra in next 4 bytes\n  if (low == 26) {\n    uint32 extra32 = slice_uint32(cbor, byteIndex);\n    byteIndex += 4;\n    return (maj, extra32, byteIndex);\n  }\n  // extra in next 8 bytes\n  assert(low == 27);\n  uint64 extra64 = slice_uint64(cbor, byteIndex);\n  byteIndex += 8;\n  return (maj, extra64, byteIndex);\n}\n"
    },
    "contracts/utils/ERC721NoEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721NoEvents is Context, ERC165, IERC721, IERC721Metadata {\n  using Address for address;\n  using Strings for uint256;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Mapping from token ID to owner address\n  mapping(uint256 => address) private _owners;\n\n  // Mapping owner address to token count\n  mapping(address => uint256) private _balances;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  /**\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n   */\n  constructor(string memory name_, string memory symbol_) {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(ERC165, IERC165) returns (bool) {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      ERC165.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(\n    uint256 tokenId\n  ) public view virtual override returns (string memory) {\n    _requireMinted(tokenId);\n\n    string memory _tokenURI = _tokenURIs[tokenId];\n    string memory base = _baseURI();\n\n    // If there is no base URI, return the token URI.\n    if (bytes(base).length == 0) {\n      return _tokenURI;\n    }\n    // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n    if (bytes(_tokenURI).length > 0) {\n      return string(abi.encodePacked(base, _tokenURI));\n    }\n\n    return\n      bytes(base).length > 0\n        ? string(abi.encodePacked(base, tokenId.toString()))\n        : \"\";\n  }\n\n  /**\n   * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function _setTokenURI(\n    uint256 tokenId,\n    string memory _tokenURI\n  ) internal virtual {\n    require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n    _tokenURIs[tokenId] = _tokenURI;\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(\n    address owner\n  ) public view virtual override returns (uint256) {\n    require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n    return _balances[owner];\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(\n    uint256 tokenId\n  ) public view virtual override returns (address) {\n    address owner = _ownerOf(tokenId);\n    require(owner != address(0), \"ERC721: invalid token ID\");\n    return owner;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overridden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public virtual override {\n    require(false, \"Transfers not allowed\");\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(\n    uint256 tokenId\n  ) public view virtual override returns (address) {\n    return address(0);\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(\n    address operator,\n    bool approved\n  ) public virtual override {\n    require(false, \"Transfers not allowed\");\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  ) public view virtual override returns (bool) {\n    return false;\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    require(false, \"Transfers not allowed\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    require(false, \"Transfers not allowed\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) public virtual override {\n    require(false, \"Transfers not allowed\");\n  }\n\n  /**\n   * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n   */\n  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n    return _owners[tokenId];\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   * and stop existing when they are burned (`_burn`).\n   */\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    return _ownerOf(tokenId) != address(0);\n  }\n\n  /**\n   * @dev Safely mints `tokenId` and transfers it to `to`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(address to, uint256 tokenId) internal virtual {\n    _safeMint(to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n   */\n  function _safeMint(\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) internal virtual {\n    _mint(to, tokenId);\n    require(\n      _checkOnERC721Received(address(0), to, tokenId, data),\n      \"ERC721: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  /**\n   * @dev Mints `tokenId` and transfers it to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - `to` cannot be the zero address.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(address to, uint256 tokenId) internal virtual {\n    require(to != address(0), \"ERC721: mint to the zero address\");\n    require(!_exists(tokenId), \"ERC721: token already minted\");\n\n    _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n    // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n    require(!_exists(tokenId), \"ERC721: token already minted\");\n\n    unchecked {\n      // Will not overflow unless all 2**256 token ids are minted to the same owner.\n      // Given that tokens are minted one by one, it is impossible in practice that\n      // this ever happens. Might change if we allow batch minting.\n      // The ERC fails to describe this case.\n      _balances[to] += 1;\n    }\n\n    _owners[tokenId] = to;\n\n    _afterTokenTransfer(address(0), to, tokenId, 1);\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   * This is an internal function that does not check if the sender is authorized to operate on the token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    address owner = ERC721NoEvents.ownerOf(tokenId);\n\n    _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n    // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n    owner = ERC721NoEvents.ownerOf(tokenId);\n\n    unchecked {\n      // Cannot overflow, as that would require more tokens to be burned/transferred\n      // out than the owner initially received through minting and transferring in.\n      _balances[owner] -= 1;\n    }\n    delete _owners[tokenId];\n\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n\n    _afterTokenTransfer(owner, address(0), tokenId, 1);\n  }\n\n  /**\n   * @dev Reverts if the `tokenId` has not been minted yet.\n   */\n  function _requireMinted(uint256 tokenId) internal view virtual {\n    require(_exists(tokenId), \"ERC721: invalid token ID\");\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\n      returns (bytes4 retval) {\n        return retval == IERC721Receiver.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n        } else {\n          /// @solidity memory-safe-assembly\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n   * - When `from` is zero, the tokens will be minted for `to`.\n   * - When `to` is zero, ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 /* firstTokenId */,\n    uint256 batchSize\n  ) internal virtual {\n    if (batchSize > 1) {\n      if (from != address(0)) {\n        _balances[from] -= batchSize;\n      }\n      if (to != address(0)) {\n        _balances[to] += batchSize;\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n   * - When `from` is zero, the tokens were minted for `to`.\n   * - When `to` is zero, ``from``'s tokens were burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 firstTokenId,\n    uint256 batchSize\n  ) internal virtual {}\n}\n"
    },
    "contracts/utils/helpers.sol": {
      "content": "function bytesToAddress(bytes memory b) pure returns (address payable a) {\n  require(b.length == 20);\n  assembly {\n    a := div(mload(add(b, 32)), exp(256, 12))\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}