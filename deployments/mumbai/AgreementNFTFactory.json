{
  "address": "0x1E7EF1A8F6b6710c6541dBACf36C4b9173712B6A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageCID",
          "type": "string"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47e9ef9e20faf246a391ce14cf018745a23e200119403f7a2a0cd2f2b137f212",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x1E7EF1A8F6b6710c6541dBACf36C4b9173712B6A",
    "transactionIndex": 12,
    "gasUsed": "3242443",
    "logsBloom": "0x
    "blockHash": "0xcc2a5ea25d1bf9c87a4017a5fcf8591ddc1d4c6542ddaa76f133eb6d6e08b459",
    "transactionHash": "0x47e9ef9e20faf246a391ce14cf018745a23e200119403f7a2a0cd2f2b137f212",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 29632167,
        "transactionHash": "0x47e9ef9e20faf246a391ce14cf018745a23e200119403f7a2a0cd2f2b137f212",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000dd9201138433700000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000184a9c0a2b0e72a5ccbb00000000000000000000000000000000000000000000000002b8b1d0a9dbbcc900000000000000000000000000000000000000000000184a9c18042e83de0ff2",
        "logIndex": 60,
        "blockHash": "0xcc2a5ea25d1bf9c87a4017a5fcf8591ddc1d4c6542ddaa76f133eb6d6e08b459"
      }
    ],
    "blockNumber": 29632167,
    "cumulativeGasUsed": "7177429",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e0703c0f616a32ec78ed0de00084bbf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageCID\",\"type\":\"string\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/AgreementNFTFactory.sol\":\"AgreementNFTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/nft/AgreementNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"./IAgreementNFT.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract AgreementNFT is IAgreementNFT, ERC721URIStorage {\\n  address private _owner;\\n  uint256 private nextTokenId;\\n  string private _imageCID;\\n  mapping(address => mapping(string => uint256)) private _ownerTokens;\\n\\n  constructor(\\n    address owner_,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory imageCID_\\n  ) ERC721(_name, _symbol) {\\n    nextTokenId = 1;\\n    _owner = owner_;\\n    _imageCID = imageCID_;\\n  }\\n\\n  function getImageCID() public view returns (string memory) {\\n    return _imageCID;\\n  }\\n\\n  function signatureMint(\\n    address signer,\\n    string calldata tokenURI\\n  ) public returns (uint256) {\\n    require(_owner == msg.sender, \\\"Only owner can mint NFTs\\\");\\n\\n    _mint(signer, nextTokenId);\\n    _setTokenURI(nextTokenId, tokenURI);\\n    _ownerTokens[signer][tokenURI] = nextTokenId;\\n    return nextTokenId++;\\n  }\\n\\n  function verifyByTokenURI(\\n    address signer,\\n    string calldata tokenURI\\n  ) public view returns (bool) {\\n    uint256 tokenId = _ownerTokens[signer][tokenURI];\\n    return _ownerOf(tokenId) == signer;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 firstTokenId,\\n    uint256 batchSize\\n  ) internal virtual override {\\n    require(from == address(0), \\\"token transfer not allowed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x22949187e3dc999bc5da17bac1bca2e86a1dd26812d0891410fbc6750e50a811\",\"license\":\"MIT\"},\"contracts/nft/AgreementNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IAgreementNFTFactory.sol\\\";\\nimport \\\"./AgreementNFT.sol\\\";\\n\\ncontract AgreementNFTFactory {\\n  function deploy(\\n    string memory name,\\n    string memory symbol,\\n    string memory imageCID\\n  ) public returns (address) {\\n    AgreementNFT nftContract = new AgreementNFT(\\n      msg.sender,\\n      name,\\n      symbol,\\n      imageCID\\n    );\\n    return address(nftContract);\\n  }\\n}\\n\",\"keccak256\":\"0x2cf8ca790bc1989e4d1b0ef660200a622d4da4ed750b7f83cb49f252100d6d3c\",\"license\":\"MIT\"},\"contracts/nft/IAgreementNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAgreementNFT {\\n  function signatureMint(\\n    address signer,\\n    string calldata tokenURI\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc126eeb7f8088480d3b17ed90f8e75ba50fc0c385d07b58b6b7bb8ab9df45388\",\"license\":\"MIT\"},\"contracts/nft/IAgreementNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAgreementNFTFactory {\\n  function deploy(\\n    string memory name,\\n    string memory symbol,\\n    string memory imageCID\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x4add9e6e82f7b08152acf8389296e83a51739dcc497d91861dbe0c459bc87a4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506139fc806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80631e67c24a1462000033575b600080fd5b6200005160048036038101906200004b91906200023c565b62000069565b6040516200006091906200033a565b60405180910390f35b600080338585856040516200007e90620000b8565b6200008d9493929190620003e0565b604051809103906000f080158015620000aa573d6000803e3d6000fd5b509050809150509392505050565b613584806200044383390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012f82620000e4565b810181811067ffffffffffffffff82111715620001515762000150620000f5565b5b80604052505050565b600062000166620000c6565b905062000174828262000124565b919050565b600067ffffffffffffffff821115620001975762000196620000f5565b5b620001a282620000e4565b9050602081019050919050565b82818337600083830152505050565b6000620001d5620001cf8462000179565b6200015a565b905082815260208101848484011115620001f457620001f3620000df565b5b62000201848285620001af565b509392505050565b600082601f830112620002215762000220620000da565b5b813562000233848260208601620001be565b91505092915050565b600080600060608486031215620002585762000257620000d0565b5b600084013567ffffffffffffffff811115620002795762000278620000d5565b5b620002878682870162000209565b935050602084013567ffffffffffffffff811115620002ab57620002aa620000d5565b5b620002b98682870162000209565b925050604084013567ffffffffffffffff811115620002dd57620002dc620000d5565b5b620002eb8682870162000209565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032282620002f5565b9050919050565b620003348162000315565b82525050565b600060208201905062000351600083018462000329565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200039357808201518184015260208101905062000376565b60008484015250505050565b6000620003ac8262000357565b620003b8818562000362565b9350620003ca81856020860162000373565b620003d581620000e4565b840191505092915050565b6000608082019050620003f7600083018762000329565b81810360208301526200040b81866200039f565b905081810360408301526200042181856200039f565b905081810360608301526200043781846200039f565b90509594505050505056fe60806040523480156200001157600080fd5b5060405162003584380380620035848339818101604052810190620000379190620002bc565b828281600090816200004a9190620005d6565b5080600190816200005c9190620005d6565b505050600160088190555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060099081620000b99190620005d6565b5050505050620006bd565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010582620000d8565b9050919050565b6200011781620000f8565b81146200012357600080fd5b50565b60008151905062000137816200010c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001928262000147565b810181811067ffffffffffffffff82111715620001b457620001b362000158565b5b80604052505050565b6000620001c9620000c4565b9050620001d7828262000187565b919050565b600067ffffffffffffffff821115620001fa57620001f962000158565b5b620002058262000147565b9050602081019050919050565b60005b838110156200023257808201518184015260208101905062000215565b60008484015250505050565b6000620002556200024f84620001dc565b620001bd565b90508281526020810184848401111562000274576200027362000142565b5b6200028184828562000212565b509392505050565b600082601f830112620002a157620002a06200013d565b5b8151620002b38482602086016200023e565b91505092915050565b60008060008060808587031215620002d957620002d8620000ce565b5b6000620002e98782880162000126565b945050602085015167ffffffffffffffff8111156200030d576200030c620000d3565b5b6200031b8782880162000289565b935050604085015167ffffffffffffffff8111156200033f576200033e620000d3565b5b6200034d8782880162000289565b925050606085015167ffffffffffffffff811115620003715762000370620000d3565b5b6200037f8782880162000289565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003de57607f821691505b602082108103620003f457620003f362000396565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200045e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200041f565b6200046a86836200041f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004b7620004b1620004ab8462000482565b6200048c565b62000482565b9050919050565b6000819050919050565b620004d38362000496565b620004eb620004e282620004be565b8484546200042c565b825550505050565b600090565b62000502620004f3565b6200050f818484620004c8565b505050565b5b8181101562000537576200052b600082620004f8565b60018101905062000515565b5050565b601f82111562000586576200055081620003fa565b6200055b846200040f565b810160208510156200056b578190505b620005836200057a856200040f565b83018262000514565b50505b505050565b600082821c905092915050565b6000620005ab600019846008026200058b565b1980831691505092915050565b6000620005c6838362000598565b9150826002028217905092915050565b620005e1826200038b565b67ffffffffffffffff811115620005fd57620005fc62000158565b5b620006098254620003c5565b620006168282856200053b565b600060209050601f8311600181146200064e576000841562000639578287015190505b620006458582620005b8565b865550620006b5565b601f1984166200065e86620003fa565b60005b82811015620006885784890151825560018201915060208501945060208101905062000661565b86831015620006a85784890151620006a4601f89168262000598565b8355505b6001600288020188555050505b505050505050565b612eb780620006cd6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb465146102d3578063b88d4fde146102ef578063c87b56dd1461030b578063e985e9c51461033b57610100565b806342842e0e146102395780636352211e1461025557806370a082311461028557806395d89b41146102b557610100565b80630883a42e116100d35780630883a42e146101b3578063095ea7b3146101e357806323b872dd146101ff5780632ada0d541461021b57610100565b806301a95bb31461010557806301ffc9a71461013557806306fdde0314610165578063081812fc14610183575b600080fd5b61011f600480360381019061011a9190611cc1565b61036b565b60405161012c9190611d3a565b60405180910390f35b61014f600480360381019061014a9190611dad565b6104dd565b60405161015c9190611df5565b60405180910390f35b61016d6105bf565b60405161017a9190611ea0565b60405180910390f35b61019d60048036038101906101989190611eee565b610651565b6040516101aa9190611f2a565b60405180910390f35b6101cd60048036038101906101c89190611cc1565b610697565b6040516101da9190611df5565b60405180910390f35b6101fd60048036038101906101f89190611f45565b61073b565b005b61021960048036038101906102149190611f85565b610852565b005b6102236108b2565b6040516102309190611ea0565b60405180910390f35b610253600480360381019061024e9190611f85565b610944565b005b61026f600480360381019061026a9190611eee565b610964565b60405161027c9190611f2a565b60405180910390f35b61029f600480360381019061029a9190611fd8565b6109ea565b6040516102ac9190611d3a565b60405180910390f35b6102bd610aa1565b6040516102ca9190611ea0565b60405180910390f35b6102ed60048036038101906102e89190612031565b610b33565b005b610309600480360381019061030491906121a1565b610b49565b005b61032560048036038101906103209190611eee565b610bab565b6040516103329190611ea0565b60405180910390f35b61035560048036038101906103509190612224565b610cbd565b6040516103629190611df5565b60405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f4906122b0565b60405180910390fd5b61040984600854610d51565b61045960085484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610f6e565b600854600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516104ab929190612300565b908152602001604051809103902081905550600860008154809291906104d090612348565b9190505590509392505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b857506105b782610fdb565b5b9050919050565b6060600080546105ce906123bf565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa906123bf565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b600061065c82611045565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516106e9929190612300565b90815260200160405180910390205490508473ffffffffffffffffffffffffffffffffffffffff1661071a82611090565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b600061074682610964565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad90612462565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107d56110cd565b73ffffffffffffffffffffffffffffffffffffffff1614806108045750610803816107fe6110cd565b610cbd565b5b610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a906124f4565b60405180910390fd5b61084d83836110d5565b505050565b61086361085d6110cd565b8261118e565b6108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990612586565b60405180910390fd5b6108ad838383611223565b505050565b6060600980546108c1906123bf565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed906123bf565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050905090565b61095f83838360405180602001604052806000815250610b49565b505050565b60008061097083611090565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d8906125f2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5190612684565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610ab0906123bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610adc906123bf565b8015610b295780601f10610afe57610100808354040283529160200191610b29565b820191906000526020600020905b815481529060010190602001808311610b0c57829003601f168201915b5050505050905090565b610b45610b3e6110cd565b838361151c565b5050565b610b5a610b546110cd565b8361118e565b610b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9090612586565b60405180910390fd5b610ba584848484611688565b50505050565b6060610bb682611045565b6000600660008481526020019081526020016000208054610bd6906123bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c02906123bf565b8015610c4f5780601f10610c2457610100808354040283529160200191610c4f565b820191906000526020600020905b815481529060010190602001808311610c3257829003601f168201915b505050505090506000610c606116e4565b90506000815103610c75578192505050610cb8565b600082511115610caa578082604051602001610c929291906126d5565b60405160208183030381529060405292505050610cb8565b610cb3846116fb565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db790612745565b60405180910390fd5b610dc981611763565b15610e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e00906127b1565b60405180910390fd5b610e176000838360016117a4565b610e2081611763565b15610e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e57906127b1565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f6a600083836001611819565b5050565b610f7782611763565b610fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fad90612843565b60405180910390fd5b80600660008481526020019081526020016000209081610fd69190612a0f565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61104e81611763565b61108d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611084906125f2565b60405180910390fd5b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661114883610964565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061119a83610964565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111dc57506111db8185610cbd565b5b8061121a57508373ffffffffffffffffffffffffffffffffffffffff1661120284610651565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661124382610964565b73ffffffffffffffffffffffffffffffffffffffff1614611299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129090612b53565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ff90612be5565b60405180910390fd5b61131583838360016117a4565b8273ffffffffffffffffffffffffffffffffffffffff1661133582610964565b73ffffffffffffffffffffffffffffffffffffffff161461138b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138290612b53565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115178383836001611819565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361158a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158190612c51565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161167b9190611df5565b60405180910390a3505050565b611693848484611223565b61169f8484848461181f565b6116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d590612ce3565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061170682611045565b60006117106116e4565b90506000815111611730576040518060200160405280600081525061175b565b8061173a846119a6565b60405160200161174b9291906126d5565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661178583611090565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180a90612d4f565b60405180910390fd5b50505050565b50505050565b60006118408473ffffffffffffffffffffffffffffffffffffffff16611a74565b15611999578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026118696110cd565b8786866040518563ffffffff1660e01b815260040161188b9493929190612dc4565b6020604051808303816000875af19250505080156118c757506040513d601f19601f820116820180604052508101906118c49190612e25565b60015b611949573d80600081146118f7576040519150601f19603f3d011682016040523d82523d6000602084013e6118fc565b606091505b506000815103611941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193890612ce3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061199e565b600190505b949350505050565b6060600060016119b584611a97565b01905060008167ffffffffffffffff8111156119d4576119d3612076565b5b6040519080825280601f01601f191660200182016040528015611a065781602001600182028036833780820191505090505b509050600082602001820190505b600115611a69578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a5d57611a5c612e52565b5b04945060008503611a14575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611af5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611aeb57611aea612e52565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611b32576d04ee2d6d415b85acef81000000008381611b2857611b27612e52565b5b0492506020810190505b662386f26fc100008310611b6157662386f26fc100008381611b5757611b56612e52565b5b0492506010810190505b6305f5e1008310611b8a576305f5e1008381611b8057611b7f612e52565b5b0492506008810190505b6127108310611baf576127108381611ba557611ba4612e52565b5b0492506004810190505b60648310611bd25760648381611bc857611bc7612e52565b5b0492506002810190505b600a8310611be1576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c2982611bfe565b9050919050565b611c3981611c1e565b8114611c4457600080fd5b50565b600081359050611c5681611c30565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611c8157611c80611c5c565b5b8235905067ffffffffffffffff811115611c9e57611c9d611c61565b5b602083019150836001820283011115611cba57611cb9611c66565b5b9250929050565b600080600060408486031215611cda57611cd9611bf4565b5b6000611ce886828701611c47565b935050602084013567ffffffffffffffff811115611d0957611d08611bf9565b5b611d1586828701611c6b565b92509250509250925092565b6000819050919050565b611d3481611d21565b82525050565b6000602082019050611d4f6000830184611d2b565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d8a81611d55565b8114611d9557600080fd5b50565b600081359050611da781611d81565b92915050565b600060208284031215611dc357611dc2611bf4565b5b6000611dd184828501611d98565b91505092915050565b60008115159050919050565b611def81611dda565b82525050565b6000602082019050611e0a6000830184611de6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e4a578082015181840152602081019050611e2f565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e7282611e10565b611e7c8185611e1b565b9350611e8c818560208601611e2c565b611e9581611e56565b840191505092915050565b60006020820190508181036000830152611eba8184611e67565b905092915050565b611ecb81611d21565b8114611ed657600080fd5b50565b600081359050611ee881611ec2565b92915050565b600060208284031215611f0457611f03611bf4565b5b6000611f1284828501611ed9565b91505092915050565b611f2481611c1e565b82525050565b6000602082019050611f3f6000830184611f1b565b92915050565b60008060408385031215611f5c57611f5b611bf4565b5b6000611f6a85828601611c47565b9250506020611f7b85828601611ed9565b9150509250929050565b600080600060608486031215611f9e57611f9d611bf4565b5b6000611fac86828701611c47565b9350506020611fbd86828701611c47565b9250506040611fce86828701611ed9565b9150509250925092565b600060208284031215611fee57611fed611bf4565b5b6000611ffc84828501611c47565b91505092915050565b61200e81611dda565b811461201957600080fd5b50565b60008135905061202b81612005565b92915050565b6000806040838503121561204857612047611bf4565b5b600061205685828601611c47565b92505060206120678582860161201c565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120ae82611e56565b810181811067ffffffffffffffff821117156120cd576120cc612076565b5b80604052505050565b60006120e0611bea565b90506120ec82826120a5565b919050565b600067ffffffffffffffff82111561210c5761210b612076565b5b61211582611e56565b9050602081019050919050565b82818337600083830152505050565b600061214461213f846120f1565b6120d6565b9050828152602081018484840111156121605761215f612071565b5b61216b848285612122565b509392505050565b600082601f83011261218857612187611c5c565b5b8135612198848260208601612131565b91505092915050565b600080600080608085870312156121bb576121ba611bf4565b5b60006121c987828801611c47565b94505060206121da87828801611c47565b93505060406121eb87828801611ed9565b925050606085013567ffffffffffffffff81111561220c5761220b611bf9565b5b61221887828801612173565b91505092959194509250565b6000806040838503121561223b5761223a611bf4565b5b600061224985828601611c47565b925050602061225a85828601611c47565b9150509250929050565b7f4f6e6c79206f776e65722063616e206d696e74204e4654730000000000000000600082015250565b600061229a601883611e1b565b91506122a582612264565b602082019050919050565b600060208201905081810360008301526122c98161228d565b9050919050565b600081905092915050565b60006122e783856122d0565b93506122f4838584612122565b82840190509392505050565b600061230d8284866122db565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061235382611d21565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361238557612384612319565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123d757607f821691505b6020821081036123ea576123e9612390565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061244c602183611e1b565b9150612457826123f0565b604082019050919050565b6000602082019050818103600083015261247b8161243f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006124de603d83611e1b565b91506124e982612482565b604082019050919050565b6000602082019050818103600083015261250d816124d1565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612570602d83611e1b565b915061257b82612514565b604082019050919050565b6000602082019050818103600083015261259f81612563565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006125dc601883611e1b565b91506125e7826125a6565b602082019050919050565b6000602082019050818103600083015261260b816125cf565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061266e602983611e1b565b915061267982612612565b604082019050919050565b6000602082019050818103600083015261269d81612661565b9050919050565b60006126af82611e10565b6126b981856122d0565b93506126c9818560208601611e2c565b80840191505092915050565b60006126e182856126a4565b91506126ed82846126a4565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061272f602083611e1b565b915061273a826126f9565b602082019050919050565b6000602082019050818103600083015261275e81612722565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061279b601c83611e1b565b91506127a682612765565b602082019050919050565b600060208201905081810360008301526127ca8161278e565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061282d602e83611e1b565b9150612838826127d1565b604082019050919050565b6000602082019050818103600083015261285c81612820565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128c57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612888565b6128cf8683612888565b95508019841693508086168417925050509392505050565b6000819050919050565b600061290c61290761290284611d21565b6128e7565b611d21565b9050919050565b6000819050919050565b612926836128f1565b61293a61293282612913565b848454612895565b825550505050565b600090565b61294f612942565b61295a81848461291d565b505050565b5b8181101561297e57612973600082612947565b600181019050612960565b5050565b601f8211156129c35761299481612863565b61299d84612878565b810160208510156129ac578190505b6129c06129b885612878565b83018261295f565b50505b505050565b600082821c905092915050565b60006129e6600019846008026129c8565b1980831691505092915050565b60006129ff83836129d5565b9150826002028217905092915050565b612a1882611e10565b67ffffffffffffffff811115612a3157612a30612076565b5b612a3b82546123bf565b612a46828285612982565b600060209050601f831160018114612a795760008415612a67578287015190505b612a7185826129f3565b865550612ad9565b601f198416612a8786612863565b60005b82811015612aaf57848901518255600182019150602085019450602081019050612a8a565b86831015612acc5784890151612ac8601f8916826129d5565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612b3d602583611e1b565b9150612b4882612ae1565b604082019050919050565b60006020820190508181036000830152612b6c81612b30565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612bcf602483611e1b565b9150612bda82612b73565b604082019050919050565b60006020820190508181036000830152612bfe81612bc2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612c3b601983611e1b565b9150612c4682612c05565b602082019050919050565b60006020820190508181036000830152612c6a81612c2e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612ccd603283611e1b565b9150612cd882612c71565b604082019050919050565b60006020820190508181036000830152612cfc81612cc0565b9050919050565b7f746f6b656e207472616e73666572206e6f7420616c6c6f776564000000000000600082015250565b6000612d39601a83611e1b565b9150612d4482612d03565b602082019050919050565b60006020820190508181036000830152612d6881612d2c565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612d9682612d6f565b612da08185612d7a565b9350612db0818560208601611e2c565b612db981611e56565b840191505092915050565b6000608082019050612dd96000830187611f1b565b612de66020830186611f1b565b612df36040830185611d2b565b8181036060830152612e058184612d8b565b905095945050505050565b600081519050612e1f81611d81565b92915050565b600060208284031215612e3b57612e3a611bf4565b5b6000612e4984828501612e10565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220d192eb24e9e232de7e0af45d6419e9e2be0d65d45adaaffbf7bb2d476539464d64736f6c63430008110033a26469706673582212209174275c8a1ac46f9583110bf1d884571a11572307fbf99370ff94a382d8ad2f64736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c80631e67c24a1462000033575b600080fd5b6200005160048036038101906200004b91906200023c565b62000069565b6040516200006091906200033a565b60405180910390f35b600080338585856040516200007e90620000b8565b6200008d9493929190620003e0565b604051809103906000f080158015620000aa573d6000803e3d6000fd5b509050809150509392505050565b613584806200044383390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012f82620000e4565b810181811067ffffffffffffffff82111715620001515762000150620000f5565b5b80604052505050565b600062000166620000c6565b905062000174828262000124565b919050565b600067ffffffffffffffff821115620001975762000196620000f5565b5b620001a282620000e4565b9050602081019050919050565b82818337600083830152505050565b6000620001d5620001cf8462000179565b6200015a565b905082815260208101848484011115620001f457620001f3620000df565b5b62000201848285620001af565b509392505050565b600082601f830112620002215762000220620000da565b5b813562000233848260208601620001be565b91505092915050565b600080600060608486031215620002585762000257620000d0565b5b600084013567ffffffffffffffff811115620002795762000278620000d5565b5b620002878682870162000209565b935050602084013567ffffffffffffffff811115620002ab57620002aa620000d5565b5b620002b98682870162000209565b925050604084013567ffffffffffffffff811115620002dd57620002dc620000d5565b5b620002eb8682870162000209565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032282620002f5565b9050919050565b620003348162000315565b82525050565b600060208201905062000351600083018462000329565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200039357808201518184015260208101905062000376565b60008484015250505050565b6000620003ac8262000357565b620003b8818562000362565b9350620003ca81856020860162000373565b620003d581620000e4565b840191505092915050565b6000608082019050620003f7600083018762000329565b81810360208301526200040b81866200039f565b905081810360408301526200042181856200039f565b905081810360608301526200043781846200039f565b90509594505050505056fe60806040523480156200001157600080fd5b5060405162003584380380620035848339818101604052810190620000379190620002bc565b828281600090816200004a9190620005d6565b5080600190816200005c9190620005d6565b505050600160088190555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060099081620000b99190620005d6565b5050505050620006bd565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010582620000d8565b9050919050565b6200011781620000f8565b81146200012357600080fd5b50565b60008151905062000137816200010c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001928262000147565b810181811067ffffffffffffffff82111715620001b457620001b362000158565b5b80604052505050565b6000620001c9620000c4565b9050620001d7828262000187565b919050565b600067ffffffffffffffff821115620001fa57620001f962000158565b5b620002058262000147565b9050602081019050919050565b60005b838110156200023257808201518184015260208101905062000215565b60008484015250505050565b6000620002556200024f84620001dc565b620001bd565b90508281526020810184848401111562000274576200027362000142565b5b6200028184828562000212565b509392505050565b600082601f830112620002a157620002a06200013d565b5b8151620002b38482602086016200023e565b91505092915050565b60008060008060808587031215620002d957620002d8620000ce565b5b6000620002e98782880162000126565b945050602085015167ffffffffffffffff8111156200030d576200030c620000d3565b5b6200031b8782880162000289565b935050604085015167ffffffffffffffff8111156200033f576200033e620000d3565b5b6200034d8782880162000289565b925050606085015167ffffffffffffffff811115620003715762000370620000d3565b5b6200037f8782880162000289565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003de57607f821691505b602082108103620003f457620003f362000396565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200045e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200041f565b6200046a86836200041f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004b7620004b1620004ab8462000482565b6200048c565b62000482565b9050919050565b6000819050919050565b620004d38362000496565b620004eb620004e282620004be565b8484546200042c565b825550505050565b600090565b62000502620004f3565b6200050f818484620004c8565b505050565b5b8181101562000537576200052b600082620004f8565b60018101905062000515565b5050565b601f82111562000586576200055081620003fa565b6200055b846200040f565b810160208510156200056b578190505b620005836200057a856200040f565b83018262000514565b50505b505050565b600082821c905092915050565b6000620005ab600019846008026200058b565b1980831691505092915050565b6000620005c6838362000598565b9150826002028217905092915050565b620005e1826200038b565b67ffffffffffffffff811115620005fd57620005fc62000158565b5b620006098254620003c5565b620006168282856200053b565b600060209050601f8311600181146200064e576000841562000639578287015190505b620006458582620005b8565b865550620006b5565b601f1984166200065e86620003fa565b60005b82811015620006885784890151825560018201915060208501945060208101905062000661565b86831015620006a85784890151620006a4601f89168262000598565b8355505b6001600288020188555050505b505050505050565b612eb780620006cd6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb465146102d3578063b88d4fde146102ef578063c87b56dd1461030b578063e985e9c51461033b57610100565b806342842e0e146102395780636352211e1461025557806370a082311461028557806395d89b41146102b557610100565b80630883a42e116100d35780630883a42e146101b3578063095ea7b3146101e357806323b872dd146101ff5780632ada0d541461021b57610100565b806301a95bb31461010557806301ffc9a71461013557806306fdde0314610165578063081812fc14610183575b600080fd5b61011f600480360381019061011a9190611cc1565b61036b565b60405161012c9190611d3a565b60405180910390f35b61014f600480360381019061014a9190611dad565b6104dd565b60405161015c9190611df5565b60405180910390f35b61016d6105bf565b60405161017a9190611ea0565b60405180910390f35b61019d60048036038101906101989190611eee565b610651565b6040516101aa9190611f2a565b60405180910390f35b6101cd60048036038101906101c89190611cc1565b610697565b6040516101da9190611df5565b60405180910390f35b6101fd60048036038101906101f89190611f45565b61073b565b005b61021960048036038101906102149190611f85565b610852565b005b6102236108b2565b6040516102309190611ea0565b60405180910390f35b610253600480360381019061024e9190611f85565b610944565b005b61026f600480360381019061026a9190611eee565b610964565b60405161027c9190611f2a565b60405180910390f35b61029f600480360381019061029a9190611fd8565b6109ea565b6040516102ac9190611d3a565b60405180910390f35b6102bd610aa1565b6040516102ca9190611ea0565b60405180910390f35b6102ed60048036038101906102e89190612031565b610b33565b005b610309600480360381019061030491906121a1565b610b49565b005b61032560048036038101906103209190611eee565b610bab565b6040516103329190611ea0565b60405180910390f35b61035560048036038101906103509190612224565b610cbd565b6040516103629190611df5565b60405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f4906122b0565b60405180910390fd5b61040984600854610d51565b61045960085484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610f6e565b600854600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516104ab929190612300565b908152602001604051809103902081905550600860008154809291906104d090612348565b9190505590509392505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b857506105b782610fdb565b5b9050919050565b6060600080546105ce906123bf565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa906123bf565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b600061065c82611045565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516106e9929190612300565b90815260200160405180910390205490508473ffffffffffffffffffffffffffffffffffffffff1661071a82611090565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b600061074682610964565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad90612462565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107d56110cd565b73ffffffffffffffffffffffffffffffffffffffff1614806108045750610803816107fe6110cd565b610cbd565b5b610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a906124f4565b60405180910390fd5b61084d83836110d5565b505050565b61086361085d6110cd565b8261118e565b6108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990612586565b60405180910390fd5b6108ad838383611223565b505050565b6060600980546108c1906123bf565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed906123bf565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050905090565b61095f83838360405180602001604052806000815250610b49565b505050565b60008061097083611090565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d8906125f2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5190612684565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610ab0906123bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610adc906123bf565b8015610b295780601f10610afe57610100808354040283529160200191610b29565b820191906000526020600020905b815481529060010190602001808311610b0c57829003601f168201915b5050505050905090565b610b45610b3e6110cd565b838361151c565b5050565b610b5a610b546110cd565b8361118e565b610b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9090612586565b60405180910390fd5b610ba584848484611688565b50505050565b6060610bb682611045565b6000600660008481526020019081526020016000208054610bd6906123bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c02906123bf565b8015610c4f5780601f10610c2457610100808354040283529160200191610c4f565b820191906000526020600020905b815481529060010190602001808311610c3257829003601f168201915b505050505090506000610c606116e4565b90506000815103610c75578192505050610cb8565b600082511115610caa578082604051602001610c929291906126d5565b60405160208183030381529060405292505050610cb8565b610cb3846116fb565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db790612745565b60405180910390fd5b610dc981611763565b15610e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e00906127b1565b60405180910390fd5b610e176000838360016117a4565b610e2081611763565b15610e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e57906127b1565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f6a600083836001611819565b5050565b610f7782611763565b610fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fad90612843565b60405180910390fd5b80600660008481526020019081526020016000209081610fd69190612a0f565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61104e81611763565b61108d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611084906125f2565b60405180910390fd5b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661114883610964565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061119a83610964565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111dc57506111db8185610cbd565b5b8061121a57508373ffffffffffffffffffffffffffffffffffffffff1661120284610651565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661124382610964565b73ffffffffffffffffffffffffffffffffffffffff1614611299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129090612b53565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ff90612be5565b60405180910390fd5b61131583838360016117a4565b8273ffffffffffffffffffffffffffffffffffffffff1661133582610964565b73ffffffffffffffffffffffffffffffffffffffff161461138b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138290612b53565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115178383836001611819565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361158a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158190612c51565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161167b9190611df5565b60405180910390a3505050565b611693848484611223565b61169f8484848461181f565b6116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d590612ce3565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061170682611045565b60006117106116e4565b90506000815111611730576040518060200160405280600081525061175b565b8061173a846119a6565b60405160200161174b9291906126d5565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661178583611090565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180a90612d4f565b60405180910390fd5b50505050565b50505050565b60006118408473ffffffffffffffffffffffffffffffffffffffff16611a74565b15611999578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026118696110cd565b8786866040518563ffffffff1660e01b815260040161188b9493929190612dc4565b6020604051808303816000875af19250505080156118c757506040513d601f19601f820116820180604052508101906118c49190612e25565b60015b611949573d80600081146118f7576040519150601f19603f3d011682016040523d82523d6000602084013e6118fc565b606091505b506000815103611941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193890612ce3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061199e565b600190505b949350505050565b6060600060016119b584611a97565b01905060008167ffffffffffffffff8111156119d4576119d3612076565b5b6040519080825280601f01601f191660200182016040528015611a065781602001600182028036833780820191505090505b509050600082602001820190505b600115611a69578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a5d57611a5c612e52565b5b04945060008503611a14575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611af5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611aeb57611aea612e52565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611b32576d04ee2d6d415b85acef81000000008381611b2857611b27612e52565b5b0492506020810190505b662386f26fc100008310611b6157662386f26fc100008381611b5757611b56612e52565b5b0492506010810190505b6305f5e1008310611b8a576305f5e1008381611b8057611b7f612e52565b5b0492506008810190505b6127108310611baf576127108381611ba557611ba4612e52565b5b0492506004810190505b60648310611bd25760648381611bc857611bc7612e52565b5b0492506002810190505b600a8310611be1576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c2982611bfe565b9050919050565b611c3981611c1e565b8114611c4457600080fd5b50565b600081359050611c5681611c30565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611c8157611c80611c5c565b5b8235905067ffffffffffffffff811115611c9e57611c9d611c61565b5b602083019150836001820283011115611cba57611cb9611c66565b5b9250929050565b600080600060408486031215611cda57611cd9611bf4565b5b6000611ce886828701611c47565b935050602084013567ffffffffffffffff811115611d0957611d08611bf9565b5b611d1586828701611c6b565b92509250509250925092565b6000819050919050565b611d3481611d21565b82525050565b6000602082019050611d4f6000830184611d2b565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d8a81611d55565b8114611d9557600080fd5b50565b600081359050611da781611d81565b92915050565b600060208284031215611dc357611dc2611bf4565b5b6000611dd184828501611d98565b91505092915050565b60008115159050919050565b611def81611dda565b82525050565b6000602082019050611e0a6000830184611de6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e4a578082015181840152602081019050611e2f565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e7282611e10565b611e7c8185611e1b565b9350611e8c818560208601611e2c565b611e9581611e56565b840191505092915050565b60006020820190508181036000830152611eba8184611e67565b905092915050565b611ecb81611d21565b8114611ed657600080fd5b50565b600081359050611ee881611ec2565b92915050565b600060208284031215611f0457611f03611bf4565b5b6000611f1284828501611ed9565b91505092915050565b611f2481611c1e565b82525050565b6000602082019050611f3f6000830184611f1b565b92915050565b60008060408385031215611f5c57611f5b611bf4565b5b6000611f6a85828601611c47565b9250506020611f7b85828601611ed9565b9150509250929050565b600080600060608486031215611f9e57611f9d611bf4565b5b6000611fac86828701611c47565b9350506020611fbd86828701611c47565b9250506040611fce86828701611ed9565b9150509250925092565b600060208284031215611fee57611fed611bf4565b5b6000611ffc84828501611c47565b91505092915050565b61200e81611dda565b811461201957600080fd5b50565b60008135905061202b81612005565b92915050565b6000806040838503121561204857612047611bf4565b5b600061205685828601611c47565b92505060206120678582860161201c565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120ae82611e56565b810181811067ffffffffffffffff821117156120cd576120cc612076565b5b80604052505050565b60006120e0611bea565b90506120ec82826120a5565b919050565b600067ffffffffffffffff82111561210c5761210b612076565b5b61211582611e56565b9050602081019050919050565b82818337600083830152505050565b600061214461213f846120f1565b6120d6565b9050828152602081018484840111156121605761215f612071565b5b61216b848285612122565b509392505050565b600082601f83011261218857612187611c5c565b5b8135612198848260208601612131565b91505092915050565b600080600080608085870312156121bb576121ba611bf4565b5b60006121c987828801611c47565b94505060206121da87828801611c47565b93505060406121eb87828801611ed9565b925050606085013567ffffffffffffffff81111561220c5761220b611bf9565b5b61221887828801612173565b91505092959194509250565b6000806040838503121561223b5761223a611bf4565b5b600061224985828601611c47565b925050602061225a85828601611c47565b9150509250929050565b7f4f6e6c79206f776e65722063616e206d696e74204e4654730000000000000000600082015250565b600061229a601883611e1b565b91506122a582612264565b602082019050919050565b600060208201905081810360008301526122c98161228d565b9050919050565b600081905092915050565b60006122e783856122d0565b93506122f4838584612122565b82840190509392505050565b600061230d8284866122db565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061235382611d21565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361238557612384612319565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123d757607f821691505b6020821081036123ea576123e9612390565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061244c602183611e1b565b9150612457826123f0565b604082019050919050565b6000602082019050818103600083015261247b8161243f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006124de603d83611e1b565b91506124e982612482565b604082019050919050565b6000602082019050818103600083015261250d816124d1565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612570602d83611e1b565b915061257b82612514565b604082019050919050565b6000602082019050818103600083015261259f81612563565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006125dc601883611e1b565b91506125e7826125a6565b602082019050919050565b6000602082019050818103600083015261260b816125cf565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061266e602983611e1b565b915061267982612612565b604082019050919050565b6000602082019050818103600083015261269d81612661565b9050919050565b60006126af82611e10565b6126b981856122d0565b93506126c9818560208601611e2c565b80840191505092915050565b60006126e182856126a4565b91506126ed82846126a4565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061272f602083611e1b565b915061273a826126f9565b602082019050919050565b6000602082019050818103600083015261275e81612722565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061279b601c83611e1b565b91506127a682612765565b602082019050919050565b600060208201905081810360008301526127ca8161278e565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061282d602e83611e1b565b9150612838826127d1565b604082019050919050565b6000602082019050818103600083015261285c81612820565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128c57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612888565b6128cf8683612888565b95508019841693508086168417925050509392505050565b6000819050919050565b600061290c61290761290284611d21565b6128e7565b611d21565b9050919050565b6000819050919050565b612926836128f1565b61293a61293282612913565b848454612895565b825550505050565b600090565b61294f612942565b61295a81848461291d565b505050565b5b8181101561297e57612973600082612947565b600181019050612960565b5050565b601f8211156129c35761299481612863565b61299d84612878565b810160208510156129ac578190505b6129c06129b885612878565b83018261295f565b50505b505050565b600082821c905092915050565b60006129e6600019846008026129c8565b1980831691505092915050565b60006129ff83836129d5565b9150826002028217905092915050565b612a1882611e10565b67ffffffffffffffff811115612a3157612a30612076565b5b612a3b82546123bf565b612a46828285612982565b600060209050601f831160018114612a795760008415612a67578287015190505b612a7185826129f3565b865550612ad9565b601f198416612a8786612863565b60005b82811015612aaf57848901518255600182019150602085019450602081019050612a8a565b86831015612acc5784890151612ac8601f8916826129d5565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612b3d602583611e1b565b9150612b4882612ae1565b604082019050919050565b60006020820190508181036000830152612b6c81612b30565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612bcf602483611e1b565b9150612bda82612b73565b604082019050919050565b60006020820190508181036000830152612bfe81612bc2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612c3b601983611e1b565b9150612c4682612c05565b602082019050919050565b60006020820190508181036000830152612c6a81612c2e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612ccd603283611e1b565b9150612cd882612c71565b604082019050919050565b60006020820190508181036000830152612cfc81612cc0565b9050919050565b7f746f6b656e207472616e73666572206e6f7420616c6c6f776564000000000000600082015250565b6000612d39601a83611e1b565b9150612d4482612d03565b602082019050919050565b60006020820190508181036000830152612d6881612d2c565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612d9682612d6f565b612da08185612d7a565b9350612db0818560208601611e2c565b612db981611e56565b840191505092915050565b6000608082019050612dd96000830187611f1b565b612de66020830186611f1b565b612df36040830185611d2b565b8181036060830152612e058184612d8b565b905095945050505050565b600081519050612e1f81611d81565b92915050565b600060208284031215612e3b57612e3a611bf4565b5b6000612e4984828501612e10565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220d192eb24e9e232de7e0af45d6419e9e2be0d65d45adaaffbf7bb2d476539464d64736f6c63430008110033a26469706673582212209174275c8a1ac46f9583110bf1d884571a11572307fbf99370ff94a382d8ad2f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}