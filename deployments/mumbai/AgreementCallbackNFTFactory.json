{
  "address": "0x7966833305d155B6411a0E0bAAD1ec8894F9319F",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum DigitalSignatureTypes.AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "signedPackets",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "totalPackets",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DigitalSignatureTypes.SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "agreementCallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signatureCallback",
              "type": "address"
            }
          ],
          "internalType": "struct DigitalSignatureTypes.Agreement",
          "name": "agreement",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "extraInfo",
          "type": "bytes"
        }
      ],
      "name": "agreementCallback",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DigitalSignatureTypes.AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "signatureCallback",
              "type": "address"
            }
          ],
          "internalType": "struct AgreementCallbackResponse",
          "name": "resp",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e7050f1b81df7e00fcb8f97f4cf5420f4a3e860f45ce4e9fa3a52585e2e57ff",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0x7966833305d155B6411a0E0bAAD1ec8894F9319F",
    "transactionIndex": 7,
    "gasUsed": "3718355",
    "logsBloom": "0x
    "blockHash": "0x9b411d6adac5c2f621c83c19474a5dad131169de40e09c11f0442870c1f9eae2",
    "transactionHash": "0x9e7050f1b81df7e00fcb8f97f4cf5420f4a3e860f45ce4e9fa3a52585e2e57ff",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 29696370,
        "transactionHash": "0x9e7050f1b81df7e00fcb8f97f4cf5420f4a3e860f45ce4e9fa3a52585e2e57ff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013d0bc7b62bd0000000000000000000000000000000000000000000000000003b4d7cfebc1acb90000000000000000000000000000000000000000000000e14c03f66020ea060600000000000000000000000000000000000000000000000003a10713705eefb90000000000000000000000000000000000000000000000e14c17c71c9c4cc306",
        "logIndex": 27,
        "blockHash": "0x9b411d6adac5c2f621c83c19474a5dad131169de40e09c11f0442870c1f9eae2"
      }
    ],
    "blockNumber": 29696370,
    "cumulativeGasUsed": "5344480",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2423ecd37cb32a56ee0ebb00c30ea9a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum DigitalSignatureTypes.AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"signedPackets\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"totalPackets\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct DigitalSignatureTypes.SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"agreementCallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signatureCallback\",\"type\":\"address\"}],\"internalType\":\"struct DigitalSignatureTypes.Agreement\",\"name\":\"agreement\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"extraInfo\",\"type\":\"bytes\"}],\"name\":\"agreementCallback\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DigitalSignatureTypes.AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"signatureCallback\",\"type\":\"address\"}],\"internalType\":\"struct AgreementCallbackResponse\",\"name\":\"resp\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/callbacks/agreements/AgreementCallbackNFTFactory.sol\":\"AgreementCallbackNFTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/callbacks/agreements/AgreementCallbackNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IAgreementCallback.sol\\\";\\nimport \\\"../../types/DigitalSignatureTypes.sol\\\";\\nimport \\\"../../nft/AgreementNFT.sol\\\";\\n\\ncontract AgreementCallbackNFTFactory is IAgreementCallback {\\n  function agreementCallback(\\n    DigitalSignatureTypes.Agreement memory agreement,\\n    bytes memory extraInfo\\n  ) public returns (AgreementCallbackResponse memory resp) {\\n    if (agreement.status == DigitalSignatureTypes.AgreementStatus.NEW) {\\n      AgreementNFT nftContract = new AgreementNFT(\\n        msg.sender,\\n        agreement.identifier,\\n        agreement.identifier,\\n        string(extraInfo)\\n      );\\n\\n      return\\n        AgreementCallbackResponse({\\n          status: agreement.status,\\n          signatureCallback: address(nftContract)\\n        });\\n    } else {\\n      return\\n        AgreementCallbackResponse({\\n          status: agreement.status,\\n          signatureCallback: agreement.signatureCallback\\n        });\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc6f3921a05eca7b8e5f2e1515ce9d229f7f7c010f43f2cde38bf6c75d1a39834\",\"license\":\"MIT\"},\"contracts/callbacks/agreements/IAgreementCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../types/DigitalSignatureTypes.sol\\\";\\n\\nstruct AgreementCallbackResponse {\\n  DigitalSignatureTypes.AgreementStatus status;\\n  address signatureCallback;\\n}\\n\\ninterface IAgreementCallback {\\n  function agreementCallback(\\n    DigitalSignatureTypes.Agreement memory agreement,\\n    bytes memory extraInfo\\n  ) external returns (AgreementCallbackResponse memory resp);\\n}\\n\",\"keccak256\":\"0xf0c186a551466f04483e947ab0465d11ffce13aaaeb2dfaed5b0c91a991af42f\",\"license\":\"MIT\"},\"contracts/callbacks/signatures/ISignatureCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../types/DigitalSignatureTypes.sol\\\";\\n\\ninterface ISignatureCallback {\\n  function signatureCallback(\\n    DigitalSignatureTypes.SignaturePacket memory packet,\\n    bytes memory extraInfo\\n  ) external;\\n}\\n\",\"keccak256\":\"0xfd6ce576eef1437657967451c7b3f654349fea3b7a9c1a7be00c5c37f30ef2aa\",\"license\":\"MIT\"},\"contracts/nft/AgreementNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"../types/DigitalSignatureTypes.sol\\\";\\nimport \\\"../callbacks/signatures/ISignatureCallback.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract AgreementNFT is ISignatureCallback, ERC721URIStorage {\\n  address private _owner;\\n  uint256 private nextTokenId;\\n  string private _imageCID;\\n  mapping(address => mapping(string => uint256)) private _ownerTokens;\\n\\n  constructor(\\n    address owner_,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory imageCID_\\n  ) ERC721(_name, _symbol) {\\n    nextTokenId = 1;\\n    _owner = owner_;\\n    _imageCID = imageCID_;\\n  }\\n\\n  function getImageCID() public view returns (string memory) {\\n    return _imageCID;\\n  }\\n\\n  function signatureCallback(\\n    DigitalSignatureTypes.SignaturePacket memory packet,\\n    bytes memory extraInfo\\n  ) public {\\n    require(_owner == msg.sender, \\\"Only owner can mint NFTs\\\");\\n\\n    string memory tokenURI = string(extraInfo);\\n\\n    _mint(packet.signer, nextTokenId);\\n    _setTokenURI(nextTokenId, tokenURI);\\n    _ownerTokens[packet.signer][tokenURI] = nextTokenId;\\n    nextTokenId++;\\n  }\\n\\n  function verifyByTokenURI(\\n    address signer,\\n    string calldata tokenURI\\n  ) public view returns (bool) {\\n    uint256 tokenId = _ownerTokens[signer][tokenURI];\\n    return _ownerOf(tokenId) == signer;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 firstTokenId,\\n    uint256 batchSize\\n  ) internal virtual override {\\n    require(from == address(0), \\\"token transfer not allowed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xc2f181124bfec424505d5b820de2cfe3d8ee397b051e2639e91f680a14874fa3\",\"license\":\"MIT\"},\"contracts/types/DigitalSignatureTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nlibrary DigitalSignatureTypes {\\n  enum AgreementStatus {\\n    NEW,\\n    PENDING,\\n    COMPLETE,\\n    APPROVED,\\n    REJECTED\\n  }\\n\\n  struct Profile {\\n    uint256 totalAgreements;\\n    uint256 totalSignatures;\\n    address agreementCallback;\\n    address signatureCallback;\\n  }\\n\\n  struct SignatureConstraint {\\n    string identifier;\\n    address signer;\\n    uint256 totalUsed;\\n    uint256 allowedToUse;\\n  }\\n\\n  struct Agreement {\\n    address owner;\\n    AgreementStatus status;\\n    uint256 index;\\n    string identifier;\\n    string cid;\\n    string encryptedCid;\\n    string descriptionCid;\\n    uint8 signedPackets;\\n    uint8 totalPackets;\\n    SignatureConstraint[] constraints;\\n    address agreementCallback;\\n    address signatureCallback;\\n  }\\n\\n  struct SignaturePacket {\\n    address agreementOwner;\\n    uint256 agreementIndex;\\n    uint256 index;\\n    string identifier;\\n    string encryptedCid;\\n    address signer;\\n    uint timestamp;\\n    uint blockNumber;\\n  }\\n}\\n\",\"keccak256\":\"0xa0bc6d3eab7a0278a3ac746034a710d9c5f5dce1ff33cc6af3622b70af55a696\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506142a1806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c806365c4938d1462000033575b600080fd5b6200005160048036038101906200004b91906200089b565b62000069565b604051620000609190620009e4565b60405180910390f35b6200007362000194565b600060048111156200008a576200008962000920565b5b83602001516004811115620000a457620000a362000920565b5b0362000142576000338460600151856060015185604051620000c690620001d9565b620000d5949392919062000a9b565b604051809103906000f080158015620000f2573d6000803e3d6000fd5b5090506040518060400160405280856020015160048111156200011a576200011962000920565b5b81526020018273ffffffffffffffffffffffffffffffffffffffff168152509150506200018e565b60405180604001604052808460200151600481111562000167576200016662000920565b5b815260200184610160015173ffffffffffffffffffffffffffffffffffffffff1681525090505b92915050565b604051806040016040528060006004811115620001b657620001b562000920565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b61376e8062000afe83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024b8262000200565b810181811067ffffffffffffffff821117156200026d576200026c62000211565b5b80604052505050565b600062000282620001e7565b905062000290828262000240565b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002c7826200029a565b9050919050565b620002d981620002ba565b8114620002e557600080fd5b50565b600081359050620002f981620002ce565b92915050565b600581106200030d57600080fd5b50565b6000813590506200032181620002ff565b92915050565b6000819050919050565b6200033c8162000327565b81146200034857600080fd5b50565b6000813590506200035c8162000331565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156200038a576200038962000211565b5b620003958262000200565b9050602081019050919050565b82818337600083830152505050565b6000620003c8620003c2846200036c565b62000276565b905082815260208101848484011115620003e757620003e662000367565b5b620003f4848285620003a2565b509392505050565b600082601f83011262000414576200041362000362565b5b813562000426848260208601620003b1565b91505092915050565b600060ff82169050919050565b62000447816200042f565b81146200045357600080fd5b50565b60008135905062000467816200043c565b92915050565b600067ffffffffffffffff8211156200048b576200048a62000211565b5b602082029050602081019050919050565b600080fd5b600060808284031215620004ba57620004b9620001fb565b5b620004c6608062000276565b9050600082013567ffffffffffffffff811115620004e957620004e862000295565b5b620004f784828501620003fc565b60008301525060206200050d84828501620002e8565b602083015250604062000523848285016200034b565b604083015250606062000539848285016200034b565b60608301525092915050565b60006200055c62000556846200046d565b62000276565b905080838252602082019050602084028301858111156200058257620005816200049c565b5b835b81811015620005d057803567ffffffffffffffff811115620005ab57620005aa62000362565b5b808601620005ba8982620004a1565b8552602085019450505060208101905062000584565b5050509392505050565b600082601f830112620005f257620005f162000362565b5b81356200060484826020860162000545565b91505092915050565b60006101808284031215620006275762000626620001fb565b5b6200063461018062000276565b905060006200064684828501620002e8565b60008301525060206200065c8482850162000310565b602083015250604062000672848285016200034b565b604083015250606082013567ffffffffffffffff81111562000699576200069862000295565b5b620006a784828501620003fc565b606083015250608082013567ffffffffffffffff811115620006ce57620006cd62000295565b5b620006dc84828501620003fc565b60808301525060a082013567ffffffffffffffff81111562000703576200070262000295565b5b6200071184828501620003fc565b60a08301525060c082013567ffffffffffffffff81111562000738576200073762000295565b5b6200074684828501620003fc565b60c08301525060e06200075c8482850162000456565b60e083015250610100620007738482850162000456565b6101008301525061012082013567ffffffffffffffff8111156200079c576200079b62000295565b5b620007aa84828501620005da565b61012083015250610140620007c284828501620002e8565b61014083015250610160620007da84828501620002e8565b6101608301525092915050565b600067ffffffffffffffff82111562000805576200080462000211565b5b620008108262000200565b9050602081019050919050565b6000620008346200082e84620007e7565b62000276565b90508281526020810184848401111562000853576200085262000367565b5b62000860848285620003a2565b509392505050565b600082601f83011262000880576200087f62000362565b5b8135620008928482602086016200081d565b91505092915050565b60008060408385031215620008b557620008b4620001f1565b5b600083013567ffffffffffffffff811115620008d657620008d5620001f6565b5b620008e4858286016200060d565b925050602083013567ffffffffffffffff811115620009085762000907620001f6565b5b620009168582860162000868565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811062000963576200096262000920565b5b50565b600081905062000976826200094f565b919050565b6000620009888262000966565b9050919050565b6200099a816200097b565b82525050565b620009ab81620002ba565b82525050565b604082016000820151620009c960008501826200098f565b506020820151620009de6020850182620009a0565b50505050565b6000604082019050620009fb6000830184620009b1565b92915050565b62000a0c81620002ba565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000a4e57808201518184015260208101905062000a31565b60008484015250505050565b600062000a678262000a12565b62000a73818562000a1d565b935062000a8581856020860162000a2e565b62000a908162000200565b840191505092915050565b600060808201905062000ab2600083018762000a01565b818103602083015262000ac6818662000a5a565b9050818103604083015262000adc818562000a5a565b9050818103606083015262000af2818462000a5a565b90509594505050505056fe60806040523480156200001157600080fd5b506040516200376e3803806200376e8339818101604052810190620000379190620002bc565b828281600090816200004a9190620005d6565b5080600190816200005c9190620005d6565b505050600160088190555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060099081620000b99190620005d6565b5050505050620006bd565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010582620000d8565b9050919050565b6200011781620000f8565b81146200012357600080fd5b50565b60008151905062000137816200010c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001928262000147565b810181811067ffffffffffffffff82111715620001b457620001b362000158565b5b80604052505050565b6000620001c9620000c4565b9050620001d7828262000187565b919050565b600067ffffffffffffffff821115620001fa57620001f962000158565b5b620002058262000147565b9050602081019050919050565b60005b838110156200023257808201518184015260208101905062000215565b60008484015250505050565b6000620002556200024f84620001dc565b620001bd565b90508281526020810184848401111562000274576200027362000142565b5b6200028184828562000212565b509392505050565b600082601f830112620002a157620002a06200013d565b5b8151620002b38482602086016200023e565b91505092915050565b60008060008060808587031215620002d957620002d8620000ce565b5b6000620002e98782880162000126565b945050602085015167ffffffffffffffff8111156200030d576200030c620000d3565b5b6200031b8782880162000289565b935050604085015167ffffffffffffffff8111156200033f576200033e620000d3565b5b6200034d8782880162000289565b925050606085015167ffffffffffffffff811115620003715762000370620000d3565b5b6200037f8782880162000289565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003de57607f821691505b602082108103620003f457620003f362000396565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200045e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200041f565b6200046a86836200041f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004b7620004b1620004ab8462000482565b6200048c565b62000482565b9050919050565b6000819050919050565b620004d38362000496565b620004eb620004e282620004be565b8484546200042c565b825550505050565b600090565b62000502620004f3565b6200050f818484620004c8565b505050565b5b8181101562000537576200052b600082620004f8565b60018101905062000515565b5050565b601f82111562000586576200055081620003fa565b6200055b846200040f565b810160208510156200056b578190505b620005836200057a856200040f565b83018262000514565b50505b505050565b600082821c905092915050565b6000620005ab600019846008026200058b565b1980831691505092915050565b6000620005c6838362000598565b9150826002028217905092915050565b620005e1826200038b565b67ffffffffffffffff811115620005fd57620005fc62000158565b5b620006098254620003c5565b620006168282856200053b565b600060209050601f8311600181146200064e576000841562000639578287015190505b620006458582620005b8565b865550620006b5565b601f1984166200065e86620003fa565b60005b82811015620006885784890151825560018201915060208501945060208101905062000661565b86831015620006a85784890151620006a4601f89168262000598565b8355505b6001600288020188555050505b505050505050565b6130a180620006cd6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063564066f611610097578063a22cb46511610066578063a22cb465146102bf578063b88d4fde146102db578063c87b56dd146102f7578063e985e9c51461032757610100565b8063564066f6146102255780636352211e1461024157806370a082311461027157806395d89b41146102a157610100565b8063095ea7b3116100d3578063095ea7b3146101b357806323b872dd146101cf5780632ada0d54146101eb57806342842e0e1461020957610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc146101535780630883a42e14610183575b600080fd5b61011f600480360381019061011a9190611c04565b610357565b60405161012c9190611c4c565b60405180910390f35b61013d610439565b60405161014a9190611cf7565b60405180910390f35b61016d60048036038101906101689190611d4f565b6104cb565b60405161017a9190611dbd565b60405180910390f35b61019d60048036038101906101989190611e69565b610511565b6040516101aa9190611c4c565b60405180910390f35b6101cd60048036038101906101c89190611ec9565b6105b5565b005b6101e960048036038101906101e49190611f09565b6106cc565b005b6101f361072c565b6040516102009190611cf7565b60405180910390f35b610223600480360381019061021e9190611f09565b6107be565b005b61023f600480360381019061023a9190612239565b6107de565b005b61025b60048036038101906102569190611d4f565b610912565b6040516102689190611dbd565b60405180910390f35b61028b600480360381019061028691906122b1565b610998565b60405161029891906122ed565b60405180910390f35b6102a9610a4f565b6040516102b69190611cf7565b60405180910390f35b6102d960048036038101906102d49190612334565b610ae1565b005b6102f560048036038101906102f09190612374565b610af7565b005b610311600480360381019061030c9190611d4f565b610b59565b60405161031e9190611cf7565b60405180910390f35b610341600480360381019061033c91906123f7565b610c6b565b60405161034e9190611c4c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610432575061043182610cff565b5b9050919050565b60606000805461044890612466565b80601f016020809104026020016040519081016040528092919081815260200182805461047490612466565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b5050505050905090565b60006104d682610d69565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516105639291906124c7565b90815260200160405180910390205490508473ffffffffffffffffffffffffffffffffffffffff1661059482610db4565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b60006105c082610912565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790612552565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661064f610df1565b73ffffffffffffffffffffffffffffffffffffffff16148061067e575061067d81610678610df1565b610c6b565b5b6106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b4906125e4565b60405180910390fd5b6106c78383610df9565b505050565b6106dd6106d7610df1565b82610eb2565b61071c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071390612676565b60405180910390fd5b610727838383610f47565b505050565b60606009805461073b90612466565b80601f016020809104026020016040519081016040528092919081815260200182805461076790612466565b80156107b45780601f10610789576101008083540402835291602001916107b4565b820191906000526020600020905b81548152906001019060200180831161079757829003601f168201915b5050505050905090565b6107d983838360405180602001604052806000815250610af7565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461086e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610865906126e2565b60405180910390fd5b60008190506108838360a00151600854611240565b61088f6008548261145d565b600854600a60008560a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040516108e39190612733565b9081526020016040518091039020819055506008600081548092919061090890612779565b9190505550505050565b60008061091e83610db4565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361098f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109869061280d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff9061289f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610a5e90612466565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8a90612466565b8015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b5050505050905090565b610af3610aec610df1565b83836114ca565b5050565b610b08610b02610df1565b83610eb2565b610b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3e90612676565b60405180910390fd5b610b5384848484611636565b50505050565b6060610b6482610d69565b6000600660008481526020019081526020016000208054610b8490612466565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb090612466565b8015610bfd5780601f10610bd257610100808354040283529160200191610bfd565b820191906000526020600020905b815481529060010190602001808311610be057829003601f168201915b505050505090506000610c0e611692565b90506000815103610c23578192505050610c66565b600082511115610c58578082604051602001610c409291906128bf565b60405160208183030381529060405292505050610c66565b610c61846116a9565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610d7281611711565b610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da89061280d565b60405180910390fd5b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610e6c83610912565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ebe83610912565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f005750610eff8185610c6b565b5b80610f3e57508373ffffffffffffffffffffffffffffffffffffffff16610f26846104cb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f6782610912565b73ffffffffffffffffffffffffffffffffffffffff1614610fbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb490612955565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361102c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611023906129e7565b60405180910390fd5b6110398383836001611752565b8273ffffffffffffffffffffffffffffffffffffffff1661105982610912565b73ffffffffffffffffffffffffffffffffffffffff16146110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612955565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461123b83838360016117c7565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612a53565b60405180910390fd5b6112b881611711565b156112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90612abf565b60405180910390fd5b611306600083836001611752565b61130f81611711565b1561134f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134690612abf565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114596000838360016117c7565b5050565b61146682611711565b6114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149c90612b51565b60405180910390fd5b806006600084815260200190815260200160002090816114c59190612d1d565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152f90612e3b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116299190611c4c565b60405180910390a3505050565b611641848484610f47565b61164d848484846117cd565b61168c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168390612ecd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606116b482610d69565b60006116be611692565b905060008151116116de5760405180602001604052806000815250611709565b806116e884611954565b6040516020016116f99291906128bf565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661173383610db4565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b890612f39565b60405180910390fd5b50505050565b50505050565b60006117ee8473ffffffffffffffffffffffffffffffffffffffff16611a22565b15611947578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611817610df1565b8786866040518563ffffffff1660e01b81526004016118399493929190612fae565b6020604051808303816000875af192505050801561187557506040513d601f19601f82011682018060405250810190611872919061300f565b60015b6118f7573d80600081146118a5576040519150601f19603f3d011682016040523d82523d6000602084013e6118aa565b606091505b5060008151036118ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e690612ecd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061194c565b600190505b949350505050565b60606000600161196384611a45565b01905060008167ffffffffffffffff81111561198257611981611f61565b5b6040519080825280601f01601f1916602001820160405280156119b45781602001600182028036833780820191505090505b509050600082602001820190505b600115611a17578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a0b57611a0a61303c565b5b049450600085036119c2575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611aa3577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611a9957611a9861303c565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ae0576d04ee2d6d415b85acef81000000008381611ad657611ad561303c565b5b0492506020810190505b662386f26fc100008310611b0f57662386f26fc100008381611b0557611b0461303c565b5b0492506010810190505b6305f5e1008310611b38576305f5e1008381611b2e57611b2d61303c565b5b0492506008810190505b6127108310611b5d576127108381611b5357611b5261303c565b5b0492506004810190505b60648310611b805760648381611b7657611b7561303c565b5b0492506002810190505b600a8310611b8f576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611be181611bac565b8114611bec57600080fd5b50565b600081359050611bfe81611bd8565b92915050565b600060208284031215611c1a57611c19611ba2565b5b6000611c2884828501611bef565b91505092915050565b60008115159050919050565b611c4681611c31565b82525050565b6000602082019050611c616000830184611c3d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ca1578082015181840152602081019050611c86565b60008484015250505050565b6000601f19601f8301169050919050565b6000611cc982611c67565b611cd38185611c72565b9350611ce3818560208601611c83565b611cec81611cad565b840191505092915050565b60006020820190508181036000830152611d118184611cbe565b905092915050565b6000819050919050565b611d2c81611d19565b8114611d3757600080fd5b50565b600081359050611d4981611d23565b92915050565b600060208284031215611d6557611d64611ba2565b5b6000611d7384828501611d3a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611da782611d7c565b9050919050565b611db781611d9c565b82525050565b6000602082019050611dd26000830184611dae565b92915050565b611de181611d9c565b8114611dec57600080fd5b50565b600081359050611dfe81611dd8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e2957611e28611e04565b5b8235905067ffffffffffffffff811115611e4657611e45611e09565b5b602083019150836001820283011115611e6257611e61611e0e565b5b9250929050565b600080600060408486031215611e8257611e81611ba2565b5b6000611e9086828701611def565b935050602084013567ffffffffffffffff811115611eb157611eb0611ba7565b5b611ebd86828701611e13565b92509250509250925092565b60008060408385031215611ee057611edf611ba2565b5b6000611eee85828601611def565b9250506020611eff85828601611d3a565b9150509250929050565b600080600060608486031215611f2257611f21611ba2565b5b6000611f3086828701611def565b9350506020611f4186828701611def565b9250506040611f5286828701611d3a565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f9982611cad565b810181811067ffffffffffffffff82111715611fb857611fb7611f61565b5b80604052505050565b6000611fcb611b98565b9050611fd78282611f90565b919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561200157612000611f61565b5b61200a82611cad565b9050602081019050919050565b82818337600083830152505050565b600061203961203484611fe6565b611fc1565b90508281526020810184848401111561205557612054611fe1565b5b612060848285612017565b509392505050565b600082601f83011261207d5761207c611e04565b5b813561208d848260208601612026565b91505092915050565b600061010082840312156120ad576120ac611f5c565b5b6120b8610100611fc1565b905060006120c884828501611def565b60008301525060206120dc84828501611d3a565b60208301525060406120f084828501611d3a565b604083015250606082013567ffffffffffffffff81111561211457612113611fdc565b5b61212084828501612068565b606083015250608082013567ffffffffffffffff81111561214457612143611fdc565b5b61215084828501612068565b60808301525060a061216484828501611def565b60a08301525060c061217884828501611d3a565b60c08301525060e061218c84828501611d3a565b60e08301525092915050565b600067ffffffffffffffff8211156121b3576121b2611f61565b5b6121bc82611cad565b9050602081019050919050565b60006121dc6121d784612198565b611fc1565b9050828152602081018484840111156121f8576121f7611fe1565b5b612203848285612017565b509392505050565b600082601f8301126122205761221f611e04565b5b81356122308482602086016121c9565b91505092915050565b600080604083850312156122505761224f611ba2565b5b600083013567ffffffffffffffff81111561226e5761226d611ba7565b5b61227a85828601612096565b925050602083013567ffffffffffffffff81111561229b5761229a611ba7565b5b6122a78582860161220b565b9150509250929050565b6000602082840312156122c7576122c6611ba2565b5b60006122d584828501611def565b91505092915050565b6122e781611d19565b82525050565b600060208201905061230260008301846122de565b92915050565b61231181611c31565b811461231c57600080fd5b50565b60008135905061232e81612308565b92915050565b6000806040838503121561234b5761234a611ba2565b5b600061235985828601611def565b925050602061236a8582860161231f565b9150509250929050565b6000806000806080858703121561238e5761238d611ba2565b5b600061239c87828801611def565b94505060206123ad87828801611def565b93505060406123be87828801611d3a565b925050606085013567ffffffffffffffff8111156123df576123de611ba7565b5b6123eb8782880161220b565b91505092959194509250565b6000806040838503121561240e5761240d611ba2565b5b600061241c85828601611def565b925050602061242d85828601611def565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061247e57607f821691505b60208210810361249157612490612437565b5b50919050565b600081905092915050565b60006124ae8385612497565b93506124bb838584612017565b82840190509392505050565b60006124d48284866124a2565b91508190509392505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061253c602183611c72565b9150612547826124e0565b604082019050919050565b6000602082019050818103600083015261256b8161252f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006125ce603d83611c72565b91506125d982612572565b604082019050919050565b600060208201905081810360008301526125fd816125c1565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612660602d83611c72565b915061266b82612604565b604082019050919050565b6000602082019050818103600083015261268f81612653565b9050919050565b7f4f6e6c79206f776e65722063616e206d696e74204e4654730000000000000000600082015250565b60006126cc601883611c72565b91506126d782612696565b602082019050919050565b600060208201905081810360008301526126fb816126bf565b9050919050565b600061270d82611c67565b6127178185612497565b9350612727818560208601611c83565b80840191505092915050565b600061273f8284612702565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278482611d19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036127b6576127b561274a565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006127f7601883611c72565b9150612802826127c1565b602082019050919050565b60006020820190508181036000830152612826816127ea565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612889602983611c72565b91506128948261282d565b604082019050919050565b600060208201905081810360008301526128b88161287c565b9050919050565b60006128cb8285612702565b91506128d78284612702565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061293f602583611c72565b915061294a826128e3565b604082019050919050565b6000602082019050818103600083015261296e81612932565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129d1602483611c72565b91506129dc82612975565b604082019050919050565b60006020820190508181036000830152612a00816129c4565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612a3d602083611c72565b9150612a4882612a07565b602082019050919050565b60006020820190508181036000830152612a6c81612a30565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612aa9601c83611c72565b9150612ab482612a73565b602082019050919050565b60006020820190508181036000830152612ad881612a9c565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612b3b602e83611c72565b9150612b4682612adf565b604082019050919050565b60006020820190508181036000830152612b6a81612b2e565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612bd37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b96565b612bdd8683612b96565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c1a612c15612c1084611d19565b612bf5565b611d19565b9050919050565b6000819050919050565b612c3483612bff565b612c48612c4082612c21565b848454612ba3565b825550505050565b600090565b612c5d612c50565b612c68818484612c2b565b505050565b5b81811015612c8c57612c81600082612c55565b600181019050612c6e565b5050565b601f821115612cd157612ca281612b71565b612cab84612b86565b81016020851015612cba578190505b612cce612cc685612b86565b830182612c6d565b50505b505050565b600082821c905092915050565b6000612cf460001984600802612cd6565b1980831691505092915050565b6000612d0d8383612ce3565b9150826002028217905092915050565b612d2682611c67565b67ffffffffffffffff811115612d3f57612d3e611f61565b5b612d498254612466565b612d54828285612c90565b600060209050601f831160018114612d875760008415612d75578287015190505b612d7f8582612d01565b865550612de7565b601f198416612d9586612b71565b60005b82811015612dbd57848901518255600182019150602085019450602081019050612d98565b86831015612dda5784890151612dd6601f891682612ce3565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612e25601983611c72565b9150612e3082612def565b602082019050919050565b60006020820190508181036000830152612e5481612e18565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612eb7603283611c72565b9150612ec282612e5b565b604082019050919050565b60006020820190508181036000830152612ee681612eaa565b9050919050565b7f746f6b656e207472616e73666572206e6f7420616c6c6f776564000000000000600082015250565b6000612f23601a83611c72565b9150612f2e82612eed565b602082019050919050565b60006020820190508181036000830152612f5281612f16565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612f8082612f59565b612f8a8185612f64565b9350612f9a818560208601611c83565b612fa381611cad565b840191505092915050565b6000608082019050612fc36000830187611dae565b612fd06020830186611dae565b612fdd60408301856122de565b8181036060830152612fef8184612f75565b905095945050505050565b60008151905061300981611bd8565b92915050565b60006020828403121561302557613024611ba2565b5b600061303384828501612ffa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220a764be28e77eb864ec8f2e45292ed3b381693a2e2414e30b944f66880a100e5764736f6c63430008110033a2646970667358221220162796088c2552908a4df59bfa24f588857354add79369312a0dd13c435cf2e164736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c806365c4938d1462000033575b600080fd5b6200005160048036038101906200004b91906200089b565b62000069565b604051620000609190620009e4565b60405180910390f35b6200007362000194565b600060048111156200008a576200008962000920565b5b83602001516004811115620000a457620000a362000920565b5b0362000142576000338460600151856060015185604051620000c690620001d9565b620000d5949392919062000a9b565b604051809103906000f080158015620000f2573d6000803e3d6000fd5b5090506040518060400160405280856020015160048111156200011a576200011962000920565b5b81526020018273ffffffffffffffffffffffffffffffffffffffff168152509150506200018e565b60405180604001604052808460200151600481111562000167576200016662000920565b5b815260200184610160015173ffffffffffffffffffffffffffffffffffffffff1681525090505b92915050565b604051806040016040528060006004811115620001b657620001b562000920565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b61376e8062000afe83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024b8262000200565b810181811067ffffffffffffffff821117156200026d576200026c62000211565b5b80604052505050565b600062000282620001e7565b905062000290828262000240565b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002c7826200029a565b9050919050565b620002d981620002ba565b8114620002e557600080fd5b50565b600081359050620002f981620002ce565b92915050565b600581106200030d57600080fd5b50565b6000813590506200032181620002ff565b92915050565b6000819050919050565b6200033c8162000327565b81146200034857600080fd5b50565b6000813590506200035c8162000331565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156200038a576200038962000211565b5b620003958262000200565b9050602081019050919050565b82818337600083830152505050565b6000620003c8620003c2846200036c565b62000276565b905082815260208101848484011115620003e757620003e662000367565b5b620003f4848285620003a2565b509392505050565b600082601f83011262000414576200041362000362565b5b813562000426848260208601620003b1565b91505092915050565b600060ff82169050919050565b62000447816200042f565b81146200045357600080fd5b50565b60008135905062000467816200043c565b92915050565b600067ffffffffffffffff8211156200048b576200048a62000211565b5b602082029050602081019050919050565b600080fd5b600060808284031215620004ba57620004b9620001fb565b5b620004c6608062000276565b9050600082013567ffffffffffffffff811115620004e957620004e862000295565b5b620004f784828501620003fc565b60008301525060206200050d84828501620002e8565b602083015250604062000523848285016200034b565b604083015250606062000539848285016200034b565b60608301525092915050565b60006200055c62000556846200046d565b62000276565b905080838252602082019050602084028301858111156200058257620005816200049c565b5b835b81811015620005d057803567ffffffffffffffff811115620005ab57620005aa62000362565b5b808601620005ba8982620004a1565b8552602085019450505060208101905062000584565b5050509392505050565b600082601f830112620005f257620005f162000362565b5b81356200060484826020860162000545565b91505092915050565b60006101808284031215620006275762000626620001fb565b5b6200063461018062000276565b905060006200064684828501620002e8565b60008301525060206200065c8482850162000310565b602083015250604062000672848285016200034b565b604083015250606082013567ffffffffffffffff81111562000699576200069862000295565b5b620006a784828501620003fc565b606083015250608082013567ffffffffffffffff811115620006ce57620006cd62000295565b5b620006dc84828501620003fc565b60808301525060a082013567ffffffffffffffff81111562000703576200070262000295565b5b6200071184828501620003fc565b60a08301525060c082013567ffffffffffffffff81111562000738576200073762000295565b5b6200074684828501620003fc565b60c08301525060e06200075c8482850162000456565b60e083015250610100620007738482850162000456565b6101008301525061012082013567ffffffffffffffff8111156200079c576200079b62000295565b5b620007aa84828501620005da565b61012083015250610140620007c284828501620002e8565b61014083015250610160620007da84828501620002e8565b6101608301525092915050565b600067ffffffffffffffff82111562000805576200080462000211565b5b620008108262000200565b9050602081019050919050565b6000620008346200082e84620007e7565b62000276565b90508281526020810184848401111562000853576200085262000367565b5b62000860848285620003a2565b509392505050565b600082601f83011262000880576200087f62000362565b5b8135620008928482602086016200081d565b91505092915050565b60008060408385031215620008b557620008b4620001f1565b5b600083013567ffffffffffffffff811115620008d657620008d5620001f6565b5b620008e4858286016200060d565b925050602083013567ffffffffffffffff811115620009085762000907620001f6565b5b620009168582860162000868565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811062000963576200096262000920565b5b50565b600081905062000976826200094f565b919050565b6000620009888262000966565b9050919050565b6200099a816200097b565b82525050565b620009ab81620002ba565b82525050565b604082016000820151620009c960008501826200098f565b506020820151620009de6020850182620009a0565b50505050565b6000604082019050620009fb6000830184620009b1565b92915050565b62000a0c81620002ba565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000a4e57808201518184015260208101905062000a31565b60008484015250505050565b600062000a678262000a12565b62000a73818562000a1d565b935062000a8581856020860162000a2e565b62000a908162000200565b840191505092915050565b600060808201905062000ab2600083018762000a01565b818103602083015262000ac6818662000a5a565b9050818103604083015262000adc818562000a5a565b9050818103606083015262000af2818462000a5a565b90509594505050505056fe60806040523480156200001157600080fd5b506040516200376e3803806200376e8339818101604052810190620000379190620002bc565b828281600090816200004a9190620005d6565b5080600190816200005c9190620005d6565b505050600160088190555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060099081620000b99190620005d6565b5050505050620006bd565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010582620000d8565b9050919050565b6200011781620000f8565b81146200012357600080fd5b50565b60008151905062000137816200010c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001928262000147565b810181811067ffffffffffffffff82111715620001b457620001b362000158565b5b80604052505050565b6000620001c9620000c4565b9050620001d7828262000187565b919050565b600067ffffffffffffffff821115620001fa57620001f962000158565b5b620002058262000147565b9050602081019050919050565b60005b838110156200023257808201518184015260208101905062000215565b60008484015250505050565b6000620002556200024f84620001dc565b620001bd565b90508281526020810184848401111562000274576200027362000142565b5b6200028184828562000212565b509392505050565b600082601f830112620002a157620002a06200013d565b5b8151620002b38482602086016200023e565b91505092915050565b60008060008060808587031215620002d957620002d8620000ce565b5b6000620002e98782880162000126565b945050602085015167ffffffffffffffff8111156200030d576200030c620000d3565b5b6200031b8782880162000289565b935050604085015167ffffffffffffffff8111156200033f576200033e620000d3565b5b6200034d8782880162000289565b925050606085015167ffffffffffffffff811115620003715762000370620000d3565b5b6200037f8782880162000289565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003de57607f821691505b602082108103620003f457620003f362000396565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200045e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200041f565b6200046a86836200041f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004b7620004b1620004ab8462000482565b6200048c565b62000482565b9050919050565b6000819050919050565b620004d38362000496565b620004eb620004e282620004be565b8484546200042c565b825550505050565b600090565b62000502620004f3565b6200050f818484620004c8565b505050565b5b8181101562000537576200052b600082620004f8565b60018101905062000515565b5050565b601f82111562000586576200055081620003fa565b6200055b846200040f565b810160208510156200056b578190505b620005836200057a856200040f565b83018262000514565b50505b505050565b600082821c905092915050565b6000620005ab600019846008026200058b565b1980831691505092915050565b6000620005c6838362000598565b9150826002028217905092915050565b620005e1826200038b565b67ffffffffffffffff811115620005fd57620005fc62000158565b5b620006098254620003c5565b620006168282856200053b565b600060209050601f8311600181146200064e576000841562000639578287015190505b620006458582620005b8565b865550620006b5565b601f1984166200065e86620003fa565b60005b82811015620006885784890151825560018201915060208501945060208101905062000661565b86831015620006a85784890151620006a4601f89168262000598565b8355505b6001600288020188555050505b505050505050565b6130a180620006cd6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063564066f611610097578063a22cb46511610066578063a22cb465146102bf578063b88d4fde146102db578063c87b56dd146102f7578063e985e9c51461032757610100565b8063564066f6146102255780636352211e1461024157806370a082311461027157806395d89b41146102a157610100565b8063095ea7b3116100d3578063095ea7b3146101b357806323b872dd146101cf5780632ada0d54146101eb57806342842e0e1461020957610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc146101535780630883a42e14610183575b600080fd5b61011f600480360381019061011a9190611c04565b610357565b60405161012c9190611c4c565b60405180910390f35b61013d610439565b60405161014a9190611cf7565b60405180910390f35b61016d60048036038101906101689190611d4f565b6104cb565b60405161017a9190611dbd565b60405180910390f35b61019d60048036038101906101989190611e69565b610511565b6040516101aa9190611c4c565b60405180910390f35b6101cd60048036038101906101c89190611ec9565b6105b5565b005b6101e960048036038101906101e49190611f09565b6106cc565b005b6101f361072c565b6040516102009190611cf7565b60405180910390f35b610223600480360381019061021e9190611f09565b6107be565b005b61023f600480360381019061023a9190612239565b6107de565b005b61025b60048036038101906102569190611d4f565b610912565b6040516102689190611dbd565b60405180910390f35b61028b600480360381019061028691906122b1565b610998565b60405161029891906122ed565b60405180910390f35b6102a9610a4f565b6040516102b69190611cf7565b60405180910390f35b6102d960048036038101906102d49190612334565b610ae1565b005b6102f560048036038101906102f09190612374565b610af7565b005b610311600480360381019061030c9190611d4f565b610b59565b60405161031e9190611cf7565b60405180910390f35b610341600480360381019061033c91906123f7565b610c6b565b60405161034e9190611c4c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610432575061043182610cff565b5b9050919050565b60606000805461044890612466565b80601f016020809104026020016040519081016040528092919081815260200182805461047490612466565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b5050505050905090565b60006104d682610d69565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084846040516105639291906124c7565b90815260200160405180910390205490508473ffffffffffffffffffffffffffffffffffffffff1661059482610db4565b73ffffffffffffffffffffffffffffffffffffffff16149150509392505050565b60006105c082610912565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790612552565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661064f610df1565b73ffffffffffffffffffffffffffffffffffffffff16148061067e575061067d81610678610df1565b610c6b565b5b6106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b4906125e4565b60405180910390fd5b6106c78383610df9565b505050565b6106dd6106d7610df1565b82610eb2565b61071c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071390612676565b60405180910390fd5b610727838383610f47565b505050565b60606009805461073b90612466565b80601f016020809104026020016040519081016040528092919081815260200182805461076790612466565b80156107b45780601f10610789576101008083540402835291602001916107b4565b820191906000526020600020905b81548152906001019060200180831161079757829003601f168201915b5050505050905090565b6107d983838360405180602001604052806000815250610af7565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461086e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610865906126e2565b60405180910390fd5b60008190506108838360a00151600854611240565b61088f6008548261145d565b600854600a60008560a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040516108e39190612733565b9081526020016040518091039020819055506008600081548092919061090890612779565b9190505550505050565b60008061091e83610db4565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361098f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109869061280d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff9061289f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610a5e90612466565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8a90612466565b8015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b5050505050905090565b610af3610aec610df1565b83836114ca565b5050565b610b08610b02610df1565b83610eb2565b610b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3e90612676565b60405180910390fd5b610b5384848484611636565b50505050565b6060610b6482610d69565b6000600660008481526020019081526020016000208054610b8490612466565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb090612466565b8015610bfd5780601f10610bd257610100808354040283529160200191610bfd565b820191906000526020600020905b815481529060010190602001808311610be057829003601f168201915b505050505090506000610c0e611692565b90506000815103610c23578192505050610c66565b600082511115610c58578082604051602001610c409291906128bf565b60405160208183030381529060405292505050610c66565b610c61846116a9565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610d7281611711565b610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da89061280d565b60405180910390fd5b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610e6c83610912565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ebe83610912565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f005750610eff8185610c6b565b5b80610f3e57508373ffffffffffffffffffffffffffffffffffffffff16610f26846104cb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f6782610912565b73ffffffffffffffffffffffffffffffffffffffff1614610fbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb490612955565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361102c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611023906129e7565b60405180910390fd5b6110398383836001611752565b8273ffffffffffffffffffffffffffffffffffffffff1661105982610912565b73ffffffffffffffffffffffffffffffffffffffff16146110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612955565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461123b83838360016117c7565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612a53565b60405180910390fd5b6112b881611711565b156112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90612abf565b60405180910390fd5b611306600083836001611752565b61130f81611711565b1561134f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134690612abf565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114596000838360016117c7565b5050565b61146682611711565b6114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149c90612b51565b60405180910390fd5b806006600084815260200190815260200160002090816114c59190612d1d565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152f90612e3b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116299190611c4c565b60405180910390a3505050565b611641848484610f47565b61164d848484846117cd565b61168c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168390612ecd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606116b482610d69565b60006116be611692565b905060008151116116de5760405180602001604052806000815250611709565b806116e884611954565b6040516020016116f99291906128bf565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661173383610db4565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b890612f39565b60405180910390fd5b50505050565b50505050565b60006117ee8473ffffffffffffffffffffffffffffffffffffffff16611a22565b15611947578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611817610df1565b8786866040518563ffffffff1660e01b81526004016118399493929190612fae565b6020604051808303816000875af192505050801561187557506040513d601f19601f82011682018060405250810190611872919061300f565b60015b6118f7573d80600081146118a5576040519150601f19603f3d011682016040523d82523d6000602084013e6118aa565b606091505b5060008151036118ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e690612ecd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061194c565b600190505b949350505050565b60606000600161196384611a45565b01905060008167ffffffffffffffff81111561198257611981611f61565b5b6040519080825280601f01601f1916602001820160405280156119b45781602001600182028036833780820191505090505b509050600082602001820190505b600115611a17578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a0b57611a0a61303c565b5b049450600085036119c2575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611aa3577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611a9957611a9861303c565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611ae0576d04ee2d6d415b85acef81000000008381611ad657611ad561303c565b5b0492506020810190505b662386f26fc100008310611b0f57662386f26fc100008381611b0557611b0461303c565b5b0492506010810190505b6305f5e1008310611b38576305f5e1008381611b2e57611b2d61303c565b5b0492506008810190505b6127108310611b5d576127108381611b5357611b5261303c565b5b0492506004810190505b60648310611b805760648381611b7657611b7561303c565b5b0492506002810190505b600a8310611b8f576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611be181611bac565b8114611bec57600080fd5b50565b600081359050611bfe81611bd8565b92915050565b600060208284031215611c1a57611c19611ba2565b5b6000611c2884828501611bef565b91505092915050565b60008115159050919050565b611c4681611c31565b82525050565b6000602082019050611c616000830184611c3d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ca1578082015181840152602081019050611c86565b60008484015250505050565b6000601f19601f8301169050919050565b6000611cc982611c67565b611cd38185611c72565b9350611ce3818560208601611c83565b611cec81611cad565b840191505092915050565b60006020820190508181036000830152611d118184611cbe565b905092915050565b6000819050919050565b611d2c81611d19565b8114611d3757600080fd5b50565b600081359050611d4981611d23565b92915050565b600060208284031215611d6557611d64611ba2565b5b6000611d7384828501611d3a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611da782611d7c565b9050919050565b611db781611d9c565b82525050565b6000602082019050611dd26000830184611dae565b92915050565b611de181611d9c565b8114611dec57600080fd5b50565b600081359050611dfe81611dd8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e2957611e28611e04565b5b8235905067ffffffffffffffff811115611e4657611e45611e09565b5b602083019150836001820283011115611e6257611e61611e0e565b5b9250929050565b600080600060408486031215611e8257611e81611ba2565b5b6000611e9086828701611def565b935050602084013567ffffffffffffffff811115611eb157611eb0611ba7565b5b611ebd86828701611e13565b92509250509250925092565b60008060408385031215611ee057611edf611ba2565b5b6000611eee85828601611def565b9250506020611eff85828601611d3a565b9150509250929050565b600080600060608486031215611f2257611f21611ba2565b5b6000611f3086828701611def565b9350506020611f4186828701611def565b9250506040611f5286828701611d3a565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f9982611cad565b810181811067ffffffffffffffff82111715611fb857611fb7611f61565b5b80604052505050565b6000611fcb611b98565b9050611fd78282611f90565b919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561200157612000611f61565b5b61200a82611cad565b9050602081019050919050565b82818337600083830152505050565b600061203961203484611fe6565b611fc1565b90508281526020810184848401111561205557612054611fe1565b5b612060848285612017565b509392505050565b600082601f83011261207d5761207c611e04565b5b813561208d848260208601612026565b91505092915050565b600061010082840312156120ad576120ac611f5c565b5b6120b8610100611fc1565b905060006120c884828501611def565b60008301525060206120dc84828501611d3a565b60208301525060406120f084828501611d3a565b604083015250606082013567ffffffffffffffff81111561211457612113611fdc565b5b61212084828501612068565b606083015250608082013567ffffffffffffffff81111561214457612143611fdc565b5b61215084828501612068565b60808301525060a061216484828501611def565b60a08301525060c061217884828501611d3a565b60c08301525060e061218c84828501611d3a565b60e08301525092915050565b600067ffffffffffffffff8211156121b3576121b2611f61565b5b6121bc82611cad565b9050602081019050919050565b60006121dc6121d784612198565b611fc1565b9050828152602081018484840111156121f8576121f7611fe1565b5b612203848285612017565b509392505050565b600082601f8301126122205761221f611e04565b5b81356122308482602086016121c9565b91505092915050565b600080604083850312156122505761224f611ba2565b5b600083013567ffffffffffffffff81111561226e5761226d611ba7565b5b61227a85828601612096565b925050602083013567ffffffffffffffff81111561229b5761229a611ba7565b5b6122a78582860161220b565b9150509250929050565b6000602082840312156122c7576122c6611ba2565b5b60006122d584828501611def565b91505092915050565b6122e781611d19565b82525050565b600060208201905061230260008301846122de565b92915050565b61231181611c31565b811461231c57600080fd5b50565b60008135905061232e81612308565b92915050565b6000806040838503121561234b5761234a611ba2565b5b600061235985828601611def565b925050602061236a8582860161231f565b9150509250929050565b6000806000806080858703121561238e5761238d611ba2565b5b600061239c87828801611def565b94505060206123ad87828801611def565b93505060406123be87828801611d3a565b925050606085013567ffffffffffffffff8111156123df576123de611ba7565b5b6123eb8782880161220b565b91505092959194509250565b6000806040838503121561240e5761240d611ba2565b5b600061241c85828601611def565b925050602061242d85828601611def565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061247e57607f821691505b60208210810361249157612490612437565b5b50919050565b600081905092915050565b60006124ae8385612497565b93506124bb838584612017565b82840190509392505050565b60006124d48284866124a2565b91508190509392505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061253c602183611c72565b9150612547826124e0565b604082019050919050565b6000602082019050818103600083015261256b8161252f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006125ce603d83611c72565b91506125d982612572565b604082019050919050565b600060208201905081810360008301526125fd816125c1565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612660602d83611c72565b915061266b82612604565b604082019050919050565b6000602082019050818103600083015261268f81612653565b9050919050565b7f4f6e6c79206f776e65722063616e206d696e74204e4654730000000000000000600082015250565b60006126cc601883611c72565b91506126d782612696565b602082019050919050565b600060208201905081810360008301526126fb816126bf565b9050919050565b600061270d82611c67565b6127178185612497565b9350612727818560208601611c83565b80840191505092915050565b600061273f8284612702565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278482611d19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036127b6576127b561274a565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006127f7601883611c72565b9150612802826127c1565b602082019050919050565b60006020820190508181036000830152612826816127ea565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612889602983611c72565b91506128948261282d565b604082019050919050565b600060208201905081810360008301526128b88161287c565b9050919050565b60006128cb8285612702565b91506128d78284612702565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061293f602583611c72565b915061294a826128e3565b604082019050919050565b6000602082019050818103600083015261296e81612932565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129d1602483611c72565b91506129dc82612975565b604082019050919050565b60006020820190508181036000830152612a00816129c4565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612a3d602083611c72565b9150612a4882612a07565b602082019050919050565b60006020820190508181036000830152612a6c81612a30565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612aa9601c83611c72565b9150612ab482612a73565b602082019050919050565b60006020820190508181036000830152612ad881612a9c565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612b3b602e83611c72565b9150612b4682612adf565b604082019050919050565b60006020820190508181036000830152612b6a81612b2e565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612bd37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b96565b612bdd8683612b96565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c1a612c15612c1084611d19565b612bf5565b611d19565b9050919050565b6000819050919050565b612c3483612bff565b612c48612c4082612c21565b848454612ba3565b825550505050565b600090565b612c5d612c50565b612c68818484612c2b565b505050565b5b81811015612c8c57612c81600082612c55565b600181019050612c6e565b5050565b601f821115612cd157612ca281612b71565b612cab84612b86565b81016020851015612cba578190505b612cce612cc685612b86565b830182612c6d565b50505b505050565b600082821c905092915050565b6000612cf460001984600802612cd6565b1980831691505092915050565b6000612d0d8383612ce3565b9150826002028217905092915050565b612d2682611c67565b67ffffffffffffffff811115612d3f57612d3e611f61565b5b612d498254612466565b612d54828285612c90565b600060209050601f831160018114612d875760008415612d75578287015190505b612d7f8582612d01565b865550612de7565b601f198416612d9586612b71565b60005b82811015612dbd57848901518255600182019150602085019450602081019050612d98565b86831015612dda5784890151612dd6601f891682612ce3565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612e25601983611c72565b9150612e3082612def565b602082019050919050565b60006020820190508181036000830152612e5481612e18565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612eb7603283611c72565b9150612ec282612e5b565b604082019050919050565b60006020820190508181036000830152612ee681612eaa565b9050919050565b7f746f6b656e207472616e73666572206e6f7420616c6c6f776564000000000000600082015250565b6000612f23601a83611c72565b9150612f2e82612eed565b602082019050919050565b60006020820190508181036000830152612f5281612f16565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612f8082612f59565b612f8a8185612f64565b9350612f9a818560208601611c83565b612fa381611cad565b840191505092915050565b6000608082019050612fc36000830187611dae565b612fd06020830186611dae565b612fdd60408301856122de565b8181036060830152612fef8184612f75565b905095945050505050565b60008151905061300981611bd8565b92915050565b60006020828403121561302557613024611ba2565b5b600061303384828501612ffa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220a764be28e77eb864ec8f2e45292ed3b381693a2e2414e30b944f66880a100e5764736f6c63430008110033a2646970667358221220162796088c2552908a4df59bfa24f588857354add79369312a0dd13c435cf2e164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}