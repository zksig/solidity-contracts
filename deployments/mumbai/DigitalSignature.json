{
  "address": "0xe98a7d8Dafc6b6f9c55E1382eF1EB1996edcA4d4",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DigitalSignatureTypes.SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "agreementCallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signatureCallback",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "extraInfo",
              "type": "bytes"
            }
          ],
          "internalType": "struct CreateAgreementParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createAgreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getAgreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum DigitalSignatureTypes.AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "descriptionCid",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "signedPackets",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "totalPackets",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "identifier",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "signer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowedToUse",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DigitalSignatureTypes.SignatureConstraint[]",
              "name": "constraints",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "agreementCallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signatureCallback",
              "type": "address"
            }
          ],
          "internalType": "struct DigitalSignatureTypes.Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAgreements",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSignatures",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "agreementCallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signatureCallback",
              "type": "address"
            }
          ],
          "internalType": "struct DigitalSignatureTypes.Profile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "limit",
          "type": "uint8"
        }
      ],
      "name": "getSignatures",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct DigitalSignatureTypes.SignaturePacket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agreementCallback",
          "type": "address"
        }
      ],
      "name": "setProfileAgreementCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signatureCallback",
          "type": "address"
        }
      ],
      "name": "setProfileSignatureCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agreementOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "agreementIndex",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedCid",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "extraInfo",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "sign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd08d7e154711d5bc99a988668423aaffff2f7142fb652d972f3bc1bf3f911f6",
  "receipt": {
    "to": null,
    "from": "0xa96bb1719fa7f78b8B2d3c24BBc79e52Ae9a3988",
    "contractAddress": "0xe98a7d8Dafc6b6f9c55E1382eF1EB1996edcA4d4",
    "transactionIndex": 13,
    "gasUsed": "3501087",
    "logsBloom": "0x
    "blockHash": "0x2b57e0274860c933df1598f629b78834ba05a5022e68052c2df3b3f542abbd06",
    "transactionHash": "0xbd08d7e154711d5bc99a988668423aaffff2f7142fb652d972f3bc1bf3f911f6",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 29696373,
        "transactionHash": "0xbd08d7e154711d5bc99a988668423aaffff2f7142fb652d972f3bc1bf3f911f6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a96bb1719fa7f78b8b2d3c24bbc79e52ae9a3988",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012a8548271b10000000000000000000000000000000000000000000000000003a107136c9a65b60000000000000000000000000000000000000000000000e14c6bfd43c153c60b000000000000000000000000000000000000000000000000038e5ebeea28b4b60000000000000000000000000000000000000000000000e14c7ea59843c5770b",
        "logIndex": 51,
        "blockHash": "0x2b57e0274860c933df1598f629b78834ba05a5022e68052c2df3b3f542abbd06"
      }
    ],
    "blockNumber": 29696373,
    "cumulativeGasUsed": "6823659",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "2423ecd37cb32a56ee0ebb00c30ea9a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct DigitalSignatureTypes.SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"agreementCallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signatureCallback\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraInfo\",\"type\":\"bytes\"}],\"internalType\":\"struct CreateAgreementParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createAgreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getAgreements\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum DigitalSignatureTypes.AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descriptionCid\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"signedPackets\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"totalPackets\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedToUse\",\"type\":\"uint256\"}],\"internalType\":\"struct DigitalSignatureTypes.SignatureConstraint[]\",\"name\":\"constraints\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"agreementCallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signatureCallback\",\"type\":\"address\"}],\"internalType\":\"struct DigitalSignatureTypes.Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAgreements\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSignatures\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"agreementCallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signatureCallback\",\"type\":\"address\"}],\"internalType\":\"struct DigitalSignatureTypes.Profile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct DigitalSignatureTypes.SignaturePacket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementCallback\",\"type\":\"address\"}],\"name\":\"setProfileAgreementCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signatureCallback\",\"type\":\"address\"}],\"name\":\"setProfileSignatureCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agreementOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agreementIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedCid\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"extraInfo\",\"type\":\"bytes\"}],\"internalType\":\"struct SignParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DigitalSignature.sol\":\"DigitalSignature\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DigitalSignature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./nft/IAgreementNFT.sol\\\";\\nimport \\\"./nft/AgreementNFTFactory.sol\\\";\\nimport \\\"./callbacks/agreements/IAgreementCallback.sol\\\";\\nimport \\\"./callbacks/signatures/ISignatureCallback.sol\\\";\\nimport \\\"./types/DigitalSignatureTypes.sol\\\";\\n\\nstruct CreateAgreementParams {\\n  string identifier;\\n  string cid;\\n  string encryptedCid;\\n  string descriptionCid;\\n  DigitalSignatureTypes.SignatureConstraint[] constraints;\\n  address agreementCallback;\\n  address signatureCallback;\\n  bytes extraInfo;\\n}\\n\\nstruct SignParams {\\n  address agreementOwner;\\n  uint256 agreementIndex;\\n  string identifier;\\n  string encryptedCid;\\n  bytes extraInfo;\\n}\\n\\ncontract DigitalSignature {\\n  mapping(address => DigitalSignatureTypes.Profile) profiles;\\n  mapping(address => mapping(uint256 => DigitalSignatureTypes.Agreement)) agreements;\\n  mapping(address => mapping(uint256 => DigitalSignatureTypes.SignaturePacket)) packets;\\n\\n  function getProfile()\\n    public\\n    view\\n    returns (DigitalSignatureTypes.Profile memory)\\n  {\\n    return profiles[tx.origin];\\n  }\\n\\n  function setProfileAgreementCallback(address agreementCallback) public {\\n    DigitalSignatureTypes.Profile storage profile = profiles[tx.origin];\\n    profile.agreementCallback = agreementCallback;\\n  }\\n\\n  function setProfileSignatureCallback(address signatureCallback) public {\\n    DigitalSignatureTypes.Profile storage profile = profiles[tx.origin];\\n    profile.signatureCallback = signatureCallback;\\n  }\\n\\n  function createAgreement(\\n    CreateAgreementParams memory params\\n  ) public returns (uint256) {\\n    DigitalSignatureTypes.Profile storage profile = profiles[tx.origin];\\n    DigitalSignatureTypes.Agreement storage agreement = agreements[tx.origin][\\n      profile.totalAgreements\\n    ];\\n\\n    agreement.owner = tx.origin;\\n    agreement.status = DigitalSignatureTypes.AgreementStatus.NEW;\\n    agreement.index = profile.totalAgreements;\\n    agreement.identifier = params.identifier;\\n    agreement.cid = params.cid;\\n    agreement.encryptedCid = params.encryptedCid;\\n    agreement.descriptionCid = params.descriptionCid;\\n    agreement.signedPackets = 0;\\n    agreement.totalPackets = uint8(params.constraints.length);\\n    agreement.agreementCallback = params.agreementCallback;\\n\\n    for (uint i = 0; i < params.constraints.length; i++) {\\n      agreement.constraints.push(params.constraints[i]);\\n    }\\n\\n    _profileAgreementCallback(profile, agreement, params.extraInfo);\\n    _agreementCallback(agreement, params.extraInfo);\\n\\n    if (agreement.status == DigitalSignatureTypes.AgreementStatus.NEW) {\\n      agreement.status = DigitalSignatureTypes.AgreementStatus.PENDING;\\n    }\\n\\n    return profile.totalAgreements++;\\n  }\\n\\n  function _profileAgreementCallback(\\n    DigitalSignatureTypes.Profile storage profile,\\n    DigitalSignatureTypes.Agreement storage agreement,\\n    bytes memory extraInfo\\n  ) internal {\\n    if (profile.agreementCallback == address(0)) {\\n      return;\\n    }\\n\\n    IAgreementCallback cb = IAgreementCallback(profile.agreementCallback);\\n    AgreementCallbackResponse memory resp = cb.agreementCallback(\\n      agreement,\\n      extraInfo\\n    );\\n    agreement.status = resp.status;\\n    agreement.signatureCallback = resp.signatureCallback;\\n  }\\n\\n  function _agreementCallback(\\n    DigitalSignatureTypes.Agreement storage agreement,\\n    bytes memory extraInfo\\n  ) internal {\\n    if (agreement.agreementCallback == address(0)) {\\n      return;\\n    }\\n\\n    IAgreementCallback cb = IAgreementCallback(agreement.agreementCallback);\\n    AgreementCallbackResponse memory resp = cb.agreementCallback(\\n      agreement,\\n      extraInfo\\n    );\\n    agreement.status = resp.status;\\n    agreement.signatureCallback = resp.signatureCallback;\\n  }\\n\\n  function sign(SignParams calldata params) public returns (uint256) {\\n    DigitalSignatureTypes.Agreement storage agreement = agreements[\\n      params.agreementOwner\\n    ][params.agreementIndex];\\n    require(agreement.owner == params.agreementOwner, \\\"Invalid agreement\\\");\\n    require(\\n      agreement.status == DigitalSignatureTypes.AgreementStatus.PENDING,\\n      \\\"Agreement is not PENDING\\\"\\n    );\\n\\n    DigitalSignatureTypes.SignatureConstraint storage constraint;\\n    bool found = false;\\n    for (uint i = 0; i < agreement.constraints.length; i++) {\\n      if (\\n        keccak256(abi.encodePacked(agreement.constraints[i].identifier)) ==\\n        keccak256(abi.encodePacked(params.identifier))\\n      ) {\\n        found = true;\\n        constraint = agreement.constraints[i];\\n        require(\\n          constraint.allowedToUse == 0 ||\\n            constraint.totalUsed < constraint.allowedToUse,\\n          \\\"Signature already gathered\\\"\\n        );\\n        require(\\n          constraint.signer == tx.origin || constraint.signer == address(0),\\n          \\\"Mismatched signer\\\"\\n        );\\n        constraint.totalUsed++;\\n        if (constraint.allowedToUse == 1) {\\n          constraint.signer = tx.origin;\\n        }\\n\\n        break;\\n      }\\n    }\\n\\n    require(found, \\\"Missing signature constraint\\\");\\n\\n    DigitalSignatureTypes.Profile storage profile = profiles[tx.origin];\\n\\n    DigitalSignatureTypes.SignaturePacket memory packet = DigitalSignatureTypes\\n      .SignaturePacket({\\n        agreementOwner: agreement.owner,\\n        agreementIndex: agreement.index,\\n        index: profile.totalSignatures,\\n        identifier: params.identifier,\\n        encryptedCid: params.encryptedCid,\\n        signer: tx.origin,\\n        timestamp: block.timestamp,\\n        blockNumber: block.number\\n      });\\n\\n    _profileSignatureCallback(profile, packet, params.extraInfo);\\n    _signatureCallback(agreement, packet, params.extraInfo);\\n\\n    packets[tx.origin][profile.totalSignatures] = packet;\\n\\n    agreement.signedPackets++;\\n    if (agreement.signedPackets == agreement.totalPackets) {\\n      agreement.status = DigitalSignatureTypes.AgreementStatus.COMPLETE;\\n      DigitalSignatureTypes.Profile storage agreementProfile = profiles[\\n        agreement.owner\\n      ];\\n      _profileAgreementCallback(agreementProfile, agreement, bytes(\\\"\\\"));\\n      _agreementCallback(agreement, bytes(\\\"\\\"));\\n    }\\n\\n    return profile.totalSignatures++;\\n  }\\n\\n  function _profileSignatureCallback(\\n    DigitalSignatureTypes.Profile storage profile,\\n    DigitalSignatureTypes.SignaturePacket memory packet,\\n    bytes memory extraInfo\\n  ) internal {\\n    if (profile.signatureCallback == address(0)) {\\n      return;\\n    }\\n\\n    ISignatureCallback cb = ISignatureCallback(profile.signatureCallback);\\n    cb.signatureCallback(packet, extraInfo);\\n  }\\n\\n  function _signatureCallback(\\n    DigitalSignatureTypes.Agreement storage agreement,\\n    DigitalSignatureTypes.SignaturePacket memory packet,\\n    bytes memory extraInfo\\n  ) internal {\\n    if (agreement.signatureCallback == address(0)) {\\n      return;\\n    }\\n\\n    ISignatureCallback cb = ISignatureCallback(agreement.signatureCallback);\\n    cb.signatureCallback(packet, extraInfo);\\n  }\\n\\n  function getAgreements(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (DigitalSignatureTypes.Agreement[] memory) {\\n    DigitalSignatureTypes.Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalAgreements - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    DigitalSignatureTypes.Agreement[]\\n      memory ags = new DigitalSignatureTypes.Agreement[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      ags[index++] = agreements[owner][i];\\n    }\\n\\n    return ags;\\n  }\\n\\n  function getSignatures(\\n    address owner,\\n    uint256 offset,\\n    uint8 limit\\n  ) public view returns (DigitalSignatureTypes.SignaturePacket[] memory) {\\n    DigitalSignatureTypes.Profile memory profile = profiles[owner];\\n\\n    uint index = 0;\\n    uint remaining = profile.totalSignatures - offset;\\n    uint totalToFetch = remaining > limit ? limit : remaining;\\n    DigitalSignatureTypes.SignaturePacket[]\\n      memory sigs = new DigitalSignatureTypes.SignaturePacket[](totalToFetch);\\n\\n    for (uint256 i = offset; i < offset + totalToFetch; i++) {\\n      sigs[index++] = packets[owner][i];\\n    }\\n\\n    return sigs;\\n  }\\n}\\n\",\"keccak256\":\"0xc2705197a38bbdcf74807892ff2a7112e099d1415aef76ab4b747159da3411f4\",\"license\":\"UNLICENSED\"},\"contracts/callbacks/agreements/IAgreementCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../types/DigitalSignatureTypes.sol\\\";\\n\\nstruct AgreementCallbackResponse {\\n  DigitalSignatureTypes.AgreementStatus status;\\n  address signatureCallback;\\n}\\n\\ninterface IAgreementCallback {\\n  function agreementCallback(\\n    DigitalSignatureTypes.Agreement memory agreement,\\n    bytes memory extraInfo\\n  ) external returns (AgreementCallbackResponse memory resp);\\n}\\n\",\"keccak256\":\"0xf0c186a551466f04483e947ab0465d11ffce13aaaeb2dfaed5b0c91a991af42f\",\"license\":\"MIT\"},\"contracts/callbacks/signatures/ISignatureCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../types/DigitalSignatureTypes.sol\\\";\\n\\ninterface ISignatureCallback {\\n  function signatureCallback(\\n    DigitalSignatureTypes.SignaturePacket memory packet,\\n    bytes memory extraInfo\\n  ) external;\\n}\\n\",\"keccak256\":\"0xfd6ce576eef1437657967451c7b3f654349fea3b7a9c1a7be00c5c37f30ef2aa\",\"license\":\"MIT\"},\"contracts/nft/AgreementNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"../types/DigitalSignatureTypes.sol\\\";\\nimport \\\"../callbacks/signatures/ISignatureCallback.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract AgreementNFT is ISignatureCallback, ERC721URIStorage {\\n  address private _owner;\\n  uint256 private nextTokenId;\\n  string private _imageCID;\\n  mapping(address => mapping(string => uint256)) private _ownerTokens;\\n\\n  constructor(\\n    address owner_,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory imageCID_\\n  ) ERC721(_name, _symbol) {\\n    nextTokenId = 1;\\n    _owner = owner_;\\n    _imageCID = imageCID_;\\n  }\\n\\n  function getImageCID() public view returns (string memory) {\\n    return _imageCID;\\n  }\\n\\n  function signatureCallback(\\n    DigitalSignatureTypes.SignaturePacket memory packet,\\n    bytes memory extraInfo\\n  ) public {\\n    require(_owner == msg.sender, \\\"Only owner can mint NFTs\\\");\\n\\n    string memory tokenURI = string(extraInfo);\\n\\n    _mint(packet.signer, nextTokenId);\\n    _setTokenURI(nextTokenId, tokenURI);\\n    _ownerTokens[packet.signer][tokenURI] = nextTokenId;\\n    nextTokenId++;\\n  }\\n\\n  function verifyByTokenURI(\\n    address signer,\\n    string calldata tokenURI\\n  ) public view returns (bool) {\\n    uint256 tokenId = _ownerTokens[signer][tokenURI];\\n    return _ownerOf(tokenId) == signer;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 firstTokenId,\\n    uint256 batchSize\\n  ) internal virtual override {\\n    require(from == address(0), \\\"token transfer not allowed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xc2f181124bfec424505d5b820de2cfe3d8ee397b051e2639e91f680a14874fa3\",\"license\":\"MIT\"},\"contracts/nft/AgreementNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IAgreementNFTFactory.sol\\\";\\nimport \\\"./AgreementNFT.sol\\\";\\n\\ncontract AgreementNFTFactory {\\n  function deploy(\\n    string memory name,\\n    string memory symbol,\\n    string memory imageCID\\n  ) public returns (address) {\\n    AgreementNFT nftContract = new AgreementNFT(\\n      msg.sender,\\n      name,\\n      symbol,\\n      imageCID\\n    );\\n    return address(nftContract);\\n  }\\n}\\n\",\"keccak256\":\"0x2cf8ca790bc1989e4d1b0ef660200a622d4da4ed750b7f83cb49f252100d6d3c\",\"license\":\"MIT\"},\"contracts/nft/IAgreementNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAgreementNFT {\\n  function signatureMint(\\n    address signer,\\n    string calldata tokenURI\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc126eeb7f8088480d3b17ed90f8e75ba50fc0c385d07b58b6b7bb8ab9df45388\",\"license\":\"MIT\"},\"contracts/nft/IAgreementNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAgreementNFTFactory {\\n  function deploy(\\n    string memory name,\\n    string memory symbol,\\n    string memory imageCID\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x4add9e6e82f7b08152acf8389296e83a51739dcc497d91861dbe0c459bc87a4e\",\"license\":\"MIT\"},\"contracts/types/DigitalSignatureTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nlibrary DigitalSignatureTypes {\\n  enum AgreementStatus {\\n    NEW,\\n    PENDING,\\n    COMPLETE,\\n    APPROVED,\\n    REJECTED\\n  }\\n\\n  struct Profile {\\n    uint256 totalAgreements;\\n    uint256 totalSignatures;\\n    address agreementCallback;\\n    address signatureCallback;\\n  }\\n\\n  struct SignatureConstraint {\\n    string identifier;\\n    address signer;\\n    uint256 totalUsed;\\n    uint256 allowedToUse;\\n  }\\n\\n  struct Agreement {\\n    address owner;\\n    AgreementStatus status;\\n    uint256 index;\\n    string identifier;\\n    string cid;\\n    string encryptedCid;\\n    string descriptionCid;\\n    uint8 signedPackets;\\n    uint8 totalPackets;\\n    SignatureConstraint[] constraints;\\n    address agreementCallback;\\n    address signatureCallback;\\n  }\\n\\n  struct SignaturePacket {\\n    address agreementOwner;\\n    uint256 agreementIndex;\\n    uint256 index;\\n    string identifier;\\n    string encryptedCid;\\n    address signer;\\n    uint timestamp;\\n    uint blockNumber;\\n  }\\n}\\n\",\"keccak256\":\"0xa0bc6d3eab7a0278a3ac746034a710d9c5f5dce1ff33cc6af3622b70af55a696\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613e78806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063622116b61161005b578063622116b6146100fe57806397012bef1461012e578063bc9c90561461014a578063d6afc9b11461017a5761007d565b80630a37632f1461008257806314ad09d8146100b2578063554230f9146100ce575b600080fd5b61009c60048036038101906100979190612824565b610198565b6040516100a9919061287c565b60405180910390f35b6100cc60048036038101906100c79190612897565b61051c565b005b6100e860048036038101906100e391906128fd565b6105a5565b6040516100f59190612d7a565b60405180910390f35b61011860048036038101906101139190612dc0565b610d20565b604051610125919061287c565b60405180910390f35b61014860048036038101906101439190612897565b611642565b005b610164600480360381019061015f91906128fd565b6116cb565b6040516101719190612f82565b60405180910390f35b610182611b1a565b60405161018f9190612ff9565b60405180910390f35b6000806000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000015481526020019081526020016000209050328160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160000160146101000a81548160ff0219169083600481111561029e5761029d61298b565b5b02179055508160000154816001018190555083600001518160020190816102c59190613220565b5083602001518160030190816102db9190613220565b5083604001518160040190816102f19190613220565b5083606001518160050190816103079190613220565b5060008160060160006101000a81548160ff021916908360ff1602179055508360800151518160060160016101000a81548160ff021916908360ff1602179055508360a001518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8460800151518110156104715781600701856080015182815181106103ba576103b96132f2565b5b6020026020010151908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000190816104009190613220565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301555050808061046990613350565b915050610392565b5061048182828660e00151611c30565b61048f818560e00151611db2565b600060048111156104a3576104a261298b565b5b8160000160149054906101000a900460ff1660048111156104c7576104c661298b565b5b036104fa5760018160000160146101000a81548160ff021916908360048111156104f4576104f361298b565b5b02179055505b81600001600081548092919061050f90613350565b9190505592505050919050565b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000808583600001516106c79190613398565b905060008560ff1682116106db57816106e0565b8560ff165b905060008167ffffffffffffffff8111156106fe576106fd6122c9565b5b60405190808252806020026020018201604052801561073757816020015b61072461211f565b81526020019060019003908161071c5790505b50905060008890505b828961074c91906133cc565b811015610d1057600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600481111561082a5761082961298b565b5b600481111561083c5761083b61298b565b5b81526020016001820154815260200160028201805461085a90613043565b80601f016020809104026020016040519081016040528092919081815260200182805461088690613043565b80156108d35780601f106108a8576101008083540402835291602001916108d3565b820191906000526020600020905b8154815290600101906020018083116108b657829003601f168201915b505050505081526020016003820180546108ec90613043565b80601f016020809104026020016040519081016040528092919081815260200182805461091890613043565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b5050505050815260200160048201805461097e90613043565b80601f01602080910402602001604051908101604052809291908181526020018280546109aa90613043565b80156109f75780601f106109cc576101008083540402835291602001916109f7565b820191906000526020600020905b8154815290600101906020018083116109da57829003601f168201915b50505050508152602001600582018054610a1090613043565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3c90613043565b8015610a895780601f10610a5e57610100808354040283529160200191610a89565b820191906000526020600020905b815481529060010190602001808311610a6c57829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff1681526020016006820160019054906101000a900460ff1660ff1660ff16815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610c1f5783829060005260206000209060040201604051806080016040529081600082018054610b2490613043565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5090613043565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505081526020019060010190610af1565b5050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828680610cdf90613350565b975081518110610cf257610cf16132f2565b5b60200260200101819052508080610d0890613350565b915050610740565b5080955050505050509392505050565b60008060016000846000016020810190610d3a9190612897565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020013581526020019081526020016000209050826000016020810190610d9e9190612897565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e269061345d565b60405180910390fd5b60016004811115610e4357610e4261298b565b5b8160000160149054906101000a900460ff166004811115610e6757610e6661298b565b5b14610ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9e906134c9565b60405180910390fd5b6000806000905060005b836007018054905081101561113b57858060400190610ed091906134f8565b604051602001610ee192919061358b565b60405160208183030381529060405280519060200120846007018281548110610f0d57610f0c6132f2565b5b9060005260206000209060040201600001604051602001610f2e9190613627565b60405160208183030381529060405280519060200120036111285760019150836007018181548110610f6357610f626132f2565b5b90600052602060002090600402019250600083600301541480610f8d575082600301548360020154105b610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc39061368a565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061107a5750600073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6110b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b0906136f6565b60405180910390fd5b8260020160008154809291906110ce90613350565b9190505550600183600301540361112357328360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b61113b565b808061113390613350565b915050610eb1565b508061117c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117390613762565b60405180910390fd5b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040518061010001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866001015481526020018360010154815260200188806040019061123091906134f8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200188806060019061128891906134f8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013273ffffffffffffffffffffffffffffffffffffffff168152602001428152602001438152509050611355828289806080019061130d9190613782565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f33565b6113b2858289806080019061136a9190613782565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612029565b80600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816114779190613220565b50608082015181600401908161148d9190613220565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e0820151816007015590505084600601600081819054906101000a900460ff168092919061150d906137e5565b91906101000a81548160ff021916908360ff160217905550508460060160019054906101000a900460ff1660ff168560060160009054906101000a900460ff1660ff160361161d5760028560000160146101000a81548160ff0219169083600481111561157d5761157c61298b565b5b021790555060008060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611602818760405180602001604052806000815250611c30565b61161b8660405180602001604052806000815250611db2565b505b81600101600081548092919061163290613350565b9190505595505050505050919050565b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000808583602001516117ed9190613398565b905060008560ff1682116118015781611806565b8560ff165b905060008167ffffffffffffffff811115611824576118236122c9565b5b60405190808252806020026020018201604052801561185d57816020015b61184a6121da565b8152602001906001900390816118425790505b50905060008890505b828961187291906133cc565b811015611b0a57600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805461194f90613043565b80601f016020809104026020016040519081016040528092919081815260200182805461197b90613043565b80156119c85780601f1061199d576101008083540402835291602001916119c8565b820191906000526020600020905b8154815290600101906020018083116119ab57829003601f168201915b505050505081526020016004820180546119e190613043565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0d90613043565b8015611a5a5780601f10611a2f57610100808354040283529160200191611a5a565b820191906000526020600020905b815481529060010190602001808311611a3d57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481525050828680611ad990613350565b975081518110611aec57611aeb6132f2565b5b60200260200101819052508080611b0290613350565b915050611866565b5080955050505050509392505050565b611b2261224b565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905090565b600073ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315611dad5760008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166365c4938d85856040518363ffffffff1660e01b8152600401611cef929190613c66565b60408051808303816000875af1158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d319190613d27565b905080600001518460000160146101000a81548160ff02191690836004811115611d5e57611d5d61298b565b5b021790555080602001518460090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315611f2f5760008260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166365c4938d85856040518363ffffffff1660e01b8152600401611e71929190613c66565b60408051808303816000875af1158015611e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb39190613d27565b905080600001518460000160146101000a81548160ff02191690836004811115611ee057611edf61298b565b5b021790555080602001518460090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603156120245760008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663564066f684846040518363ffffffff1660e01b8152600401611ff0929190613e0b565b600060405180830381600087803b15801561200a57600080fd5b505af115801561201e573d6000803e3d6000fd5b50505050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168360090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16031561211a5760008360090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663564066f684846040518363ffffffff1660e01b81526004016120e6929190613e0b565b600060405180830381600087803b15801561210057600080fd5b505af1158015612114573d6000803e3d6000fd5b50505050505b505050565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600481111561215c5761215b61298b565b5b81526020016000815260200160608152602001606081526020016060815260200160608152602001600060ff168152602001600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612301826122b8565b810181811067ffffffffffffffff821117156123205761231f6122c9565b5b80604052505050565b600061233361229f565b905061233f82826122f8565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561236e5761236d6122c9565b5b612377826122b8565b9050602081019050919050565b82818337600083830152505050565b60006123a66123a184612353565b612329565b9050828152602081018484840111156123c2576123c161234e565b5b6123cd848285612384565b509392505050565b600082601f8301126123ea576123e9612349565b5b81356123fa848260208601612393565b91505092915050565b600067ffffffffffffffff82111561241e5761241d6122c9565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061245f82612434565b9050919050565b61246f81612454565b811461247a57600080fd5b50565b60008135905061248c81612466565b92915050565b6000819050919050565b6124a581612492565b81146124b057600080fd5b50565b6000813590506124c28161249c565b92915050565b6000608082840312156124de576124dd6122b3565b5b6124e86080612329565b9050600082013567ffffffffffffffff81111561250857612507612344565b5b612514848285016123d5565b60008301525060206125288482850161247d565b602083015250604061253c848285016124b3565b6040830152506060612550848285016124b3565b60608301525092915050565b600061256f61256a84612403565b612329565b905080838252602082019050602084028301858111156125925761259161242f565b5b835b818110156125d957803567ffffffffffffffff8111156125b7576125b6612349565b5b8086016125c489826124c8565b85526020850194505050602081019050612594565b5050509392505050565b600082601f8301126125f8576125f7612349565b5b813561260884826020860161255c565b91505092915050565b600067ffffffffffffffff82111561262c5761262b6122c9565b5b612635826122b8565b9050602081019050919050565b600061265561265084612611565b612329565b9050828152602081018484840111156126715761267061234e565b5b61267c848285612384565b509392505050565b600082601f83011261269957612698612349565b5b81356126a9848260208601612642565b91505092915050565b600061010082840312156126c9576126c86122b3565b5b6126d4610100612329565b9050600082013567ffffffffffffffff8111156126f4576126f3612344565b5b612700848285016123d5565b600083015250602082013567ffffffffffffffff81111561272457612723612344565b5b612730848285016123d5565b602083015250604082013567ffffffffffffffff81111561275457612753612344565b5b612760848285016123d5565b604083015250606082013567ffffffffffffffff81111561278457612783612344565b5b612790848285016123d5565b606083015250608082013567ffffffffffffffff8111156127b4576127b3612344565b5b6127c0848285016125e3565b60808301525060a06127d48482850161247d565b60a08301525060c06127e88482850161247d565b60c08301525060e082013567ffffffffffffffff81111561280c5761280b612344565b5b61281884828501612684565b60e08301525092915050565b60006020828403121561283a576128396122a9565b5b600082013567ffffffffffffffff811115612858576128576122ae565b5b612864848285016126b2565b91505092915050565b61287681612492565b82525050565b6000602082019050612891600083018461286d565b92915050565b6000602082840312156128ad576128ac6122a9565b5b60006128bb8482850161247d565b91505092915050565b600060ff82169050919050565b6128da816128c4565b81146128e557600080fd5b50565b6000813590506128f7816128d1565b92915050565b600080600060608486031215612916576129156122a9565b5b60006129248682870161247d565b9350506020612935868287016124b3565b9250506040612946868287016128e8565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61298581612454565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106129cb576129ca61298b565b5b50565b60008190506129dc826129ba565b919050565b60006129ec826129ce565b9050919050565b6129fc816129e1565b82525050565b612a0b81612492565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a4b578082015181840152602081019050612a30565b60008484015250505050565b6000612a6282612a11565b612a6c8185612a1c565b9350612a7c818560208601612a2d565b612a85816122b8565b840191505092915050565b612a99816128c4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006080830160008301518482036000860152612ae88282612a57565b9150506020830151612afd602086018261297c565b506040830151612b106040860182612a02565b506060830151612b236060860182612a02565b508091505092915050565b6000612b3a8383612acb565b905092915050565b6000602082019050919050565b6000612b5a82612a9f565b612b648185612aaa565b935083602082028501612b7685612abb565b8060005b85811015612bb25784840389528151612b938582612b2e565b9450612b9e83612b42565b925060208a01995050600181019050612b7a565b50829750879550505050505092915050565b600061018083016000830151612bdd600086018261297c565b506020830151612bf060208601826129f3565b506040830151612c036040860182612a02565b5060608301518482036060860152612c1b8282612a57565b91505060808301518482036080860152612c358282612a57565b91505060a083015184820360a0860152612c4f8282612a57565b91505060c083015184820360c0860152612c698282612a57565b91505060e0830151612c7e60e0860182612a90565b50610100830151612c93610100860182612a90565b50610120830151848203610120860152612cad8282612b4f565b915050610140830151612cc461014086018261297c565b50610160830151612cd961016086018261297c565b508091505092915050565b6000612cf08383612bc4565b905092915050565b6000602082019050919050565b6000612d1082612950565b612d1a818561295b565b935083602082028501612d2c8561296c565b8060005b85811015612d685784840389528151612d498582612ce4565b9450612d5483612cf8565b925060208a01995050600181019050612d30565b50829750879550505050505092915050565b60006020820190508181036000830152612d948184612d05565b905092915050565b600080fd5b600060a08284031215612db757612db6612d9c565b5b81905092915050565b600060208284031215612dd657612dd56122a9565b5b600082013567ffffffffffffffff811115612df457612df36122ae565b5b612e0084828501612da1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061010083016000830151612e4e600086018261297c565b506020830151612e616020860182612a02565b506040830151612e746040860182612a02565b5060608301518482036060860152612e8c8282612a57565b91505060808301518482036080860152612ea68282612a57565b91505060a0830151612ebb60a086018261297c565b5060c0830151612ece60c0860182612a02565b5060e0830151612ee160e0860182612a02565b508091505092915050565b6000612ef88383612e35565b905092915050565b6000602082019050919050565b6000612f1882612e09565b612f228185612e14565b935083602082028501612f3485612e25565b8060005b85811015612f705784840389528151612f518582612eec565b9450612f5c83612f00565b925060208a01995050600181019050612f38565b50829750879550505050505092915050565b60006020820190508181036000830152612f9c8184612f0d565b905092915050565b608082016000820151612fba6000850182612a02565b506020820151612fcd6020850182612a02565b506040820151612fe0604085018261297c565b506060820151612ff3606085018261297c565b50505050565b600060808201905061300e6000830184612fa4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061305b57607f821691505b60208210810361306e5761306d613014565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613099565b6130e08683613099565b95508019841693508086168417925050509392505050565b6000819050919050565b600061311d61311861311384612492565b6130f8565b612492565b9050919050565b6000819050919050565b61313783613102565b61314b61314382613124565b8484546130a6565b825550505050565b600090565b613160613153565b61316b81848461312e565b505050565b5b8181101561318f57613184600082613158565b600181019050613171565b5050565b601f8211156131d4576131a581613074565b6131ae84613089565b810160208510156131bd578190505b6131d16131c985613089565b830182613170565b50505b505050565b600082821c905092915050565b60006131f7600019846008026131d9565b1980831691505092915050565b600061321083836131e6565b9150826002028217905092915050565b61322982612a11565b67ffffffffffffffff811115613242576132416122c9565b5b61324c8254613043565b613257828285613193565b600060209050601f83116001811461328a5760008415613278578287015190505b6132828582613204565b8655506132ea565b601f19841661329886613074565b60005b828110156132c05784890151825560018201915060208501945060208101905061329b565b868310156132dd57848901516132d9601f8916826131e6565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061335b82612492565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361338d5761338c613321565b5b600182019050919050565b60006133a382612492565b91506133ae83612492565b92508282039050818111156133c6576133c5613321565b5b92915050565b60006133d782612492565b91506133e283612492565b92508282019050808211156133fa576133f9613321565b5b92915050565b600082825260208201905092915050565b7f496e76616c69642061677265656d656e74000000000000000000000000000000600082015250565b6000613447601183613400565b915061345282613411565b602082019050919050565b600060208201905081810360008301526134768161343a565b9050919050565b7f41677265656d656e74206973206e6f742050454e44494e470000000000000000600082015250565b60006134b3601883613400565b91506134be8261347d565b602082019050919050565b600060208201905081810360008301526134e2816134a6565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613515576135146134e9565b5b80840192508235915067ffffffffffffffff821115613537576135366134ee565b5b602083019250600182023603831315613553576135526134f3565b5b509250929050565b600081905092915050565b6000613572838561355b565b935061357f838584612384565b82840190509392505050565b6000613598828486613566565b91508190509392505050565b600081546135b181613043565b6135bb818661355b565b945060018216600081146135d657600181146135eb5761361e565b60ff198316865281151582028601935061361e565b6135f485613074565b60005b83811015613616578154818901526001820191506020810190506135f7565b838801955050505b50505092915050565b600061363382846135a4565b915081905092915050565b7f5369676e617475726520616c7265616479206761746865726564000000000000600082015250565b6000613674601a83613400565b915061367f8261363e565b602082019050919050565b600060208201905081810360008301526136a381613667565b9050919050565b7f4d69736d617463686564207369676e6572000000000000000000000000000000600082015250565b60006136e0601183613400565b91506136eb826136aa565b602082019050919050565b6000602082019050818103600083015261370f816136d3565b9050919050565b7f4d697373696e67207369676e617475726520636f6e73747261696e7400000000600082015250565b600061374c601c83613400565b915061375782613716565b602082019050919050565b6000602082019050818103600083015261377b8161373f565b9050919050565b6000808335600160200384360303811261379f5761379e6134e9565b5b80840192508235915067ffffffffffffffff8211156137c1576137c06134ee565b5b6020830192506001820236038313156137dd576137dc6134f3565b5b509250929050565b60006137f0826128c4565b915060ff820361380357613802613321565b5b600182019050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061384e6138498361380e565b61381b565b9050919050565b60008160a01c9050919050565b600060ff82169050919050565b600061388261387d83613855565b613862565b9050919050565b6000819050919050565b60006138a66138a18361380e565b613889565b9050919050565b600081546138ba81613043565b6138c48186612a1c565b945060018216600081146138df57600181146138f557613928565b60ff198316865281151560200286019350613928565b6138fe85613074565b60005b8381101561392057815481890152600182019150602081019050613901565b808801955050505b50505092915050565b600060ff82169050919050565b600061395161394c8361380e565b613931565b9050919050565b60008160081c9050919050565b600061397861397383613958565b613931565b9050919050565b600081549050919050565b60008190508160005260206000209050919050565b600060808301600080840185830360008701526139bc83826138ad565b925050600184015490506139cf8161383b565b6139dc602087018261297c565b50600284015490506139ed81613893565b6139fa6040870182612a02565b5060038401549050613a0b81613893565b613a186060870182612a02565b50819250505092915050565b6000613a30838361399f565b905092915050565b6000600482019050919050565b6000613a508261397f565b613a5a8185612aaa565b935083602082028501613a6c8561398a565b8060005b85811015613aa757848403895281613a888582613a24565b9450613a9383613a38565b925060208a01995050600181019050613a70565b50829750879550505050505092915050565b600061018083016000808401549050613ad18161383b565b613ade600087018261297c565b50613ae88161386f565b613af560208701826129f3565b5060018401549050613b0681613893565b613b136040870182612a02565b50600284018583036060870152613b2a83826138ad565b925050600384018583036080870152613b4383826138ad565b9250506004840185830360a0870152613b5c83826138ad565b9250506005840185830360c0870152613b7583826138ad565b92505060068401549050613b888161393e565b613b9560e0870182612a90565b50613b9f81613965565b613bad610100870182612a90565b5060078401858303610120870152613bc58382613a45565b92505060088401549050613bd88161383b565b613be661014087018261297c565b5060098401549050613bf78161383b565b613c0561016087018261297c565b50819250505092915050565b600081519050919050565b600082825260208201905092915050565b6000613c3882613c11565b613c428185613c1c565b9350613c52818560208601612a2d565b613c5b816122b8565b840191505092915050565b60006040820190508181036000830152613c808185613ab9565b90508181036020830152613c948184613c2d565b90509392505050565b60058110613caa57600080fd5b50565b600081519050613cbc81613c9d565b92915050565b600081519050613cd181612466565b92915050565b600060408284031215613ced57613cec6122b3565b5b613cf76040612329565b90506000613d0784828501613cad565b6000830152506020613d1b84828501613cc2565b60208301525092915050565b600060408284031215613d3d57613d3c6122a9565b5b6000613d4b84828501613cd7565b91505092915050565b600061010083016000830151613d6d600086018261297c565b506020830151613d806020860182612a02565b506040830151613d936040860182612a02565b5060608301518482036060860152613dab8282612a57565b91505060808301518482036080860152613dc58282612a57565b91505060a0830151613dda60a086018261297c565b5060c0830151613ded60c0860182612a02565b5060e0830151613e0060e0860182612a02565b508091505092915050565b60006040820190508181036000830152613e258185613d54565b90508181036020830152613e398184613c2d565b9050939250505056fea2646970667358221220e1263a1ae4db47c9d5e434dd10e242ddb0cb6ad975e0924e9352727d2f30641264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063622116b61161005b578063622116b6146100fe57806397012bef1461012e578063bc9c90561461014a578063d6afc9b11461017a5761007d565b80630a37632f1461008257806314ad09d8146100b2578063554230f9146100ce575b600080fd5b61009c60048036038101906100979190612824565b610198565b6040516100a9919061287c565b60405180910390f35b6100cc60048036038101906100c79190612897565b61051c565b005b6100e860048036038101906100e391906128fd565b6105a5565b6040516100f59190612d7a565b60405180910390f35b61011860048036038101906101139190612dc0565b610d20565b604051610125919061287c565b60405180910390f35b61014860048036038101906101439190612897565b611642565b005b610164600480360381019061015f91906128fd565b6116cb565b6040516101719190612f82565b60405180910390f35b610182611b1a565b60405161018f9190612ff9565b60405180910390f35b6000806000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000015481526020019081526020016000209050328160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160000160146101000a81548160ff0219169083600481111561029e5761029d61298b565b5b02179055508160000154816001018190555083600001518160020190816102c59190613220565b5083602001518160030190816102db9190613220565b5083604001518160040190816102f19190613220565b5083606001518160050190816103079190613220565b5060008160060160006101000a81548160ff021916908360ff1602179055508360800151518160060160016101000a81548160ff021916908360ff1602179055508360a001518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8460800151518110156104715781600701856080015182815181106103ba576103b96132f2565b5b6020026020010151908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000190816104009190613220565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301555050808061046990613350565b915050610392565b5061048182828660e00151611c30565b61048f818560e00151611db2565b600060048111156104a3576104a261298b565b5b8160000160149054906101000a900460ff1660048111156104c7576104c661298b565b5b036104fa5760018160000160146101000a81548160ff021916908360048111156104f4576104f361298b565b5b02179055505b81600001600081548092919061050f90613350565b9190505592505050919050565b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000808583600001516106c79190613398565b905060008560ff1682116106db57816106e0565b8560ff165b905060008167ffffffffffffffff8111156106fe576106fd6122c9565b5b60405190808252806020026020018201604052801561073757816020015b61072461211f565b81526020019060019003908161071c5790505b50905060008890505b828961074c91906133cc565b811015610d1057600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600481111561082a5761082961298b565b5b600481111561083c5761083b61298b565b5b81526020016001820154815260200160028201805461085a90613043565b80601f016020809104026020016040519081016040528092919081815260200182805461088690613043565b80156108d35780601f106108a8576101008083540402835291602001916108d3565b820191906000526020600020905b8154815290600101906020018083116108b657829003601f168201915b505050505081526020016003820180546108ec90613043565b80601f016020809104026020016040519081016040528092919081815260200182805461091890613043565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b5050505050815260200160048201805461097e90613043565b80601f01602080910402602001604051908101604052809291908181526020018280546109aa90613043565b80156109f75780601f106109cc576101008083540402835291602001916109f7565b820191906000526020600020905b8154815290600101906020018083116109da57829003601f168201915b50505050508152602001600582018054610a1090613043565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3c90613043565b8015610a895780601f10610a5e57610100808354040283529160200191610a89565b820191906000526020600020905b815481529060010190602001808311610a6c57829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff1681526020016006820160019054906101000a900460ff1660ff1660ff16815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015610c1f5783829060005260206000209060040201604051806080016040529081600082018054610b2490613043565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5090613043565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505081526020019060010190610af1565b5050505081526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828680610cdf90613350565b975081518110610cf257610cf16132f2565b5b60200260200101819052508080610d0890613350565b915050610740565b5080955050505050509392505050565b60008060016000846000016020810190610d3a9190612897565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020013581526020019081526020016000209050826000016020810190610d9e9190612897565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e269061345d565b60405180910390fd5b60016004811115610e4357610e4261298b565b5b8160000160149054906101000a900460ff166004811115610e6757610e6661298b565b5b14610ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9e906134c9565b60405180910390fd5b6000806000905060005b836007018054905081101561113b57858060400190610ed091906134f8565b604051602001610ee192919061358b565b60405160208183030381529060405280519060200120846007018281548110610f0d57610f0c6132f2565b5b9060005260206000209060040201600001604051602001610f2e9190613627565b60405160208183030381529060405280519060200120036111285760019150836007018181548110610f6357610f626132f2565b5b90600052602060002090600402019250600083600301541480610f8d575082600301548360020154105b610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc39061368a565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061107a5750600073ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6110b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b0906136f6565b60405180910390fd5b8260020160008154809291906110ce90613350565b9190505550600183600301540361112357328360010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b61113b565b808061113390613350565b915050610eb1565b508061117c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117390613762565b60405180910390fd5b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006040518061010001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866001015481526020018360010154815260200188806040019061123091906134f8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200188806060019061128891906134f8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013273ffffffffffffffffffffffffffffffffffffffff168152602001428152602001438152509050611355828289806080019061130d9190613782565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f33565b6113b2858289806080019061136a9190613782565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612029565b80600260003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460010154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816114779190613220565b50608082015181600401908161148d9190613220565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e0820151816007015590505084600601600081819054906101000a900460ff168092919061150d906137e5565b91906101000a81548160ff021916908360ff160217905550508460060160019054906101000a900460ff1660ff168560060160009054906101000a900460ff1660ff160361161d5760028560000160146101000a81548160ff0219169083600481111561157d5761157c61298b565b5b021790555060008060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611602818760405180602001604052806000815250611c30565b61161b8660405180602001604052806000815250611db2565b505b81600101600081548092919061163290613350565b9190505595505050505050919050565b60008060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000808583602001516117ed9190613398565b905060008560ff1682116118015781611806565b8560ff165b905060008167ffffffffffffffff811115611824576118236122c9565b5b60405190808252806020026020018201604052801561185d57816020015b61184a6121da565b8152602001906001900390816118425790505b50905060008890505b828961187291906133cc565b811015611b0a57600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805461194f90613043565b80601f016020809104026020016040519081016040528092919081815260200182805461197b90613043565b80156119c85780601f1061199d576101008083540402835291602001916119c8565b820191906000526020600020905b8154815290600101906020018083116119ab57829003601f168201915b505050505081526020016004820180546119e190613043565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0d90613043565b8015611a5a5780601f10611a2f57610100808354040283529160200191611a5a565b820191906000526020600020905b815481529060010190602001808311611a3d57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481525050828680611ad990613350565b975081518110611aec57611aeb6132f2565b5b60200260200101819052508080611b0290613350565b915050611866565b5080955050505050509392505050565b611b2261224b565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905090565b600073ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315611dad5760008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166365c4938d85856040518363ffffffff1660e01b8152600401611cef929190613c66565b60408051808303816000875af1158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d319190613d27565b905080600001518460000160146101000a81548160ff02191690836004811115611d5e57611d5d61298b565b5b021790555080602001518460090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160315611f2f5760008260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166365c4938d85856040518363ffffffff1660e01b8152600401611e71929190613c66565b60408051808303816000875af1158015611e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb39190613d27565b905080600001518460000160146101000a81548160ff02191690836004811115611ee057611edf61298b565b5b021790555080602001518460090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603156120245760008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663564066f684846040518363ffffffff1660e01b8152600401611ff0929190613e0b565b600060405180830381600087803b15801561200a57600080fd5b505af115801561201e573d6000803e3d6000fd5b50505050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168360090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16031561211a5760008360090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663564066f684846040518363ffffffff1660e01b81526004016120e6929190613e0b565b600060405180830381600087803b15801561210057600080fd5b505af1158015612114573d6000803e3d6000fd5b50505050505b505050565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600481111561215c5761215b61298b565b5b81526020016000815260200160608152602001606081526020016060815260200160608152602001600060ff168152602001600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612301826122b8565b810181811067ffffffffffffffff821117156123205761231f6122c9565b5b80604052505050565b600061233361229f565b905061233f82826122f8565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561236e5761236d6122c9565b5b612377826122b8565b9050602081019050919050565b82818337600083830152505050565b60006123a66123a184612353565b612329565b9050828152602081018484840111156123c2576123c161234e565b5b6123cd848285612384565b509392505050565b600082601f8301126123ea576123e9612349565b5b81356123fa848260208601612393565b91505092915050565b600067ffffffffffffffff82111561241e5761241d6122c9565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061245f82612434565b9050919050565b61246f81612454565b811461247a57600080fd5b50565b60008135905061248c81612466565b92915050565b6000819050919050565b6124a581612492565b81146124b057600080fd5b50565b6000813590506124c28161249c565b92915050565b6000608082840312156124de576124dd6122b3565b5b6124e86080612329565b9050600082013567ffffffffffffffff81111561250857612507612344565b5b612514848285016123d5565b60008301525060206125288482850161247d565b602083015250604061253c848285016124b3565b6040830152506060612550848285016124b3565b60608301525092915050565b600061256f61256a84612403565b612329565b905080838252602082019050602084028301858111156125925761259161242f565b5b835b818110156125d957803567ffffffffffffffff8111156125b7576125b6612349565b5b8086016125c489826124c8565b85526020850194505050602081019050612594565b5050509392505050565b600082601f8301126125f8576125f7612349565b5b813561260884826020860161255c565b91505092915050565b600067ffffffffffffffff82111561262c5761262b6122c9565b5b612635826122b8565b9050602081019050919050565b600061265561265084612611565b612329565b9050828152602081018484840111156126715761267061234e565b5b61267c848285612384565b509392505050565b600082601f83011261269957612698612349565b5b81356126a9848260208601612642565b91505092915050565b600061010082840312156126c9576126c86122b3565b5b6126d4610100612329565b9050600082013567ffffffffffffffff8111156126f4576126f3612344565b5b612700848285016123d5565b600083015250602082013567ffffffffffffffff81111561272457612723612344565b5b612730848285016123d5565b602083015250604082013567ffffffffffffffff81111561275457612753612344565b5b612760848285016123d5565b604083015250606082013567ffffffffffffffff81111561278457612783612344565b5b612790848285016123d5565b606083015250608082013567ffffffffffffffff8111156127b4576127b3612344565b5b6127c0848285016125e3565b60808301525060a06127d48482850161247d565b60a08301525060c06127e88482850161247d565b60c08301525060e082013567ffffffffffffffff81111561280c5761280b612344565b5b61281884828501612684565b60e08301525092915050565b60006020828403121561283a576128396122a9565b5b600082013567ffffffffffffffff811115612858576128576122ae565b5b612864848285016126b2565b91505092915050565b61287681612492565b82525050565b6000602082019050612891600083018461286d565b92915050565b6000602082840312156128ad576128ac6122a9565b5b60006128bb8482850161247d565b91505092915050565b600060ff82169050919050565b6128da816128c4565b81146128e557600080fd5b50565b6000813590506128f7816128d1565b92915050565b600080600060608486031215612916576129156122a9565b5b60006129248682870161247d565b9350506020612935868287016124b3565b9250506040612946868287016128e8565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61298581612454565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106129cb576129ca61298b565b5b50565b60008190506129dc826129ba565b919050565b60006129ec826129ce565b9050919050565b6129fc816129e1565b82525050565b612a0b81612492565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612a4b578082015181840152602081019050612a30565b60008484015250505050565b6000612a6282612a11565b612a6c8185612a1c565b9350612a7c818560208601612a2d565b612a85816122b8565b840191505092915050565b612a99816128c4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006080830160008301518482036000860152612ae88282612a57565b9150506020830151612afd602086018261297c565b506040830151612b106040860182612a02565b506060830151612b236060860182612a02565b508091505092915050565b6000612b3a8383612acb565b905092915050565b6000602082019050919050565b6000612b5a82612a9f565b612b648185612aaa565b935083602082028501612b7685612abb565b8060005b85811015612bb25784840389528151612b938582612b2e565b9450612b9e83612b42565b925060208a01995050600181019050612b7a565b50829750879550505050505092915050565b600061018083016000830151612bdd600086018261297c565b506020830151612bf060208601826129f3565b506040830151612c036040860182612a02565b5060608301518482036060860152612c1b8282612a57565b91505060808301518482036080860152612c358282612a57565b91505060a083015184820360a0860152612c4f8282612a57565b91505060c083015184820360c0860152612c698282612a57565b91505060e0830151612c7e60e0860182612a90565b50610100830151612c93610100860182612a90565b50610120830151848203610120860152612cad8282612b4f565b915050610140830151612cc461014086018261297c565b50610160830151612cd961016086018261297c565b508091505092915050565b6000612cf08383612bc4565b905092915050565b6000602082019050919050565b6000612d1082612950565b612d1a818561295b565b935083602082028501612d2c8561296c565b8060005b85811015612d685784840389528151612d498582612ce4565b9450612d5483612cf8565b925060208a01995050600181019050612d30565b50829750879550505050505092915050565b60006020820190508181036000830152612d948184612d05565b905092915050565b600080fd5b600060a08284031215612db757612db6612d9c565b5b81905092915050565b600060208284031215612dd657612dd56122a9565b5b600082013567ffffffffffffffff811115612df457612df36122ae565b5b612e0084828501612da1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061010083016000830151612e4e600086018261297c565b506020830151612e616020860182612a02565b506040830151612e746040860182612a02565b5060608301518482036060860152612e8c8282612a57565b91505060808301518482036080860152612ea68282612a57565b91505060a0830151612ebb60a086018261297c565b5060c0830151612ece60c0860182612a02565b5060e0830151612ee160e0860182612a02565b508091505092915050565b6000612ef88383612e35565b905092915050565b6000602082019050919050565b6000612f1882612e09565b612f228185612e14565b935083602082028501612f3485612e25565b8060005b85811015612f705784840389528151612f518582612eec565b9450612f5c83612f00565b925060208a01995050600181019050612f38565b50829750879550505050505092915050565b60006020820190508181036000830152612f9c8184612f0d565b905092915050565b608082016000820151612fba6000850182612a02565b506020820151612fcd6020850182612a02565b506040820151612fe0604085018261297c565b506060820151612ff3606085018261297c565b50505050565b600060808201905061300e6000830184612fa4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061305b57607f821691505b60208210810361306e5761306d613014565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613099565b6130e08683613099565b95508019841693508086168417925050509392505050565b6000819050919050565b600061311d61311861311384612492565b6130f8565b612492565b9050919050565b6000819050919050565b61313783613102565b61314b61314382613124565b8484546130a6565b825550505050565b600090565b613160613153565b61316b81848461312e565b505050565b5b8181101561318f57613184600082613158565b600181019050613171565b5050565b601f8211156131d4576131a581613074565b6131ae84613089565b810160208510156131bd578190505b6131d16131c985613089565b830182613170565b50505b505050565b600082821c905092915050565b60006131f7600019846008026131d9565b1980831691505092915050565b600061321083836131e6565b9150826002028217905092915050565b61322982612a11565b67ffffffffffffffff811115613242576132416122c9565b5b61324c8254613043565b613257828285613193565b600060209050601f83116001811461328a5760008415613278578287015190505b6132828582613204565b8655506132ea565b601f19841661329886613074565b60005b828110156132c05784890151825560018201915060208501945060208101905061329b565b868310156132dd57848901516132d9601f8916826131e6565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061335b82612492565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361338d5761338c613321565b5b600182019050919050565b60006133a382612492565b91506133ae83612492565b92508282039050818111156133c6576133c5613321565b5b92915050565b60006133d782612492565b91506133e283612492565b92508282019050808211156133fa576133f9613321565b5b92915050565b600082825260208201905092915050565b7f496e76616c69642061677265656d656e74000000000000000000000000000000600082015250565b6000613447601183613400565b915061345282613411565b602082019050919050565b600060208201905081810360008301526134768161343a565b9050919050565b7f41677265656d656e74206973206e6f742050454e44494e470000000000000000600082015250565b60006134b3601883613400565b91506134be8261347d565b602082019050919050565b600060208201905081810360008301526134e2816134a6565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613515576135146134e9565b5b80840192508235915067ffffffffffffffff821115613537576135366134ee565b5b602083019250600182023603831315613553576135526134f3565b5b509250929050565b600081905092915050565b6000613572838561355b565b935061357f838584612384565b82840190509392505050565b6000613598828486613566565b91508190509392505050565b600081546135b181613043565b6135bb818661355b565b945060018216600081146135d657600181146135eb5761361e565b60ff198316865281151582028601935061361e565b6135f485613074565b60005b83811015613616578154818901526001820191506020810190506135f7565b838801955050505b50505092915050565b600061363382846135a4565b915081905092915050565b7f5369676e617475726520616c7265616479206761746865726564000000000000600082015250565b6000613674601a83613400565b915061367f8261363e565b602082019050919050565b600060208201905081810360008301526136a381613667565b9050919050565b7f4d69736d617463686564207369676e6572000000000000000000000000000000600082015250565b60006136e0601183613400565b91506136eb826136aa565b602082019050919050565b6000602082019050818103600083015261370f816136d3565b9050919050565b7f4d697373696e67207369676e617475726520636f6e73747261696e7400000000600082015250565b600061374c601c83613400565b915061375782613716565b602082019050919050565b6000602082019050818103600083015261377b8161373f565b9050919050565b6000808335600160200384360303811261379f5761379e6134e9565b5b80840192508235915067ffffffffffffffff8211156137c1576137c06134ee565b5b6020830192506001820236038313156137dd576137dc6134f3565b5b509250929050565b60006137f0826128c4565b915060ff820361380357613802613321565b5b600182019050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061384e6138498361380e565b61381b565b9050919050565b60008160a01c9050919050565b600060ff82169050919050565b600061388261387d83613855565b613862565b9050919050565b6000819050919050565b60006138a66138a18361380e565b613889565b9050919050565b600081546138ba81613043565b6138c48186612a1c565b945060018216600081146138df57600181146138f557613928565b60ff198316865281151560200286019350613928565b6138fe85613074565b60005b8381101561392057815481890152600182019150602081019050613901565b808801955050505b50505092915050565b600060ff82169050919050565b600061395161394c8361380e565b613931565b9050919050565b60008160081c9050919050565b600061397861397383613958565b613931565b9050919050565b600081549050919050565b60008190508160005260206000209050919050565b600060808301600080840185830360008701526139bc83826138ad565b925050600184015490506139cf8161383b565b6139dc602087018261297c565b50600284015490506139ed81613893565b6139fa6040870182612a02565b5060038401549050613a0b81613893565b613a186060870182612a02565b50819250505092915050565b6000613a30838361399f565b905092915050565b6000600482019050919050565b6000613a508261397f565b613a5a8185612aaa565b935083602082028501613a6c8561398a565b8060005b85811015613aa757848403895281613a888582613a24565b9450613a9383613a38565b925060208a01995050600181019050613a70565b50829750879550505050505092915050565b600061018083016000808401549050613ad18161383b565b613ade600087018261297c565b50613ae88161386f565b613af560208701826129f3565b5060018401549050613b0681613893565b613b136040870182612a02565b50600284018583036060870152613b2a83826138ad565b925050600384018583036080870152613b4383826138ad565b9250506004840185830360a0870152613b5c83826138ad565b9250506005840185830360c0870152613b7583826138ad565b92505060068401549050613b888161393e565b613b9560e0870182612a90565b50613b9f81613965565b613bad610100870182612a90565b5060078401858303610120870152613bc58382613a45565b92505060088401549050613bd88161383b565b613be661014087018261297c565b5060098401549050613bf78161383b565b613c0561016087018261297c565b50819250505092915050565b600081519050919050565b600082825260208201905092915050565b6000613c3882613c11565b613c428185613c1c565b9350613c52818560208601612a2d565b613c5b816122b8565b840191505092915050565b60006040820190508181036000830152613c808185613ab9565b90508181036020830152613c948184613c2d565b90509392505050565b60058110613caa57600080fd5b50565b600081519050613cbc81613c9d565b92915050565b600081519050613cd181612466565b92915050565b600060408284031215613ced57613cec6122b3565b5b613cf76040612329565b90506000613d0784828501613cad565b6000830152506020613d1b84828501613cc2565b60208301525092915050565b600060408284031215613d3d57613d3c6122a9565b5b6000613d4b84828501613cd7565b91505092915050565b600061010083016000830151613d6d600086018261297c565b506020830151613d806020860182612a02565b506040830151613d936040860182612a02565b5060608301518482036060860152613dab8282612a57565b91505060808301518482036080860152613dc58282612a57565b91505060a0830151613dda60a086018261297c565b5060c0830151613ded60c0860182612a02565b5060e0830151613e0060e0860182612a02565b508091505092915050565b60006040820190508181036000830152613e258185613d54565b90508181036020830152613e398184613c2d565b9050939250505056fea2646970667358221220e1263a1ae4db47c9d5e434dd10e242ddb0cb6ad975e0924e9352727d2f30641264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2700,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "profiles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Profile)4089_storage)"
      },
      {
        "astId": 2707,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "agreements",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)4126_storage))"
      },
      {
        "astId": 2714,
        "contract": "contracts/DigitalSignature.sol:DigitalSignature",
        "label": "packets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)4143_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SignatureConstraint)4098_storage)dyn_storage": {
        "base": "t_struct(SignatureConstraint)4098_storage",
        "encoding": "dynamic_array",
        "label": "struct DigitalSignatureTypes.SignatureConstraint[]",
        "numberOfBytes": "32"
      },
      "t_enum(AgreementStatus)4080": {
        "encoding": "inplace",
        "label": "enum DigitalSignatureTypes.AgreementStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Agreement)4126_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct DigitalSignatureTypes.Agreement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Agreement)4126_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(SignaturePacket)4143_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct DigitalSignatureTypes.SignaturePacket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SignaturePacket)4143_storage)"
      },
      "t_mapping(t_address,t_struct(Profile)4089_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DigitalSignatureTypes.Profile)",
        "numberOfBytes": "32",
        "value": "t_struct(Profile)4089_storage"
      },
      "t_mapping(t_uint256,t_struct(Agreement)4126_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DigitalSignatureTypes.Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)4126_storage"
      },
      "t_mapping(t_uint256,t_struct(SignaturePacket)4143_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DigitalSignatureTypes.SignaturePacket)",
        "numberOfBytes": "32",
        "value": "t_struct(SignaturePacket)4143_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)4126_storage": {
        "encoding": "inplace",
        "label": "struct DigitalSignatureTypes.Agreement",
        "members": [
          {
            "astId": 4100,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4103,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(AgreementStatus)4080"
          },
          {
            "astId": 4105,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4107,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4109,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "cid",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4111,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4113,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "descriptionCid",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4115,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signedPackets",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 4117,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalPackets",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 4121,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "constraints",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(SignatureConstraint)4098_storage)dyn_storage"
          },
          {
            "astId": 4123,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementCallback",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 4125,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signatureCallback",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Profile)4089_storage": {
        "encoding": "inplace",
        "label": "struct DigitalSignatureTypes.Profile",
        "members": [
          {
            "astId": 4082,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalAgreements",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4084,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalSignatures",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4086,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementCallback",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4088,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signatureCallback",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SignatureConstraint)4098_storage": {
        "encoding": "inplace",
        "label": "struct DigitalSignatureTypes.SignatureConstraint",
        "members": [
          {
            "astId": 4091,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4093,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4095,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "totalUsed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4097,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "allowedToUse",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SignaturePacket)4143_storage": {
        "encoding": "inplace",
        "label": "struct DigitalSignatureTypes.SignaturePacket",
        "members": [
          {
            "astId": 4128,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4130,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "agreementIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4132,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4134,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "identifier",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4136,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "encryptedCid",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4138,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "signer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 4140,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "timestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4142,
            "contract": "contracts/DigitalSignature.sol:DigitalSignature",
            "label": "blockNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}